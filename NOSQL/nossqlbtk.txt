####################################################################################################################################################################################################################################################################################################################################

w3schools kullanmak çok mantıklı nosql için...


mssql'de bir server tabanlı veritabanıdır.

normalde sql'de bir veritabanın sql sorgulama dili vardır databaseler ve tablolar ve onların ilişkileri vardır. 
nosql için bir server hizmeti olarak Mongodb örnek olarak gösterilebilir. server olarak mongoDb arayüz olarak ise mongo atlas kullanacağız.
sqlite bilgileri daha sistematik olarak tutar ve sql dilini kullanabiliriz.
nosql'de tablolar, sutunlar, satırlar yok. bunlar yerine json datayı  herhangi bir bağlılığa bağlı kalmadan saklarız.   mongoDb server tabanlı bir databasedir.

sql'deki tablo nosqlde collections'lara denk gelecek  ... her bir kayıt her satır yani row   nosqlde  documents'e denk gelecek.    her columns  nosqlde  fields'e denk gelecek.
json yapısı dict'lere benzer bir json string mantığı var.
nosql'de kullanacağınız veri kadar tanımlama yaparsınız mesela sqlde boş bir sutun olacaksa null deriz ama nosqlde böyle değil bir şey yapmaya gerek yok    {name:'telefon'}   gönderip sonra {name:'telefon',marka:'ford'} diyebiliriz bir yere null vs demeye gerek yok ihtiyaç dahilinde işlem yaparız.

mongoDB nosql sorgulama dili ile çalışır.  veriler json formatında tutulur.   nosql'de okuma yazma ilişkisel veritabanlarına göre daha hızlıdır bu yüzden big data alanında çok fazla kullanılır.

................................
                               .
mysql   ----  mongoDb          .
                               .
database      database         . 
tables        collections      .
rows          documents(json)  .  # collection içindeki her kayıta document diyeceğiz.
columns       fields           . 
                               .
................................


mongoDb'nin lib klasörünü path'e ekliyoruz. burası önemki tıpkı diller gibi.


/////nosql relationships(ilişkileri)///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

collections içeriside documents olacak.
nosql bigdata için mantıklıdır külfeti çok azdır sql'e göre.  mongoDb sorguları daha hızlı çalışır.  nosql daha performanslıdır.



{
    "name":"ahmet",
    "age": 25,
    "adress":{
       "city":"Kocaeli",
       "country":"TR"

    },
    "roles":[
      
      "admin","customer"

    ]


}  # bir dict içerisinde key ve value ilişkisi vardır bir value dict olabilirr liste olabilir.   

nosql yapıları hızlıdır bigdata için mantıklıdır.

........................................................................................................

Orders:  # product ve usersten oluştu mesela.  user ve product fieldi oluşturduk.
    {id:1,user:{id:1, email:"ahmet@gmail.com"},product:{id:2,price:3000}}
    {id:2,user:{id:2, email:"ali@gmail.com"},product:{id:1,price:2000}}
    {id:3,user:{id:2, email:"ali@gmail.com"},products:[{id:1,price:2000},{id:2,price:3000}]}   # mesela birden fazla ürün aldı ve biz başka bir field oluşturup liste içerisinde ürünleri verdik.
users:
   {id:1, email:"ahmet@gmail.com"} 
   {id:2, email:"ali@gmail.com"}
products:
   {id:1,price:2000}
   {id:2,price:3000}

........................................................................................................

hem tüm bilgilerin içerisindeki sistemi kurabiliriz hemde documentsler arasında references sistemi kurabiliriz.

embedded documents:
{
    "name":"ahmet",
    "age": 25,
    "adress":{
       "city":"Kocaeli",
       "country":"TR"

    },

}        

references :      birbiri ile ilişkilendirme yapabiliriz nosqldede.

{
name:'ahmet',
Orders: [{....},{...}]
}

veya,

{
name:'ahmet',
Orders: ['id1','id2']
}

veya,

{
_id:'id1',
productid:1
}

........................................................................................................

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////MongoDB kurulumu.../////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

öncelikle bir server kurmak lazım mysql gibi ve bu serverı kullanmak için bir arayüz gerekli mysql workbench gibi.
önce yerel pcye bir server kuracağız sonra mongoDb atlas ile servera erişeceğiz.   atlas ile aslında yerele server kurmaadan uzaktaki bir servera bağlanarak uygulama geliştirebiliriz.

mongodb compass bir arayüzdür.

C:/  dizini içerisine   data klasörü data klasörünün içerisine ise db klasörü kurmamız lazım mongoDb için    C:/data/db   şeklinde...   
program files içerisinden mongoDb bulunacak ve bin klasörü path'e verilecek burası önemli.

mongoDB atlas ile bir serverdaki nosql databaseye bağlanabiliriz. 
import pymongo ile çalışır. 

uzak sunucudaki bir mongodb databasesine bağlanmak için uzaktaki bir mongoDB serverina bağlanabilmek için pip install pymongo[srv] dememiz lazım... uzaktaki sunucu ile bağlantı kurabilmek için gerekli bir paket...


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//MongoDB database bağlantısı...///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

ister yerel localhost'a bağlanabiliriz veya mongodb atlas ile bir sunucudaki servera bağlanabiliriz.   cloud.mongodb.com'dan işlemleri yapabiliriz. bir string verir bize bu yolla bağlantı sağlayabiliriz. internet üzerindeki database'e bağlanabiliriz.
yerelden servera ulaşıp üzerinde işlemler yapabiliriz.

pip install pymongo ile bağlantı sağlama paketini yükleriz.  databaseler herhangi bir dil için üretilmemiştir ara yazılım gerekir. 

...............................................................................

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017") # yerel sunucumuza bağlanmak istiyoruz.   copy connection string ile işlem yaparız aslında direkt olarak.
# eğer uzak sunucuya vs bağlanmak istersek connection stringini alır ve pymongo.Mongoclient("") içerisinee yazarız.  böylece bağlantı kurabiliriz.
# uzak sunucudaki bir mongodb databasesine bağlanmak için uzaktaki bir mongoDB serverina bağlanabilmek için pip install pymongo[srv] dememiz lazım... uzaktaki sunucu ile bağlantı kurabilmek için gerekli bir paket...

mydb = myclient["node_app"] # eğer varsa kullanır yoksa oluşturur ancak databseyi oluşturması için içerisnde bir collection olmalı. bu yüzden compass üzerinden oluşturur ve bağlanabiliriz.
print(myclient.list_database_names()) # elde olan databaselerin isimlerini görebiliriz
    # ['admin', 'config', 'local']  şu an node_app yok çünkü collection olmadan bir database oluşmaz mongodb'de.
    
...............................................................................


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////creating collections and instert documents/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

collections oluşturma ve document ekleme...

...............................................................................

    import pymongo

    myclient = pymongo.MongoClient("mongodb://localhost:27017") # yerel sunucumuza bağlanmak istiyoruz.   copy connection string ile işlem yaparız aslında direkt olarak.

    mydb = myclient["node_app"] # client ile databaseye
    mycollection = mydb["collection1"] # database ile collectiona bağlanırız.

    product = {'name':'samsung','price':2000}
    result = mycollection.insert_one(product)  # tek bir kayıt için instert_one  birden fazla kayıt için insert_many() kullanılır
    print(result) # <pymongo.results.InsertOneResult object at 0x0000018812EAB3A0>
    print(type(result)) # <class 'pymongo.results.InsertOneResult'>   bir class return etmiş ekleme metotu.  

    # nosql'de id kolonu eklememiz gerekmez. otomatik olarak bir id oluşturur her kaydı birbirinden ayırır.

    productlist = [  # bir name price bilgisi belirtmedik. sqldeki gibi tablo oluştur ekle olayı yok.   name kısmını istersek isim olarakta değiştirebiliriz sorun olmaz. bir şemaya gerek yok bir collection oluşturup verileri yükleyebiliriz.
        
    {'name':'samsung','price':2000},    
    {'name':'samsung','price':3000},
    {'name':'samsung','price':4000},
    {'name':'samsung','price':5000},    
    {'name':'samsung','price':6000},
    {'name':'samsung','price':7000},      
    {"_id":1,'name':'ford','price':4000}, # '_id' ile normalde mongo'nun vereceği id'yi ezer ve kendi belirttiğimiz id'yi kullanırız ama aynı id veremeyiz başka bir document'e yoksa hata alırız.   
    {'name':'samsung','price':3000,"description":'iyi'} # sqldeki gibi kolon mantığı olmadığı için istediğimiz bir field'i ekleyebiliriz.   bir sorun olmaz.   
    ]

    result1 = mycollection.insert_many(productlist) # çoklu ekleme için insert_many() kullanırız.   aslında ekleme işlemi mycollection.insert_many()  ile olur ama return edeceği değer ile sorgulama yapabiliriz yoksa tek başına satıra mycollection.insert_many()  yazsakta olurdu.
    print(result1.inserted_ids) # yüklenen değerlerin id'lerine ulaşırız.


...............................................................................



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////find: mongodb ile kayıt seçme/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

tekli kayıt mı seceçeğiz yoksa çoklu mu bunu belirlemek önemli  .find_one() ile tek  .find()  birden fazla arama için kullanılır.

...............................................................................

    import pymongo

    myclient = pymongo.MongoClient("mongodb://localhost:27017") # yerel sunucumuza bağlanmak istiyoruz.   copy connection string ile işlem yaparız aslında direkt olarak.

    mydb = myclient["node_app"] # client ile databaseye
    mycollection = mydb["collection1"] # database ile collectiona bağlanırız.
    result1 = mycollection.find_one() # ilk veriyi bize getirir.
    print(result1) # ilk kaydı bize getirdi.
    result2 = mycollection.find() # bir filtre sorgusu yollamazsak tüüm verileri getirir. select * from gibi.
    print(result2) # tüm verileri getirdi. filtreleme yapmazsak. 


    for i in result2: # tüm kayıtları getirir böylece.
        print(i)

    for i in mycollection.find({},{"_id":0,'name':1,"price":1}): # 0 olan fieldsler getirilmez 1 olanlar getirilir. True False mantığı aslında.  "_id" field'si gelmeyecek böylece.   ilk {} tüm kayıtları ara demek ikinci {} içindekiler ile ise kolon seçimi yaparız. 
        print(i)


...............................................................................


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////Query: MongoDb ile kayıt filtreleme./////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import pymongo
from bson.objectid import ObjectId

myclient = pymongo.MongoClient("mongodb://localhost:27017") # yerel sunucumuza bağlanmak istiyoruz.   copy connection string ile işlem yaparız aslında direkt olarak.

mydb = myclient["node_app"] # client ile databaseye
mycollection = mydb["collection1"] # database ile collectiona bağlanırız.

filter = {"name":"samsung"} # filteri dışardan yazıp yollayabiliriz.

result = mycollection.find(filter,{"_id":0}) # parametre olarak query bilgisi alır sonra field seçimi olur.    filter verdik "name" : "samsung olanlar gelecek."  ve id kolonu gelmeyecek 0 verdiğimiz için ona.    .find_one()   ile yapsaydık tek bir kayıt getirirdi ilk kaydı getirirdi.
result1 = mycollection.find_one({"_id":ObjectId("64bfe6f9386508e861af2ff2")})  # eğer bir document'i idsi ile almak istersek o zamna from bson.objectid import ObjectId   yapısını çağırmamız lazım yoksa  sorguda id'ye göre alım yapamayız.  _id'yi bir string içerisinde yollamamız lazım.

result3 = mycollection.find({
    "name":{
        "$in" : ["samsung","ford"]  # ismi samsung ve ford olanlar gelecek   $in ile ismi liste içerisinde olanlar gelir. birden fazla olduğu için listeye koyduk verileri
        
    }
}
) 

result4 = mycollection.find({
    "price":{
        "$qt" : 2000 # qt olunca 2000'den büyük olanlaar gelecek  $eq olursa eşit olanlar gelecek.   $qte olursa büyük eşit olacak.   $lt olursa 2000'den küçük olanlar gelir     $lte  olursa eğer küçük eşit olur. 
        
    }
}
) 


#  '$or' :   [{"price":{"$lt": 2000}},{"name":"ford"}]  demek   veya demek  böyle bir kullanımı var.


result5 = mycollection.find({
    "name":{
       
       "$regex" : "^s"  # s ile başlayanlar gelir böylece.       
    }
}
) 

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Mongodb ile sıralama sort///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import pymongo
from bson.objectid import ObjectId

myclient = pymongo.MongoClient("mongodb://localhost:27017") # yerel sunucumuza bağlanmak istiyoruz.   copy connection string ile işlem yaparız aslında direkt olarak.

mydb = myclient["node_app"]
mycollection = mydb["collection1"] 

result = mycollection.find({},{}).sort('name') #hangi kolona göre sıralama yaparız. alfabetik sıralama yapar. artan olarak   .sort('name',-1) yaparsak o zaman azalan şekilde sıralar
print(result) # <pymongo.cursor.Cursor object at 0x00000287C4055F50>     verileri görebilmek için iterasyon lazım.
for i in result: # verileri görebiliriz.
    print(i)
    
result1 = mycollection.find({},{}).sort([('name',1) , ('price',-1) ])  # önce isme göre sonra ise fiyata göre sıralama yaparız.    

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////update: Mongodb ile güncelleme.////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


import pymongo
from bson.objectid import ObjectId

myclient = pymongo.MongoClient("mongodb://localhost:27017") # yerel sunucumuza bağlanmak istiyoruz.   copy connection string ile işlem yaparız aslında direkt olarak.

mydb = myclient["node_app"]
mycollection = mydb["collection1"] 

# update_one() sadece bir güncelleme yapar eline geçen ilk veriyi günceller.   ve update_many() metotları vardır  one ile tek bir kayıtı   many ile birden fazla güncelleme yapabiliriz.

mycollection.update_one({"name":"samsung"},{ '$set':{'name':'iphone','price':5500} }) # iki parametre alır. ilki query bilgisi dışarda da oluşturabiliriz.  ikincisi ise ne olacak bunu belirleriz.   '$set' ile neler güncellenecek belirleriz.
query = {"name":"samsung"}
newvalues = {"$set":{"name":"mercedes","price":34343}}
# dışarıdan verebiliriz güncelleme ve sorguyu.
result = mycollection.update_many(query,newvalues) #buda ilk olarak query sonra ise ne olacak güncellenen veri bunu belirleriz.
print(result.modified_count) # kaç adet güncelleme oldu bunu görebiliriz.


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///delete: mongodb ile kayıt silme//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import pymongo
from bson.objectid import ObjectId

myclient = pymongo.MongoClient("mongodb://localhost:27017") # yerel sunucumuza bağlanmak istiyoruz.   copy connection string ile işlem yaparız aslında direkt olarak.

mydb = myclient["node_app"]
mycollection = mydb["collection1"] 

# delete_one() tek bir kayıt siler ilk gelen kayıtı. silmede direkt olarak satır silme gibi document silinir.  delete_many() ile ise çoklu veri silinir.
# içerisine bir koşul vericez ve silme işlemi yapacak.

mycollection.delete_one({"name":"ford"}) # ismi ford olan silinecek. ilk gelen document silinecek tek bir silme yapacak.
result = mycollection.delete_many({"name":"ford","price":5000}) # tüm ismi ford olan ve price 5000 olanlar silinecek
# direkt olarak mycollection.deletemany(...) yapabiliriz ama bir obje dönecek ve o obje ile kaç tanesi silindi vs görebileceğiz. 
print(result.deleted_count) # kaç kayıt silindi gösterir.



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

####################################################################################################################################################################################################################################################################################################################################










MongoDB is a document database. It stores data in a type of JSON format called BSON.
A record in MongoDB is a document, which is a data structure composed of key value pairs similar to the structure of JSON objects.
SQL databases are considered relational databases. They store related data in separate tables. When data is needed, it is queried from multiple tables to join the data back together.
MongoDB is a document database which is often referred to as a non-relational database. This does not mean that relational data cannot be stored in document databases. It means that relational data is stored differently. A better way to refer to it is as a non-tabular database.
MongoDB stores data in flexible documents. Instead of having multiple tables you can simply keep all of your related data together. This makes reading your data very fast.
You can still have multiple groups of data too. In MongoDB, instead of tables these are called collections.
.......................................................................................................................................................................................................................................................................................
Local vs Cloud Database...
    MongoDB can be installed locally, which will allow you to host your own MongoDB server on your hardware. This requires you to manage your server, upgrades, and any other maintenance.

    You can download and use the MongoDB open source Community Server on your hardware for free.

    However, for this course we are going to use MongoDB Atlas, a cloud database platform. This is much easier than hosting your own local database.

    To be able to experiment with the code examples, you will need access to a MongoDB database.

    Sign up for a free MongoDB Atlas account to get started.
.......................................................................................................................................................................................................................................................................................
Creating a Cluster...
    After you have created your account, set up a free "Shared Cluster" then choose your preferred cloud provider and region.

    By default, MongoDB Atlas is completely locked down and has no external access.

    You will need to set up a user and add your IP address to the list of allowed IP addresses.

    Under "Database Access", create a new user and keep track of the username and password.

    Next, under "Network Access", add your current IP address to allow access from your computer.
.......................................................................................................................................................................................................................................................................................

mesela elimizde bir database var ve bir collection oluşturucaz.   mydb = myclient["node_app"]    mydb.createcollection("collection2") şeklinde bir collection kurulabilir.
    object = {"name":"emre","surname":"aytas"}
    db.createCollection("posts")
    db.posts.insertOne(object)
# bu şekilde de olur. eğer zaten posts collection'u yoksa oluşturacak.
.......................................................................................................................................................................................................................................................................................

db.posts.insertMany([  
  {
    title: "Post Title 2",
    body: "Body of post.",
    category: "Event",
    likes: 2,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Post Title 3",
    body: "Body of post.",
    category: "Technology",
    likes: 3,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Post Title 4",
    body: "Body of post.",
    category: "Event",
    likes: 4,
    tags: ["news", "events"],
    date: Date()
  }
]) 
# çoklu göndermeyi biz bir liste içerisinde yollarız.
.......................................................................................................................................................................................................................................................................................

db.posts.insertOne({
  title: "Post Title 1",
  body: "Body of post.",
  category: "News",
  likes: 1,
  tags: ["news", "events"],
  date: Date()
})
# tekli olarakta yollayabiliriz. direkt dict olarak yollama yapabiliriz.
.......................................................................................................................................................................................................................................................................................
To query, or filter, data we can include a query in our find() or findOne() methods.
.......................................................................................................................................................................................................................................................................................
This example will only display the title and date fields in the results.

db.posts.find({}, {title: 1, date: 1})
.......................................................................................................................................................................................................................................................................................
db.posts.find( {category: "News"} ) # tüm fieldler gelir ve sadece category'si News olanlar gelir.
.......................................................................................................................................................................................................................................................................................
  
  If you would like to insert the document if it is not found, you can use the upsert option.
  Update the document, but if not found insert it:

db.posts.updateOne( 
  { title: "Post Title 5" }, 
  {
    $set: 
      {
        title: "Post Title 5",
        body: "Body of post.",
        category: "Event",
        likes: 5,
        tags: ["news", "events"],
        date: Date()
      }
  }, 
  { upsert: true }  # eğer yoksa ekle komutu verebiliriz
)
.......................................................................................................................................................................................................................................................................................
db.posts.deleteOne({ title: "Post Title 5" })  # ilk gelen veriyi siler.
db.posts.deleteMany({ category: "Technology" }) # kategorisi Technology olan her document'i siler.
.......................................................................................................................................................................................................................................................................................
MongoDB Query Operators
There are many query operators that can be used to compare and reference document fields.

Comparison
The following operators can be used in queries to compare values:

$eq: Values are equal
$ne: Values are not equal
$gt: Value is greater than another value
$gte: Value is greater than or equal to another value
$lt: Value is less than another value
$lte: Value is less than or equal to another value
$in: Value is matched within an array
Logical
The following operators can logically compare multiple queries.

$and: Returns documents where both queries match
$or: Returns documents where either query matches
$nor: Returns documents where both queries fail to match
$not: Returns documents where the query does not match
Evaluation
The following operators assist in evaluating documents.

$regex: Allows the use of regular expressions when evaluating field values
$text: Performs a text search
$where: Uses a JavaScript expression to match documents
.......................................................................................................................................................................................................................................................................................
MongoDB Update Operators
There are many update operators that can be used during document updates.

Fields
The following operators can be used to update fields:

$currentDate: Sets the field value to the current date
$inc: Increments the field value
$rename: Renames the field
$set: Sets the value of a field
$unset: Removes the field from the document
Array
The following operators assist with updating arrays.

$addToSet: Adds distinct elements to an array
$pop: Removes the first or last element of an array
$pull: Removes all elements from an array that match the query
$push: Adds an element to an array
.......................................................................................................................................................................................................................................................................................
Important: In MongoDB, a database is not created until it gets content!
MongoDB waits until you have created a collection (table), with at least one document (record) before it actually creates the database (and collection).
print(myclient.list_database_names()) # veritabanlarının isimlerini kontrol edebiliriz.
Remember: In MongoDB, a database is not created until it gets content, so if this is your first time creating a database, you should complete the next two chapters (create collection and create document) before you check if the database exists!
.......................................................................................................................................................................................................................................................................................
You get an error if you specify both 0 and 1 values in the same object (except if one of the fields is the _id field):

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

for x in mycol.find({},{ "name": 1, "address": 0 }):
  print(x)
.......................................................................................................................................................................................................................................................................................
The drop() method returns true if the collection was dropped successfully, and false if the collection does not exist.
.......................................................................................................................................................................................................................................................................................
import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

myquery = { "address": "Valley 345" }
newvalues = { "$set": { "address": "Canyon 123" } }

mycol.update_one(myquery, newvalues)
.......................................................................................................................................................................................................................................................................................
import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

myquery = { "address": { "$regex": "^S" } }
newvalues = { "$set": { "name": "Minnie" } }

x = mycol.update_many(myquery, newvalues)

print(x.modified_count, "documents updated.")
.......................................................................................................................................................................................................................................................................................
import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

myquery = { "address": "Park Lane 38" }

mydoc = mycol.find(myquery)

for x in mydoc:
  print(x)
.......................................................................................................................................................................................................................................................................................













...............................
# Example Document
{
	title: "Post Title 1",
	body: "Body of post.",
	category: "News",
	likes: 1,
	tags: ["news", "events"],
	date: Date()
}
...............................


mongodb atlas.....
    mongoDB'yi bulutta çalıştırmak istersek kullanırız.  500 mb alan verir beleş. istersek mongodb'yi localde de çalıştırabiliriz.
    bir cluster oluşturduk.  

mongodb+srv://emreaytas:<password>@cluster0.mq5dsce.mongodb.net/?retryWrites=true&w=majority
   mesela böyle bir string gelcek <password> kısmına biz kendi passwordumuz yazacağız bağlantı olabilmesi için.

   cluster içinde collections kısmında bir db ve collection oluştururuz. 

.................................................................

url = "mongodb+srv://emreaytas:"+"34ffm72"+"@cluster0.mq5dsce.mongodb.net/?retryWrites=true&w=majority"

from pymongo.mongo_client import MongoClient
myclient = MongoClient(url)
try:
    myclient.admin.command('ping')
    print("Pinged your deployment. You successfully connected to MongoDB!")
except Exception as e:
    print(e)


mydb = myclient["node_app"] # önceden var olan bir db olmalı.
mycollection = mydb["collection1"] # önceden var edilmiş bir collection olmalı.


..............................................................

ilişkisel veritabanlarında tablo ve sutunlar halinde tutulurken nosqlde veriler json formatında tutulur.   nosqlde okuma yazma sql'e göre daha hızlıdır bu yüzden bigdata gibi alanlarda çok fazla kullanılır.

...MongoDB nedir...............................
    open source(açık kaynak k.)               .
    nosql kullanır                            .
    dokumanlar json formatında tutulur        .
    sqlde tablo = nosql collection            .
    sqlde satır = nosql document              .
...............................................

mongo db'de kendimiz belirtmezsek eğer her girilen veri için unique bir id girilir. böylece içerik aynı olsa bile her veri birbirinden farklıdır. kendimiz bir id belirlersek eğer o zaman collection içinde hiçbir id aynı olmamalıdır. yoksa hata verir.
 ekleme işlemini collection üzerinden yaparız. 

............................................................................................................................................................................
    data3 = {"_id":123231,"name":"lada","surname":"niva"} # eğer "_id": ... ile id belirlersek bu unique olmalı ama kendimiz belirledik otomatik olarak atanmadı. her id unique olur collection içerisinde.
    mycollection.insert_one(data3) # tek bir data eklemek için kullanılır.
............................................................................................................................................................................     

    veriler = mycollection.find()  # verileri görebilmek için iterasyon yaptık.
    veri = mycollection.find_one() # ilk satırdaki veriyi alır. direkt olarak print ile yazdırabiliriz.
    print(veri)
    for i in veriler:
        print(i)
        
............................................................................................................................................................................

    mydb = myclient["node_app"] # önceden var olan bir db olmalı.
    mycollection = mydb["collection1"] # önceden var edilmiş bir collection olmalı.
    datas = [{"name":"ford","surname":"focus"},{"name":"bmw","surname":"m"},{"name":"toyota","surname":"corolla"},{"name":"honda","surname":"civic"}]
    data1 = {"name":"mercedes","surname":"amg"}
    mycollection.insert_one(data1) # tek bir data ekleriz insert işlemleri bir değer döner. bununla ekleme verilerine ulaşabiliriz.
    mycollection.insert_many(datas) # birden fazla veri eklemek istersek o zamana kullanılacak bir yapıdır hepsini ekler.

............................................................................................................................................................................

.find({},{}) ile {} query'dir.. ikinci ise hangi sutunları görmek istediğimzdir  {"name":"emre"},{"_id":0} id olmadan ismi emre olanları getir demek. id dışında bir sutuna sıfır vermeye gerek yok mesela {"_id":0,"age":1} dedik o zaman sadece yaş geleck.

ikinci {}
 eğer {"_id":0,"name":1}  # dersek sadece name gelir .... {"_id":0,"name":1,"age":0} yaparsak hata alırız.  id dışında bir sutuna bir verince sadece bir verilen sutunlar gelir.  eğer id'ye sıfır verirsek o zaman başka sutuna sıfır veremeyiz. yoksa hata alırız.  "_id":0 olunca sadece görmek istediklerimize 1 vermemiz lazım... sadece "_id":0 dersek o zaman id hariç hepsi gelir.

............................................................................................................................................................................

sorguyu dışarda yazıp içeri verebiliriz  query = {"name":"emre"}  .find(query,{"_id":0}) yapabiliriz..

query = {"name":{"emre","ford"}}

............................................................................................................................................................................
 
import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

mydoc = mycol.find().sort("name")   # isme göre sıralama yapar. alfabetik sıralama eğer sayısal değer olsa küçükten büyüğe sıralama yapardı..

for x in mydoc:
  print(x)

............................................................................................................................................................................

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

mydoc = mycol.find().sort("name", -1) # tersten sıralama yapabiliriz böylece. isme göre sıralar verir.

for x in mydoc:
  print(x)

............................................................................................................................................................................
import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

mycol.drop()  # .drop() ile bir kolonu düşürebiliriz.
............................................................................................................................................................................
.find({"$and":[{"name":["ahmet","mert"]},{"age":25}]},{"_id":0})   and kullanımı   or için ise $or yaparız. 
    birden fazla veri olursa o zaman "name":["ahmet","mert"] gibi bir şekilde yaparız.
............................................................................................................................................................................
Change the address from "Valley 345" to "Canyon 123":

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

myquery = { "address": "Valley 345" }
newvalues = { "$set": { "address": "Canyon 123" } }

mycol.update_one(myquery, newvalues)

#print "customers" after the update:
for x in mycol.find():
  print(x)
............................................................................................................................................................................

Update all documents where the address starts with the letter "S":

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

myquery = { "address": { "$regex": "^S" } }
newvalues = { "$set": { "name": "Minnie" } }

x = mycol.update_many(myquery, newvalues)

print(x.modified_count, "documents updated.")

............................................................................................................................................................................
import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

myquery = { "address": "Mountain 21" }

mycol.delete_one(myquery)
............................................................................................................................................................................

Delete all documents were the address starts with the letter S:

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

myquery = { "address": {"$regex": "^S"} }

x = mycol.delete_many(myquery)

print(x.deleted_count, " documents deleted.")

............................................................................................................................................................................

Delete all documents in the "customers" collection:

import pymongo

myclient = pymongo.MongoClient("mongodb://localhost:27017/")
mydb = myclient["mydatabase"]
mycol = mydb["customers"]

x = mycol.delete_many({})

print(x.deleted_count, " documents deleted.")

............................................................................................................................................................................

find(....).limit(40) dersek o zaman limit bize ilk 40 veriyi getirir. limit ile kaç adet veri gelecek bunu ayarlayabiliriz.

............................................................................................................................................................................




























