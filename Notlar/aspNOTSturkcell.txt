ASP İLE İLGİLİ BİLGİLER...
.............................................................................................
_ViewModelImports.cshtml içerisine istenen namespaceleri eklersek eğer o zaman her yerden erişilebilir olur o namespace içindekiler.

@using turkcell1.Web.ProductViewModel 
@using turkcell1.Web
@using turkcell1.Web.Models
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@*böylece bu namespace içindekiler her yerden erişilebilir olacak.*@

........................................................................................................................................................................................................................................................................................................................................................
ASP.NET Core Authentication ve Authorization, web uygulamalarında güvenliği sağlamak için kullanılan iki temel kavramdır. İşte bu kavramların ne anlama geldiği ve nasıl çalıştıkları hakkında daha fazla bilgi:

Authentication (Kimlik Doğrulama)
Kimlik doğrulama, bir kullanıcının kim olduğunu belirlemek için kullanılan süreçtir. Bu süreç, kullanıcıların uygulamaya giriş yapmaları ve kimliklerini doğrulamaları için kullanılır. ASP.NET Core, çeşitli kimlik doğrulama yöntemlerini destekler:

Cookie-based Authentication (Çerez Tabanlı Kimlik Doğrulama): Kullanıcı adı ve şifre ile oturum açmayı ve oturum bilgilerini çerezler aracılığıyla saklamayı içerir.
JWT Bearer Tokens (JWT Taşıyıcı Jetonlar): JSON Web Token (JWT) kullanarak kullanıcıları doğrulayan bir yöntemdir. Özellikle API'lerde yaygın olarak kullanılır.
OAuth/OIDC (OAuth ve OpenID Connect): Üçüncü taraf kimlik sağlayıcıları (Google, Facebook, Microsoft) kullanarak kimlik doğrulaması yapar.
API Keys (API Anahtarları): API'lara erişim sağlamak için kullanılan bir kimlik doğrulama yöntemidir.
External Providers (Dış Sağlayıcılar): Üçüncü taraf kimlik doğrulama sağlayıcıları kullanarak kimlik doğrulama yapar.
Authorization (Yetkilendirme)
Yetkilendirme, kimliği doğrulanan bir kullanıcının hangi kaynaklara ve işlemlere erişebileceğini belirleyen süreçtir. ASP.NET Core'da yetkilendirme, genellikle aşağıdaki yöntemlerle uygulanır:

Role-based Authorization (Rol Tabanlı Yetkilendirme): Kullanıcıların belirli rollere atanması ve bu rollere göre yetkilerin verilmesi.
Policy-based Authorization (Politika Tabanlı Yetkilendirme): Daha esnek ve detaylı yetkilendirme senaryoları için politikaların tanımlanması ve kullanılması.
Claims-based Authorization (Hak Tabanlı Yetkilendirme): Kullanıcıların belirli haklara (claims) sahip olmalarına ve bu haklara göre yetkilerin verilmesi.

SQL Server şifreniz çalıntı şifrelerden birini içeriyor mu?
10 milyon şifre içinde sizin SQL Server kullanıcı şifrenizin olup olmadığını gösteren sorgu.


#Hergüne1SQLBilgisi
Teşekkürler Eitan Blumin. 🙏 

Thank you Eitan Blumin.
I made a little changes to your article and I used it with 10 million passwords.

https://madeiradata.com/post/detect-weak-passwords-in-sql-server?utm_content=buffer290f4&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer

--Tablo Oluştur
CREATE TABLE PasswordList (
 Password_ VARCHAR(255)
);
--Tabloyu truncate et
truncate table passwordlist
/*Github adresinden indirdiğin 10 milyon çalıntı
şifre listesini tabloya insert et
https://lnkd.in/gRiPfvjf
Common-Credentials/10-million-password-list-top-1000000.txt*/
BULK INSERT PasswordList
FROM 'E:\DATA\10-million-password-list-top-1000000.TXT'
WITH (
 ROWTERMINATOR = '0x0a' 
);
--sys.sql_logins tablosunda hash li şekilde tutulan şifrelerin 
--olup olmadığını PWDCOMPARE ile kontrol et
select 
PWDCOMPARE(p.Password_,l.[password_hash]) Eslesme,
http://l.name Kullanici, p.Password_ CalintiSifre from PasswordList p
cross apply (select * from sys.sql_logins) l 
where 
PWDCOMPARE(p.Password_,l.[password_hash])=1
...............................................................
web uygulamaları tarayıcılar ile çalışır. tarayıcılar html üzerinden derleyerek bize bir sayfa çıkarır. static sayfalar sadece gösterim yaparlar resim video vs ama kullanıcı ile etkileşime girmezler. dinamik sayfalar ise kullanıcı ile aktif olarak etkileşime geçerler. bir üye geldi bilgilerini girdi ve veri kaynağına kaydettik mesela o zaman dinamik bir sayfadır.
sayfalarımız bir serverde veya servera çevrilmiş bir yapıda durur ve client(istemci) istek attığında sayfayı çalıştırdığında istemcinin tarayıcısı sayfayı derler ve bize bir sonuç getirir. bir sayfa döner html css ve js. tarayıcılarda buna göre sayfa getirir...
tarayıcılar html css ve javascript dışında bir dil bilmezler sadece bunlarla çalışırlar... diğer etkileşimleri ise sunuculardaki kodlar yapar.
  sayfalar css veya js içermek zorunda değil ama html zorunludur. html üzerine kurulur sistem. html iskelettir.
dinamik olması için bir sayfanın veri kaynağı olması ve bilgi alışverişi olması gerekir.
static sayfalar kullanıcıya göre değişmez verikaynağına bağlı değildir.
........................................................................................................................
application mesela asp ile yazılan ona veritabanı bağlı application ise html,css,js ile yazılmış sayfaya bağlıdır.
application isteğe göre veritabanı ile haberleşir ve html css ve js çıktısı üretir ve cevap olarak tarayıcıya gönderilir.
uygulama veritabanına bağlı. isteğe göre requeste göre veritabanı ile ilteşim kurarak veya direkt olarak html,css,js çıktısı(çıktı her zaman html,css,js olabilir başka bir dilden anlamaz tarayıcılar.) üretir. ve tarayıcıya yollar.
....................................................................................................................................................................................................................................................................................................................................................................................................................................
.net her türden uygulama yapabildiğimiz sistem.    .net5.0 ile core ifadesi kalktı. 
cross platform olmayanlar sadece windowsta çalışıyordu şimdi ise linux,windows,macos'ta çalışabilir hale geldi.
core hem cross platform hem esnek(bir güncellemeyi daha kolay yapıyoruz ve daha sürdürülebilir daha uzun ömürlü oluyor.) hem yüksek performanslı hem geniş uygulama desteği var.

sdk ve runtime nedir?.
.net sdk = bir .net uygulaması geliştirmek için gereken kütüphaneleri ve araçları veren software development kit'tir. yazılım geliştirme kiti. bu kitin olması gerekiyor geliştirmek için.
runtime = .net ile geliştirilmiş bir uygulamanın çalışmasına imkan veren bir ortamdır. uygulamanın çalışması için gerekli kütüphaneleri barındırır. uygulamayı canlıya alır.
sdk'nın içinde runtime vardır.

mesela bir web uygulaması geliştirmek için bir sdk gerekiyor. sdk ile geliştirdiğimiz bir uygulamayı canlıya almak için ise runtime yeterlidir.
sdk ile uygulama geliştirdiysem uygulama türüne uygun runtime gerekir canlıya almak gerekir.
runtime sdk'dan daha hafif bir kütüphaneler topluluğu. elde hazır uygulama var ve canlıya almak istersek o zaman runtime yeterli olacaktır.

mvc tasarım deseni nedir? bir çözüm kalıbıdır. bir tasarım desenidir design pattern'dir.
model - view - controller üçlüsü. 3 ana component vardır. ilgili kodun ilgili yerde bulunmasını sağlar bize.
model iş kurallarımızı tanımladığımız yerdir. tc kimlik aldık mesela doğru mu gibi iş kuralları tanımladığımız yerdir.
view kısmı ise kullanıcının gördüğü kısımdır. üretilen sonuç yani view tarayıcıya yollanır ve oda derleyerek bir görüntü oluşturur...
controller(istek ilk controllere gelir) ise isteğe göre iş yapar. veritabanı gerektiricek bir işlem mi vs bunu kontrol eder eğer gerekirse modelden bir cevap ister. controller cevapını view olarak gönderir tarayıcıya tekrar olarak.

Requestler controllere gelir sonuç ise controllerden tarayıcılara gönderilir.
mvc bir tasarım kalıbıdır. bir framework değildir.

controller -> view  
controller -> model 
view -> model


asp.net core web app(model view controller) olanı seçeriz. croos platform olanı alalım linux,macos'da dahil olanı seçtik. hazır bir proje şablonu oluşturacak.
solution bir kap gibidir bir solution içinde birden fazla proje olabilir.

asp.net core web app(model view controller) ile bir proje oluşturursak oluşan dosyaların ne olduğunu ne işe yaradığını göreceğiz.

conntected services klasörü var biz ora sayesinde 3. part servislere bağlanabiliriz.
dependies ksımında ise frameworkleri ekleyebildiğimiz bir kısım var.

properties içinde ise uyglamanın ayağa kalkması için nasıl bir yol izlenecek bunu ayarlayabiliriz.

wwwrot kısmı ise bir klasördür tüm static dosyalarımızı barındırırız. videolar resimler ,css js kütüphaneleride default olarak gelir. css için bootstrap js için jquery hazır olarak geliyor.

controllers kısmı ise controller kısmıdır. request'in ilk geldiği yerdir. tüm controllerleri controllers klasörü altında toplayacağız.

models kısmı hem bussiness kodunun olduğu yer hemde veritabanı işlemlerinin olduğu yerdir.

views kısmı ise kullanıcının göreceği arayüzü biz views kısmı içerisinde ayarlıyoruz. linkin ekranını bu klasörde yaparız.

appsettings.json ise uygulamadaki static yolları barındıracağımız yerdir. mesela veritabanına bağlanmak için yolu buraya koyabiliriz. veya facebooka bağlanmak için gereken key'i buraya koyabiliriz.

Program.cs dosyası ise uygulamanın ayağa kalktığı yerdir. main'dir aslında. mesela veritabanına bağlanmak istersek bir session kullanmak istersek buradan ayaralarız. uygulamanın genel ayarları burada yapılır.

................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
asp.net core web app(model view controller) ile oluşturdğumuz bir projeyi nasıl ayağa kaldıracağız.
cross platform olduğu için iss ile ya da kestrel ile ayağa kaldırabiliriz. klasik .net olsaydı sadece iss olurdu. ama cross platform olduğu için kestrel'de kullanabiliriz...

properties içindeki launchsetttings.json içinde ayarları vardır iss ve kestrel kısımlarının

        {
        "iisSettings": {
            "windowsAuthentication": false,
            "anonymousAuthentication": true,
            "iisExpress": {
            "applicationUrl": "http://localhost:39372",
            "sslPort": 44374
            }
        },
        "profiles": {
            "turkcell1.Web": {
            "commandName": "Project",
            "dotnetRunMessages": true,
            "launchBrowser": true,
            "applicationUrl": "https://localhost:7289;http://localhost:5258",
            "environmentVariables": {
                "ASPNETCORE_ENVIRONMENT": "Development"
            }
            },
            "IIS Express": {
            "commandName": "IISExpress",
            "launchBrowser": true,
            "environmentVariables": {
                "ASPNETCORE_ENVIRONMENT": "Development"
            }
            }
        }
        }

üstte iss express seçersek iss ile ayağa kaldırırız. hem http hemde https ile ayağa kalkar. https ile ayağa almalıyız ki client ile server arasındaki iletişim şifrelensin.

kestrel ile ayağa kaldırmak için ise uygulamanın ismini seçeriz.              "turkcell1.Web EMRE": {  ama buradan bir isim değişimi yapabiliriz.
kestrel ile ayağa kaldırınca bir console ekranı geliyor bunun sebebi aslında cross olduğu için konsol arayüzü geliyor. web uygulamamız özünde bir konsol uygulaması. open source olarak ayağa kaldırırsak bir konsol arayüzü geliyor bize.

program.cs'de bir main metotu yok ama ara dillerde ekleniyor ama biz main metotu ile uğraşmıyoruz. app.run direkt olarak uygulamayı çalıştırıyor.

linux ve macos için kestrel kullanabiliriz windows içinde kestrel kullanabiliriz. ama iss sadece microsoft.  

iss ve kestrel kısmı yeşil play butonunun orada seçim yaparak ayağa kaldırabiliriz.




Visual Studio'da oluşturduğunuz web sitesini Internet Information Services (IIS) ile ayağa kaldırırken varsayılan tarayıcı yerine kendi istediğiniz tarayıcıyı çalıştırmak için aşağıdaki adımları takip edebilirsiniz:

Visual Studio Ayarları:

Visual Studio'yu açın ve projenizi yükleyin.
Üst menüden "Tools" (Araçlar) menüsüne gidin ve "Options" (Seçenekler) öğesine tıklayın.
Sol taraftaki menüden "Projects and Solutions" (Projeler ve Çözümler) altında "Web Projects" (Web Projeleri) öğesini seçin.
"Use the 64 bit version of IIS Express for web sites and projects" seçeneğini işaretleyin (Eğer 64-bit kullanıyorsanız).
Özel Tarayıcı Ayarı:

Projenizde "Solution Explorer"(ctrl + alt + l) (Çözüm Gezgini) penceresini açın.
Projenizin adının yanındaki küçük oka tıklayarak alt öğelerini genişletin.
"Properties" (Özellikler) klasörüne sağ tıklayın ve "Open" (Aç) öğesini seçin.
"Web" sekmesine geçin.
"Start Action" (Başlangıç Eylemi) bölümünde "Start External Program" (Harici Program Başlat) seçeneğini seçin.
"Program" alanına, kullanmak istediğiniz tarayıcının çalıştırılabilir dosyasının yolunu girin. Örneğin, Google Chrome için bu yol genellikle C:\Program Files\Google\Chrome\Application\chrome.exe şeklindedir.
"Command line arguments" (Komut satırı argümanları) bölümüne ise projenizin URL'sini girin. Örneğin, http://localhost:8080 gibi.
Kayıt ve Çalıştırma:

Bu ayarları kaydedin ve projenizi başlatın.
Artık projeniz, belirlediğiniz tarayıcıda açılacaktır.
Bu adımları izleyerek varsayılan tarayıcı yerine kendi seçtiğiniz tarayıcıyı kullanabilirsiniz.



temel routing yapısı.
routing'ten kastımız kullanıcıların url girmeleri veya bir linke tıklamaları.

Program.cs içinde 
app.MapControllerRoute(
    name: "default", 
    pattern: "{controller=Home}/{action=Index}/{id?}"); //kısmı var. // buradaki ='ler default olarak nasıl davranılır bunu belirliyor.
    // pattern uygulamamızın default routing pattern'i.
    controller içerisindeki metotlara action deriz. bunların view kısmında bir karşılığı olur.
    
baseurl//controller//index ile sayfa görüntülenmesi sağlarız.
baseurl//home//privacy
//https://www.mysite.com bu bizim baseurl. localdeki baseurl ise //https://localhost:7098/ gibi bir yapıdır.

? ile valuetype'ı nullable yapabiliriz c#'ta.

................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
razor view engine.
yazılım motorudur. view dosyasındaki html css js kodlarını html dosyalarına çevirir.  
view içindeki index.cshtml dosyalarında hem c# hemde html dilleri aynı anda bulunabilir.
                   uzantılar cshtml tarayıcılar c# kodlarını anlayamaz ama razor view engine onları html kodlarına çevirir.

razor syntax'ı şudur @{ c# } kodları olarak oluştururuz. ve razor view engine deriz ki bir c# kodu var sen bunu html koduna çevir.

@{
    ViewData["Title"] = "Home Page";
} // gibi razor view engine bunları c# koduna çevirir.


controller sınıfı oluşturmak. controller katmanı request'i ilk karşılayan yer. eğer istek model katmanı ile işlem yapacaksa model katmanında veriyi alır ve sayfayı görüntülemek için gelen request'i view'e göndererek bir arayüz alır onu tarayıcıya yollar.

using Microsoft.AspNetCore.Mvc;
using System.Diagnostics;
using turkcell1.Web.Models;

        namespace turkcell1.Web.Controllers
        {
            public class HomeController : Controller // default olarak gelen HomeController sınıfı.
            {                             // Controller sınıfı framework'ten gelir ve controller claslları bu sınıftan türerler çok yararlı metotları vardır.

                private readonly ILogger<HomeController> _logger;

                public HomeController(ILogger<HomeController> logger)
                {
                    _logger = logger;
                }

                public IActionResult Index() // bir metotun view tarafında bir karşılığı varsa action metot olarak adlandırırız. 
                {
                    return View();
                }

                public IActionResult Privacy()
                {
                    return View();
                }


                [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
                public IActionResult Error() // Error sayfası.
                {
                    return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
                }
            }
        }

Controller sınıflarının içeriisnde hep Action metot kullanmaya devam etmek lazım. diğerleride olabilir ama temiz tutma açısından daha iyidir. lazımda farklı sınıflarla çağırmak daha mantıklıdır.

action class'ı üzerine gelir sağ tık add view diyerek bir sayfa oluşturabiliriz.
OrnekController diye bir sınıf oluşturduk ve view klasöründe Ornek diye bir klasör oluştu altında da sayfası oluştu.
            https://localhost:44374/Ornek/Index  sonra baseurl/klasör/sayfası şeklinde bir yapı istenen sayfaya giriş yapabildik.



Action results. action metotların döndüreceği veri tipleri. viewResult dönebilir , ContentResult, JsonResult,EmptyResult,ActionResult olabilir ve dahası var.

        using Microsoft.AspNetCore.Mvc;

        namespace turkcell1.Web.Controllers
        {
            public class OrnekController : Controller
            {

                public IActionResult Index()
                {


                    return View();


                }

                public IActionResult ContentResult()
                { // bu metotu ekledik . https://localhost:44374/Ornek/ContentResult dersek eğer içerisindeki Stringi sayfaya basacak bunu dönecek bize.

                    return Content("ContentResultDönüyor");


                }

                public IActionResult JsonResult()
                { 
                    // https://localhost:44374/Ornek/JsonResult dersek dönüşü görürüz...
                       return Json(new { Id = 1, name = "kalem",price = 100 });

                }

        public IActionResult EmptyResult()
        {
            return new EmptyResult();

        } // bununlada boş bir şey dönebiliriz. içeriksiz bir dönüş sağlar bize.

            }

        } 

................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
RedirectoAction Method. Action Method'lardan farklı bir action methoda nasıl yönlendirme yapılacağı anlatılmaktadır.

bir action metottan başka bir action metota geçiş yapmamızı sağlayacak.
        using Microsoft.AspNetCore.Mvc;

        namespace turkcell1.Web.Controllers
        {
            public class OrnekController : Controller
            {


                public IActionResult Index2()
                {
                    return RedirectToAction("Index","Ornek"); // burada hangi sayfaya dönmek istiyorum bunu belirletebiliriz.
                    // Ornek conttolerindeki index sayfasına yönlendir dedik
                    //return View();
                }

/index2 dersek index sayfasına gönderir bunun sebebi Program.cs kısmında default olarak bir action belirtmezsek default olarak index sayfasını gösterirmiş.



Action Method Parametre Tanımlama.

default olarak id kullanabiliriz daha fazlasını eklemek için yeni bir route kullanmak lazım.
id? olarak kullanırız Program.cs'te ama id olrak kullanırsak id göndermemiz zorunlu hale gelir. bunu istemeyiz.


        using Microsoft.AspNetCore.Mvc;

        namespace turkcell1.Web.Controllers
        {
            public class OrnekController : Controller
            {

                public IActionResult ParametreView(int id) // id Program.cs'teki id ile aynı isimde olmalı.
                {

                    return RedirectToAction("JsonResultParametre","Ornek",new {id = id});
                    
                }

                public IActionResult JsonResultParametre(int id)
                {
                    return Json(new { Id  = id });

                }

Action Method Parametre Tanımlama. böyle action metotlar parametre alır oldu. 

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");  
Program.cs'te id kısmı var.  biz mesela baseurl/Ornek/ParametreView/1 dersek bu ParametreView action metotu 1 alır parametre olarak. ve ona göre işlem yapar.

https://localhost:44374/Ornek/JsonResultParametre/2   bize {"id":2} getirdi.
kodlar: 

                    using Microsoft.AspNetCore.Mvc;

                    namespace turkcell1.Web.Controllers
                    {
                        public class OrnekController : Controller
                        {

                            public IActionResult ParametreView(int id) // id Program.cs'teki id ile aynı isimde olmalı.
                            {

                                return RedirectToAction("JsonResultParametre","Ornek",new {id = id});
                                
                            }

                            public IActionResult JsonResultParametre(int id)
                            {
                                return Json(new { Id  = id });

                            }

                            public IActionResult JsonResult()
                            {
                                return Json(new { Id = 1, name = "kalem", price = 100 });

                            }

                            public IActionResult Index2()
                            {
                                return RedirectToAction("Index","Ornek"); // burada hangi sayfaya dönmek istiyorum bunu belirletebiliriz.
                                // Ornek conttolerindeki index sayfasına yönlendir dedik
                                //return View();
                            }

                            public IActionResult Index()
                            {


                                return View();


                            }

                            public IActionResult ContentResult()
                            {

                                return Content("ContentResultDönüyor");


                            }



                            public IActionResult EmptyResult()
                            {
                                return new EmptyResult();

                            }






                        }
                    }



Veri Taşıma Yöntemleri-Viewbag (controller - view)
controllerden viewlere veri taşıma yöntemleri. controllerden aldığımız dataları viewe göndererek kullanıcıya gösterebiliriz.

data taşıma yöntemleri ViewBag-ViewData-TempData-ViewModel olarak sıralayabiliriz.

ViewBag ile taşıma.

        public IActionResult Index()
        {
            ViewBag.name = "Asp.Net core"; // bir isim verdik mesela


            return View();


        }
        // sonra Ornek klasorundeki index.cshtml'e gidiyoruz. bu ismi yazdırmak için @ViewBag.name olarak kullanıyoruz ki razor syntax'ı c# kodunu htmle çevirsin.


@{
    var name = ViewBag.name;
    <p>@name</p>

} // birden fazla razor kodu için kullanırız.

basit datalar için ViewBag kullanırız hacimli datalar için ViewModel kullanırız genelde.

Veri Taşıma Yöntemleri-ViewData... mamtık ViewBag ile aynı tanımlama farklı.

        public IActionResult Index()
        {
            ViewBag.name = "Asp.Net Core";
            ViewData["age"] = 30;
            return View();


        }

// buda Ornek klasorundeki Index.cshtml kısmı.
        @{
            ViewData["Title"] = "Index";
        }

        <h1>Index</h1>

        <p>@ViewBag.name</p> 

        @{
            var name = ViewBag.name;
            <p>@name</p>

        }

        <p>@ViewData["age"]</p>


using Microsoft.AspNetCore.Mvc;

namespace turkcell1.Web.Controllers
{
    public class OrnekController : Controller
    {


        public IActionResult Index()
        {
            ViewData["age"] = 30;
            ViewData["names"] = new List<String>() { "ahmet", "mehmet", "hasan" };
            return View();


        }


@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>@ViewBag.name</p> 

@{
    var name = ViewBag.name;
    <p>@name</p>

}

<p>@ViewData["age"]</p>

@foreach(var item in ViewData["names"] as List<String>){  // as List<String> dedik tipini belirttik tipinden veriyi çıkarırsa String yapacak beceremezse Null yapacak.

    <p>@item</p>

} // foreach ile biz verileri yazdırabilir olduk.




using Microsoft.AspNetCore.Mvc;

namespace turkcell1.Web.Controllers
{
    public class OrnekController : Controller
    {


        public IActionResult Index()
        {
            ViewData["age"] = 30;
            ViewData["names"] = new List<String>() { "ahmet", "mehmet", "hasan" };
            ViewBag.person = new {Id = 1,Name = "ahmet",Age = 23 }; // new ile default Objectten parametre adı,tipi ve verisi belli olan bir nesne ürettik.
            return View();


        }

// Ornek klasorundeki İndex sayfayı.
@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>@ViewBag.name</p> 

@{
    var name = ViewBag.name;
    <p>@name</p>

}

<p>@ViewData["age"]</p>

@foreach(var item in ViewData["names"] as List<String>){

    <p>@item</p>

}

<p>@ViewBag.person.Id - @ViewBag.person.Name</p>

................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
TempData. Controller'dan view'lere temdata ile nasıl data taşınacağını anlatılmaktadır.
bir sayfadan diğer bir sayfaya veri taşımak için ViewBag ve ViewData bir sayfanın action metotuna veri verir.
TempData ise Bir Action Metottan bir Action metota data taşıyabiliriz.


using Microsoft.AspNetCore.Mvc;

namespace turkcell1.Web.Controllers
{
    public class OrnekController : Controller
    {


        public IActionResult Index()
        {

            TempData["Surname"] = "yıldız";


            return View();


        }

// tanımlamayı Index sayfasında yaptık ama veriyi Index2 sayfasında yazdırabildik TempData sayesinde.
https://localhost:44374/Ornek/Index2 ile normalde Index actionundaki olan veriyi başka bir sayfaya taşıyabildik.
@{
    ViewData["Title"] = "Index2";
}

<h1>Index2</h1>

<p>@TempData["surname"]</p>


Veri Taşıma Yöntemleri-ViewModel. Controller'dan view'lere view model ile nasıl data taşınacağını anlatılmaktadır.
ViewModel'i daha çok hacmi büyük verileri için kullanırız.


using Microsoft.AspNetCore.Mvc;

namespace turkcell1.Web.Controllers
{
    public class OrnekController : Controller
    {

        public class Product
        {
            public int Id { get; set; }
            public  String Name { get; set; }

        }

        public IActionResult Index()
        {
            var productList = new List<Product>() {

                new Product(){Id = 1,Name = "Kalem"},

                new Product(){Id = 2,Name = "Kitap"},

                new Product(){Id = 3,Name = "Defter"},


            };

            TempData["Surname"] = "yıldız";


            return View(productList);


        }

@using turkcell1.Web.Controllers
@model List<Product>

@foreach(var item in model)
{
    <p>@item.Id - @item.Name</p>
}



View'e giriş... 
Bölüm içerik :
• Razor Syntax
• Layout
• Partial View
• Javascript
• css
................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
Razor Syntax..
cshtml uzantılı dosyalar içerisinde bir c#kodu yazacaksak eğer o zaman @ ile yazarız.

<span>
    @DateTime.Now.ToShortDateString()
</span>

@{
    var datetime = @DateTime.Now.ToShortDateString();
    var message = "merhaba";
    
    <text>bugunun tarihi: @datetime </text> 

    <span>
        mesaj: @message
    </span>

}


        @{
            ViewData["Title"] = "Home Page";
            var alert = "Bu bir uyarıdır";
        }

        <div class="text-center">
            <h1 class="display-4">Welcome</h1>
            <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
        </div>

        <span>
            @DateTime.Now.ToShortDateString()
        </span>

        @{
            var datetime = @DateTime.Now.ToShortDateString();
            var message = "merhaba";


            <span>
                mesaj: @message
            </span>

        }

        @if (1 == 1)
        {
            <p>doğru</p>

        }
        else if(DateTime.IsLeapYear(DateTime.Now.Year))
        {
            <p>artık yıl.</p>

        }
        else
        {
            <p>yanlış</p>
        }

        @for(var i = 0; i < 10;i++)
        {
            <p>@i</p>
        }

        @foreach (var item in Enumerable.Range(1,10).ToList())
        {
            <p>@item</p>
        }



Layout. bir web sayfasında genelde yapı aynıdır ortaktır tüm sayfalarda. Content denen kısım sayfadan sayfaya değişir bu sistem normelde.
Hazır olarak Menu header footer alanı genelde ortak olup content kısmı sayfadan sayfaya değişir normalde.
Layout özelleştirilmiş cshtml dosyasıdır.

ama bu özelleştirilebilir mesela header olmasın diyebiliriz.
view klasöründe Shared klasöründe _Layout.cshtml var mesela.

            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="utf-8" />
                <meta name="viewport" content="width=device-width, initial-scale=1.0" />
                <title>@ViewData["Title"] - turkcell1.Web</title>
                <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
                <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
                <link rel="stylesheet" href="~/turkcell1.Web.styles.css" asp-append-version="true" />
            </head>
            <body>
                <header>
                    <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
                        <div class="container-fluid">
                            <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">turkcell1.Web</a>
                            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse" aria-controls="navbarSupportedContent"
                                    aria-expanded="false" aria-label="Toggle navigation">
                                <span class="navbar-toggler-icon"></span>
                            </button>
                            <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                                <ul class="navbar-nav flex-grow-1">
                                    <li class="nav-item">
                                        <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Index">Home</a>
                                    </li>
                                    <li class="nav-item">
                                        <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </nav>
                </header>
                <div class="container">
                    <main role="main" class="pb-3">
                        @RenderBody()
                    </main>
                </div>

                <footer class="border-top footer text-muted">
                    <div class="container">
                        &copy; 2024 - turkcell1.Web - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
                    </div>
                </footer>
                <script src="~/lib/jquery/dist/jquery.min.js"></script>
                <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
                <script src="~/js/site.js" asp-append-version="true"></script>
                @await RenderSectionAsync("Scripts", required: false)
            </body>
            </html>

// _Layout.cshtml içinde body içinde header footer content vs vs gibi alanlar var.

@RenderBody()   bu html kodunun içinde mesela index.cshtml içinde kodların bu metota eklendiği bilinir. 

    @{
        Layout = "_Layout"; // _ViewStart.cshtml içinde default olarak kullanılacak olan Layout'u belirleyebiliriz.
    }

wwwroot içinde js klasöründe site.js dosyasına hazır olarak kullanacağımız javascript kodlarını yazabiliriz.
    css içerisinde ise site.css varda default olarak gelen css kodları vardır.


Layout Sayfaları Oluşturmak.
views klasörundeki Shared klasorunde add new view ile boş bir  view ekledik.

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>@ViewData["Title"] - turkcell1.Web</title>
            <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
            <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
            <link rel="stylesheet" href="~/turkcell1.Web.styles.css" asp-append-version="true" />
        </head>
        <body>
            <header>

            </header>

            <div class="container">
                <main role="main" class="pb-3">
                    @RenderBody() 
                </main>
            </div>

            <footer>
                <div>footer</div>
            </footer>
        </body>
        </html>

// Layout'tan alıp düzenleme yaptık.

@{
    ViewData["Title"] = "ExampleController Index";
    Layout = "ExampleLayout"; // burada hangi Layout'u kullanacağını belirttik yoksa default olarak Layout kullanır. _Layout'u kullanır.
}

<div>Bu sayfa Example Controller > Index sayfası</div>


@{
    Layout = null;
} // Layout yoksa böyle kullanılır... html dosyasını kendimiz yazarız ister elle yazar ya da hazır şablonu kullanabiliriz.


        @{
            Layout = null;
        }


        <!DOCTYPE html>

        <html>
        <head>
            <meta name="viewport" content="width=device-width" />
            <title>NoLayout</title>
        </head>
        <body>
        </body>
        </html>
// Layout'suz olduğu için kendi html yapısı var.


Render Section Nedir ? Nasıl Tanımlanır ?
Layout sayfalarında kullabileceğimiz metotlar. ekstra olarak layoutlar içeriisnde kodlar tanımlayabiliriz.

@await RenderSectionAsync("Scripts", required: false)  // bunun anlamı bir Render Section metotu oluşturursak bu kodlar buraya yerleşsin demektir.

@section header{ // section header diyerek aslında hedef yeri belirtiriz.
 // burada yazacağımız kodlar. viewdeki @await RenderSectionAsync("header", required: false) kısmına gidecek.
} 

diğer kodlar ise  @RenderBody() kısmına gidecek.

@await RenderSectionAsync("header", required: false)  false eğer true olursa. o layout'u kullanan tüm sayfalar bunu tanımlamak zorunda olur interface gibi false kalması daha iyidir. 

@section ile istediğimiz yere istediğimiz kodları ekleyebiliriz.
eğer @section ile yazmasak o zaman @RenderBody'e eklenir kodlar.

önce css sonra js dosyları yüklenir normalde.
header kısmında css footer kısmında ise js kodlarını barındırırız bunu hızlı çalışması için yaparız.


Partial View Nedir ?
Layout'un içeriğindekilerin gruplanması mesela menuyu ikiye bölüyoruz. uygulama içerisinde hep bulunmayan ama gerek olursa kullanacağımız cshtml doysaları.
mesela bir login menu eklemek istiyoruz. bazı sayfalarda gozüksün bazı sayfalarda gözükmesin isteyerebiliriz.
veya social icons eklemek isteyebiliriz böyle parçaları sürekli olarak kodlamak yerine bir kere kodlayıp sonra istenen yere enjekte etmek daha mantıklı olacaktır.

shared klasorunde sağ tık add view diyoruz sonra create as a partial view diyerek bir razor view oluşturuyoruz.
bir sayfa değil sayfaya entegre olacak yapı olacak.

mesela _PartialHeaderView diye bir cshtml oluşturduk içine istediğimiz kodu ekledik. 
bunu entegre etmek için ise entegre edilecek yerde <partial name = "_PartialHeaderView"/> bu şekilde yerleştirebiliriz.
@await Html.PartialAsync("_PartialHeaderView")  şeklinde de kullanabiliriz.
asenkron metotların başına @await eklenirler.



View içerisinde javascript kodu yazmak
jquery hazır olarak geliyor hem ham js kodları yazabiliriz hemde hazır kod kullanabiliriz.
eğer biz jquery ve bootstrap'i ilgilendiren bir js kodu yazacaksan script section içinde yazmamız lazım böylece önce kütüphaneler sonra kodlar eklenecek.

        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>@ViewData["Title"] - turkcell1.Web</title>
            <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
            <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
            <link rel="stylesheet" href="~/turkcell1.Web.styles.css" asp-append-version="true" />
        </head>
        <body>
            <partial name="_HeaderPartialView"></partial>
            <div class="container">
                <main role="main" class="pb-3">
                    @RenderBody()
                </main>
            </div>

        @section Scripts{
            <script type="text/javascript">
                alert("Sayfamıza hoş geldin.")
                $(document).ready( // html sayfam document demek. ready ise sayfa yüklendikten sonra bu kodlar işleme giricek. yoksa yüklenmemiş taga ulaşmaya çalışırsa hata alabiliriz.
                        {
                            console.log("Sayfamıza hoş geldinn");
                        }

                )
                </script>

        } // burada yazılan kod en aşağıdaki @await RenderSectionAsync("Scripts", required: false) kısmına eklenecek.
          // böylece önce kütüphaneler sonra js kodu eklenecek.

            <partial name="_FooterPartialView" />
            <script src="~/lib/jquery/dist/jquery.min.js"></script>
            <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
            <script src="~/js/site.js" asp-append-version="true"></script>
            @await RenderSectionAsync("Scripts", required: false)
        </body>
        </html>



View içerisinde css kodu yazmak.

ctrl basılı önce k sonra c yorum satırına alır seçili olanı... ctrl basılı önce k sonra u ise seçili olanı yorum satırından çıkarır...

@section Css{

    h1{
    
    color:red;
    backgroun-dcolor:blue;

    }

} // bunu biz sayfa koduna yazarız ve layoutta belirttiğimiz                 @await RenderSectionAsync("Css", required: false) olan yere gelir yerleşir. böylelikle önce css sonra js yerleşir bu yapı ile böylece sayfa daha hızlı çalışır.



            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="utf-8" />
                <meta name="viewport" content="width=device-width, initial-scale=1.0" />
                <title>@ViewData["Title"] - turkcell1.Web</title>
                <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
                <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
                <link rel="stylesheet" href="~/turkcell1.Web.styles.css" asp-append-version="true" />
                @await RenderSectionAsync("Css", required: false)
                @*   *@
            </head>
            <body>
                <partial name="_HeaderPartialView"></partial>
                <div class="container">
                    <main role="main" class="pb-3">
                        @RenderBody()
                    </main>
                </div>

            @section Scripts{
                <script type="text/javascript">
                    alert("Sayfamıza hoş geldin.")
                    </script>

            }


                <partial name="_FooterPartialView" />
                <script src="~/lib/jquery/dist/jquery.min.js"></script>
                <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
                <script src="~/js/site.js" asp-append-version="true"></script>
                @await RenderSectionAsync("Scripts", required: false)
            </body>
            </html>


@{
    ViewData["Title"] = "Home Page";
    var alert = "Bu bir uyarıdır";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

@section Css{

    <link rel="stylesheet" href="~/css/Example.css" asp-append-version="true" /> // kendi css dosyamızı oluşturduk wwwroot css dosyasında. ve buraya ekleyerek bunu cshtmlde çalışır hale getirebildik.

    <style>
    h1{
    
    color:red;
    background-color:blue;

    }
    </style>
}

<h1>
    Merhaba dünya
</h1>
<hr/>
<h2>
    SELAMMM
</h2>



Programın hangi tarayıcıdan çalışacağını play butonunun oradaa(aşağı yönlü okta) web browser kısmından ayarlayabiliriz...


Bölüm İçerik :
Product(ürün) Class
• Product Repository
• Product :List/Remove
Product :Add/Update

model componentinde veritabanı ile ilgili kodların bulunduğu kodlardır ve bussiness kodlarımız olabilir bussiness kodları controllerden ve viewden uzak tutmak en mantıklısıdır.

Product(ürün) Class. 
model sağ tık new class.

namespace turkcell1.Web.Models
{
    public class Product
    {

        public int Id { get; set; }
        private string Name { get; set; }

        public decimal Price { get; set; }

        public int Stock { get; set; }




    }
}
// model'de Product class'ı oluşturduk.
// sonra ise Product için veritabanı işlemlerini yapması için ProductRepository class'ı oluşturduk.

namespace turkcell1.Web.Models
{
    public class ProductRepository
    {

        private static List<Product> _products = new List<Product>();

        public List<Product> GetAll() => _products;

        public List<Product> Products()
        {
            return _products;
        }

        public void Add(Product product)
        {
            _products.Add(product);
        }

        public void Remove(int id)
        {
            var hasProduct = _products.FirstOrDefault(x=>x.Id == id);
            if (hasProduct != null)
            {
                throw new Exception($"Bu id({id})'de bir ürün yok");
                


            }

            _products.Remove(hasProduct);


        }

        public void Update(Product updateProduct)
        {
            var hasProduct = _products.FirstOrDefault(x => x.Id == updateProduct.Id);
            if (hasProduct != null)
            {
                throw new Exception($"Bu id({updateProduct.Id})'de bir ürün yok");



            }

            hasProduct.Name = updateProduct.Name;
            hasProduct.Price = updateProduct.Price;
            hasProduct.Stock = updateProduct.Stock;

            var index = _products.FindIndex(x=> x.Id == updateProduct.Id);
            _products[index] = hasProduct;



        }

    }
}
// crud işlemlerinin olduğunu 

şimdi ise bir controller oluşturduk.... metotuna ise ad view ekledik. razor olanı.

using Microsoft.AspNetCore.Mvc;
using turkcell1.Web.Models;

namespace turkcell1.Web.Controllers
{
    public class ProductsController : Controller
    {


        private readonly ProductRepository _productRepository;

        public ProductsController()
        {
            _productRepository = new ProductRepository();
            if (!_productRepository.GetAll().Any())
            { // içinde veri yoksa bu metot çalışacak.
                _productRepository.Add(new Product { Id = 1, Name = "ford", Price = 1001 });
                _productRepository.Add(new Product { Id = 2, Name = "bmw", Price = 1002 });
                _productRepository.Add(new Product { Id = 3, Name = "mercedes", Price = 1003 });

            }

        }

        public IActionResult Index()
        { // view ekledik view'e eldeki verileri gönderdik.
            var products = _productRepository.GetAll();
            return View(products);
        }

    }
}



Index.cshtml Sayfasının kodlanması.

@{
    ViewData["Title"] = "Index";
}
@model List<Product>
<h1>Ürünler</h1>
<table class="table">

    <thead>
        <tr>
        <th>ID</th>
        <th>NAME</th>
        <th>PRICE</th>
            <th>STOCK</th>

        </tr>
    </thead>
    <tbody>
    @foreach(var item in Model){
        <tr>
            <td>item.Id</td>
            <td>item.Name</td>
            <td>item.Price</td>
            <td>item.Stock</td>



        </tr>
    }
    </tbody>


</table>




Remove Action Method'un Oluşturulması.
view'den controllere data göndereceğiz.

@{
    ViewData["Title"] = "Index";
}
@model List<Product>
<h1>Ürünler</h1>
<table class="table">

    <thead>
        <tr>
        <th>ID</th>
        <th>NAME</th>
        <th>PRICE</th>
            <th>STOCK</th>
         <th>İŞLEM</th>
        </tr>
    </thead>
    <tbody>
    @foreach(var item in Model){
        <tr>
            <td>@item.Id</td>
            <td>@item.Name</td>
            <td>@item.Price</td>
            <td>@item.Stock</td>
                <td><a asp-controller="products" asp-action="Remove" asp-route-id="@item.Id">SİL</a></td>


        </tr>
    }
    </tbody>


</table>



        <td><a asp-controller="products" asp-action="Remove" asp-route-id="@item.Id">SİL</a></td>
a etiketi ile link oluşturduk tıklayınca asp-controller hangi controllera gideceğini action hangi metota gideceği. asp-route-parametre adi ise hangi metotun parametresinin ne alacağını belirtir.


................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
Asp.Net Core MVC projesini farklı port’lardan çalıştırmak için hangi dosyada değişiklik yapmamız gerekmektedir ?


ChatGPT
ASP.NET Core MVC projesini farklı portlardan çalıştırmak için aşağıdaki adımları izleyebilirsiniz:

1. launchSettings.json dosyasını düzenlemek
Proje yapılandırma dosyasında (Properties/launchSettings.json), uygulamanın hangi portlarda çalışacağını belirleyebilirsiniz. Bu dosyada profiles bölümü bulunmaktadır ve burada projeyi çalıştırmak için kullanılan farklı profiller tanımlayabilirsiniz.
..................................................................

Asp.Net Core MVC ile gelen default routing pattern’ı nasıldır ?

{Controller}/{Action}/{id?}
......................................................................................................................................................
ASP.NET Core projesinde view sayfalarında script yazmanıza imkan veren default section, Scripts section'dur. Doğru kullanımı ise aşağıdaki gibidir:

@await RenderSectionAsync("Scripts", required: false)

ASP.NET Core projelerinde wwwroot klasörü, web uygulamanızın statik dosyalarını barındırmak için kullanılan klasördür. Bu klasör, istemcilere doğrudan sunulacak dosyaları içerir ve genellikle CSS, JavaScript, görüntüler, fontlar ve diğer statik varlıklar burada bulunur.

wwwroot Klasörünün Görevleri:
Statik Dosyaların Barındırılması:

Uygulamanızda kullanılan tüm statik dosyalar wwwroot klasöründe barındırılır. Bu dosyalara doğrudan URL üzerinden erişilebilir.
Statik Dosyaların Sunulması:

ASP.NET Core, wwwroot klasöründe bulunan dosyaları otomatik olarak sunar. Bu, web sunucusunun bu dosyaları doğrudan istemcilere göndermesine olanak tanır.
Yol Haritası:

Uygulamanızda bulunan statik dosyaların URL yolları, wwwroot klasörüne göre ayarlanır. Örneğin, wwwroot/css/site.css dosyasına /css/site.css URL'si üzerinden erişilebilir.

tempData ile bir actiondan başka actiona veri taşıyabiliriz.
.......................................................................................................................................................................
launchSettings.json, ASP.NET Core projelerinde uygulamanın nasıl başlatılacağını ve yapılandırılacağını belirlemek için kullanılan bir yapılandırma dosyasıdır. Bu dosya, genellikle proje klasörünün Properties alt klasöründe bulunur. launchSettings.json, farklı çalışma profilleri oluşturmanıza ve uygulamanızın farklı ortamlarda nasıl çalıştırılacağını belirtmenize olanak tanır.

...............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
RedirectToAction metodu, ASP.NET Core MVC'de bir action'dan başka bir action'a yönlendirme yapmak için kullanılır. Bu yöntem, HTTP 302 durum kodu ile bir yeniden yönlendirme yanıtı döner ve tarayıcıyı belirtilen action'a yeni bir istek yapması için yönlendirir.

ASP.NET Core uygulamalarında veri tabanı bağlantı dizelerinin (connection strings) genellikle bulundurulduğu dosya appsettings.json dosyasıdır.








Entity kısmı aspnetMVC 201.

Bölüm İçerik :
• Entity nedğ ?
• EF Core•un avantajları ?
• EF Core•un dezavanta*an 7
• Yaklaşımlar (DatabaseF„irst-CdeFBt)




................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................

EF Core nedir?
hafif genişletilebilir ve open source veri erişim teknolojisidir.
ORM(object-relational mapping) yapabiliriz. nesne mapleme olayı. veritbanındaki sutunları bir class ile karşılanması. verilerin nesne olarak karşılanması.
ef core'de sorgularımız linq(Language integrated Query) teknolojisi ile yazarız.
        • LINQ To Objects Collection (arraylist, list gibi collectionlar.)
        • LINQ XML
        • LINQ to Entities (Entities demek class'tır ama bu class veritabınında tablo olarak karşılığı olan class'lardır.)
linq ile tip güvenli sorgular yazabiliriz.
linq (dile entegre sorgulama)

ef core ile ham sql sorgularıda yazabiliriz.

ORM nedir ? nesne mapleme tekniğidir. hibernate dopperda böyle bir kütüphanedir bir orm aracıdır.
    ilişkisel veritabanlarında birebir veri eşleştirmek için kullanılır. entity framework'te bir orm yapısı.
    mesela sunucuda 3 satırı olan tablo var. tablodan bir class ve stutunlardan properityler satırlardan ise nesneler üretilir. veritabanı sistemini nyp ile bağlarız aslında.


ef core olmadan veritabanına bağlanmak zordur. bunu kolaylaştırır ve güvenli bir iş sağlar. normalde 50 satır olan ef coresuz kodu ef core ile 1 satırda halledebiliriz.

orm ile mesela bir tablo var ve tablo adında bir class oluşur sutunlardan ise attributesler oluşur mesela user class'ı int id propertysi name string propertysi gibi bir class oluşur. tüm userleri getir dediğim zaman ise o zaman tüm satırları nesne olarak getirecek.
entity class'ı demek tablonun class'ı demektir veritabanında bir karşılığı vardır demektir.

EF Core'un avantajları nelerdir ?
veritabanı ile tip güvenli bir şekilde çalışabiliriz. bir hata yaptığımızda derleme esnasında hatamızı görebiliriz.
veritabanı ile ilgili tüm süreci soyutlar. gereksiz sorgu bağlantı vs yapmıyoruz temiz kod yazabiliyoruz. kod daha okunabilir oluyor. veri çekme okuma vs süreç soyutlanmış şekilde oluyor. kod daha sürdürülebilir daha kolay güncellenebilir kodlar yazabiliyoruz.
ef core aradaki süreci soyutladığı için az kod değişikliği ile veritabanı değişimi yapabiliriz. daha kolay güncelenebilir sistemler kurabiliriz.
sql injection gibi zaafiyetlere karşı doğal koruması vardır(sorgu yerine script yazarak veritabanını çökertebilirler) bizim yerimize koruma sağlar.
veritabanı ile tüm işlemlerimizi kod içerisinden yapabiliriz. veritabanı açmadan veritabanını yönetebiliriz. tek yerden veritabanını yönetebiliriz.

EF Core'un dezavantajları nelerdir ?
aslında çok dezavantajı yok. bir tık yavaş.
veritabanı ile ilgili işlemi soyutladığı için biraz yavaşlama yapar. elle çok profesyonel yazarsan hızlı olur ef core'den.
ef core tarafından oluşturulan sorgulara kesinlikle müdahale edemeyiz. koruma sistemi var. aralara girebiliyoruz şunu al sadece price ve stok getir gibi komut verebiliriz.
%100 müdahale istersek linq yerine ham sql sorgucuklarıda yazabiliriz. ama tip güvenli ve sql injection'a karşı ef core kullanmak daha mantıklıdır.

EF Core Yaklaşımlar(Database First).
uygulama geliştirilirken önce veritabanını oluşturmaktır tabloları oluştur bağlantıları kur sonra veritabanındaki objelere karşılık c#da class oluştur. ef core tarafında DbContext class'tan miras alarak yaparız. tablolar entitylere karşılık gelir. her bir entity bir context'e ait olmalıdır.
DbSet sınıfıda ef core sınıfından gelecek. 
önce veritabanı oluşur sonra bu veritabanında entitylere karşılık c#da ilgili class'ları vs oluştururuz.

EF Core Yaklaşımlar(Code First).
ilk olarak kodla başlarız. önce proje oluştururuz. sonra veritabanına karşılık gelecek DbContext class sonra veritabanında tablolara karşılık gelecek entityleri oluştururuz.
    sonra kodlamada yaptıklarımız veritabanına yansısın diye migrations diye bir tool kullanırız. kod ile veritabanı arasındaki senkranizasyonu sağlar.
    migrations komutları ile yaptığımız değişiklikler veritabanına yansır. mesela entity ekledik o zaman veritabanında tablo oluşturur gibi.

uygulamalarda genelde code first kullanılır. veritabanı açmadan tüm yönetimi kodlama tarafında yapabiliriz. bu yüzden code first yaklaşımı tercih edilir.

Entity Framework Kütüphanelerinin yüklenmesi.
dependies kısmı- sağ tık- manage NuGet Packages diyoruz. sonra searche ef core yazıyoruz.
ef core farklı farklı veritabanlarına bağlanabilir. biz sql server olanı indireceğiz ama veritabanına göre seçebiliriz. 
Microsoft.EntityFrameworkCore.SqlServer.Design indiririz bide.
Microsoft.EntityFrameworkCore.Tools indiririz bide.

package manage konsol tools'ta nuget package managerde oradan nuget package console seçeriz ve açılır. migrations komutları verebiliriz. cmd üzerinden de olur ama bunu kullanırsak vs üzerinden her işi halletmiş oluruz.
        migrations komutları cmde de çalışır ama nuget package consolede çalıştırmak daha iyidir.

view kısmında sql server object explorer var. bu alanla beraber ile bir çok farklı db'ye bağlanabiliriz.
add sql server kısmından bağlantı kurabiliriz. ve databaseleri bulabiliriz.
sql server explorer ile elde giriş yetkisi varsa localdeki veya sunucudaki veritabanlarına bağlanabiliriz.
sql server explorerda database sonra tabloyu bulur önce refresh ederiz sonra propertieste connection stringi buluruz. Data Source=EMREAYTAS\SQLEXPRESS;Initial Catalog=TurkcellDB;Integrated Security=True;Connect Timeout=30;Encrypt=True;Trust Server Certificate=True;Application Intent=ReadWrite;Multi Subnet Failover=False ... bunun gibi bişi.

...
projemizde appsettings.json'a geliriz.

{
  "ConnectionStrings": {
    "SqlCon": "Data Source=EMREAYTAS\\SQLEXPRESS;Initial Catalog=TurkcellDB;Integrated Security=True;Connect Timeout=30;Encrypt=True;Trust Server Certificate=True;Application Intent=ReadWrite;Multi Subnet Failover=False"

  },
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}

// ve bu şekilde connection string'i ekleriz.



DbContext sınıfının oluşturulması.
model klasorune gidip sağ tık add class ismini veririz mesela AppDbContext deriz. sonra gelen classı :DbContext deriz ve miras almasını sağlarız DbContext'ten burası önemli.

using Microsoft.EntityFrameworkCore;

namespace turkcell1.Web.Models
{
    public class AppDbContext:DbContext

    {


    }

}

// bu şekilde kurarız ilk başta kırmızı yanar. alt + enter yaparak ilgili namespace'yi çağırırız.

ctor yazar ve iki kere tab'a basarsak class içinde otomatik olarak constructor oluşturur.
....................................
using Microsoft.EntityFrameworkCore;

namespace turkcell1.Web.Models
{
    public class AppDbContext:DbContext
    {

        public AppDbContext(DbContextOptions<AppDbContext> options):base(options)
        { 
            

/*
                    public AppDbContext(DbContextOptions<AppDbContext> options) : base(options)
                    public AppDbContext: Bu, AppDbContext adlı bir sınıfın yapıcı metodudur. Yapıcı metot, sınıftan bir nesne oluşturulduğunda ilk olarak çalıştırılan metottur.

                    (DbContextOptions<AppDbContext> options): Yapıcı metodun parametresidir. DbContextOptions<TContext> türünde bir options parametresi alır. Bu parametre, veritabanı bağlamının yapılandırma seçeneklerini içerir.

                    : base(options): Bu, AppDbContext sınıfının temel sınıfı olan DbContext sınıfının yapıcı metoduna options parametresini geçirdiğini belirtir. Yani, AppDbContext sınıfı oluşturulurken options parametresi DbContext sınıfına iletilir ve bu sayede veritabanı bağlantı seçenekleri yapılandırılır.
*/
            

        }



    }

}

............................................


            using Microsoft.EntityFrameworkCore;

            namespace turkcell1.Web.Models
            {
                public class AppDbContext:DbContext
                {


                    public AppDbContext(DbContextOptions<AppDbContext> options):base(options)
                    { 


                        


                        

                    }

                    public DbSet<Product> Products { get; set; } // bir db set oluşturuyoruz. ve tabloya denk gelen o yapı. ef core direkt olarak databasede Products'u arar isimlerinin aynı olması mantıklıdır. eğer öyle yapmazsak başka isim vermek istersek o zaman Product sınıfına gider class'ın üstüne [Table("Products")] yazmamız lazım. dbde maplenecek olan Products tablosudur.

                    // bunu yaptıktan sonra ise Program.cs'e girip aşağıdakini ekliyoruz.
                    /*
                    
            builder.Services.AddDbContext<AppDbContext>(options => { options.UseSqlServer(builder.Configuration.GetConnectionString("SqlCon")); });
                    */


                    // Program.cs'e ekleme yaptık.              builder.Services.AddDbContext<AppDbContext>(options => { options.UseSqlServer(builder.Configuration.GetConnectionString("SqlCon")); }); bunu ekledik böylece mesela DbContext.prodcuts dersek tüm data gelecek. soyutlamayı sağladık böylece.


                    /*

                    using Microsoft.EntityFrameworkCore;
            using turkcell1.Web.Models;

            var builder = WebApplication.CreateBuilder(args);

            // Add services to the container.
            builder.Services.AddControllersWithViews();

            builder.Services.AddDbContext<AppDbContext>(options => { options.UseSqlServer(builder.Configuration.GetConnectionString("SqlCon")); });

            var app = builder.Build();

            // Configure the HTTP request pipeline.
            if (!app.Environment.IsDevelopment())
            {
            app.UseExceptionHandler("/Home/Error");
            // The default HSTS value is 30 days. You may want to change this for production scenarios, see https://aka.ms/aspnetcore-hsts.
            app.UseHsts();
            }

            app.UseHttpsRedirection();
            app.UseStaticFiles();

            app.UseRouting();


            app.UseAuthorization();



            app.MapControllerRoute(
            name: "default",
            pattern: "{controller=Home}/{action=Index}/{id?}");

            app.Run();


                    */





                }

            }

// artık veritabanından veri çekebiliriz.


Product tablosuna data kaydetmek. Ef core aracılığı ile yapacağız. tüm işlemi ef core halledecek.

.......................................

using Microsoft.AspNetCore.Mvc;
using turkcell1.Web.Models;

namespace turkcell1.Web.Controllers
{
    public class ProductsController : Controller
    {


        private readonly ProductRepository _productRepository;
        private AppDbContext _context; 


        public ProductsController(AppDbContext context)
        {

            _context = context; // uygulama ayağa kalktığında c# eğer bir constructorda AppDbContext görürse o zaman bundan bir tane nesne örneği üretir ve bize verir.
            // buna Dependency injection denir yani bağımlılıkların enjekte edilmesi.
            


        }




    }
} // dependies injection ile nesneyi almamızı sağladı. bir kolaylık sağladı. bu yapıya ise DI container denir. ef core içinde 

......................................................................................

            using Microsoft.AspNetCore.Mvc;
            using turkcell1.Web.Models;

            namespace turkcell1.Web.Controllers
            {
                public class ProductsController : Controller
                {


                    private readonly ProductRepository _productRepository;
                    private AppDbContext _context; 


                    public ProductsController(AppDbContext context)
                    {
                        // DI container.
                        _productRepository = new ProductRepository();
                        // Dependies injection pattern bir design patterndir.

                        _context = context; // uygulama ayağa kalktığında c# eğer bir constructorda AppDbContext görürse o zaman bundan bir tane nesne örneği üretir ve bize verir. AppDbcontext nesnemizi aldık.

                        if (!_context.Products.Any()) // herhangi bir kayıt yoksa bunları ekle demektir bu.
                        {
                            _context.Add(new Product() { Name = "Kalem1", Price = 100, Stock = 100 });
                            _context.Add(new Product() { Name = "Kalem2", Price = 100, Stock = 200 });
                            _context.Add(new Product() { Name = "Kalem3", Price = 100, Stock = 300 });
                            // 3 tane data kaydettik.
                            _context.SaveChanges(); // değişiklikler veritabanına yansısın istersek eğer o zaman bunu kullanırık. SaveChanges()  denene  kadar ram'de tutulur. sonra veritabanına yansıtılır yansıtılınca ramden silinirler.
                        }



                    }

                    public IActionResult Index()
                    {
                        var products = _context.Products.ToList(); // veritabanındaki tüm dataları almış oluruz böylece.

                        return View(products);
                    }

                    public IActionResult Remove(int id)
                    {

                        _productRepository.Remove(id);
                        return RedirectToAction("Index");
                    }

                    public IActionResult Add()
                    {
                        return View();
                    }

                    public IActionResult Update(int id)
                    {

                        return View();

                    }



                }
            }







Product tablosunda kayıt silmek.

using Microsoft.AspNetCore.Mvc;
using turkcell1.Web.Models;

namespace turkcell1.Web.Controllers
{
    public class ProductsController : Controller
    {


        private readonly ProductRepository _productRepository;
        private AppDbContext _context; 


        public ProductsController(AppDbContext context)
        {
            // DI container.
            _productRepository = new ProductRepository();
            // Dependies injection pattern bir design patterndir.

            _context = context; // uygulama ayağa kalktığında c# eğer bir constructorda AppDbContext görürse o zaman bundan bir tane nesne örneği üretir ve bize verir. AppDbcontext nesnemizi aldık.

            if (!_context.Products.Any()) // herhangi bir kayıt yoksa bunları ekle demektir bu.
            {
                _context.Add(new Product() { Name = "Kalem1", Price = 100, Stock = 100 });
                _context.Add(new Product() { Name = "Kalem2", Price = 100, Stock = 200 });
                _context.Add(new Product() { Name = "Kalem3", Price = 100, Stock = 300 });
                // 3 tane data kaydettik.
                _context.SaveChanges(); // değişiklikler veritabanına yansısın istersek eğer o zaman bunu kullanırık. SaveChanges()  denene  kadar ram'de tutulur. sonra veritabanına yansıtılır yansıtılınca ramden silinirler.
            }



        }

        public IActionResult Index()
        {
            var products = _context.Products.ToList(); // veritabanındaki tüm dataları almış oluruz böylece.

            return View(products);
        }

        public IActionResult Remove(int id)
        {
            var product = _context.Products.Find(id); // nesneyi bul.
            _context.Products.Remove(product); // nesneyi sil komutu komut bellekte işlenmesi için SaveChanges lazım.
            _context.SaveChanges(); // değişiklikleri kaydet.


            return RedirectToAction("Index");
        }

        public IActionResult Add()
        {
            return View();
        }

        public IActionResult Update(int id)
        {

            return View();

        }

    }
} // Remove metotunda değişim yaptık.



Product tablosuna yeni sütunlar eklemek.
Şimdi Code first yapacağız bundan önce db first yaptık veritabanında producta karşılık gelen yapı kurduk.
Şimdi ise Color Width ve Height ekledik. veritabanı yönetim sisteminden. Şimdi ise Product Class'ına bu propları ekleriz.

namespace turkcell1.Web.Models
{
    public class Product
    {

        public int Id { get; set; }
        public string Name { get; set; }

        public decimal Price { get; set; }

        public int Stock { get; set; }
        public string? Color { get; set; }

        public int? Width { get; set; } // ? bunun anlamı nullable olabilir null değer alabilir buna müsade et demektir.

        public int? Height{ get; set; }

    }
}


Nullable Özelliği. .Net 6 ile default olarak açık gelen nullable özelliği anlatılmaktadır.
.net 6 ile otomatik olarak açık gelir 6 ve üstünde.
projenin properties'inden görebiliriz.
amacı şudur. bir uygulamada nullable hatalarının önüne geçmek.
evet veri null alabilir ama c# bizden nullable olabilceğinin garantisini ister.

int? string? gibi kullanılır. ? koyarsak o zaman bazı metotları kullanma şansı kazanırız bize esneklik sağlar.
string gibi referance tiplilere ? koymak metot kazandırmaz bize dizayn sırasında uyarıdan kurtarır. 
nullable olabilir bana açık açık belirt der c#.


C# dilinde nullable terimi, bir değişkenin null değerini alıp almayacağını belirten bir özelliktir. null, bir referans türü için geçerli bir değer olup, o değişkenin herhangi bir nesneye işaret etmediğini ifade eder. Değer türleri (örneğin, int, bool, float) varsayılan olarak null değerini alamazlar. Ancak, nullable türler kullanarak bu değer türlerinin de null olabilmesi sağlanabilir.

Nullable Değer Türleri
Değer türlerini nullable hale getirmek için ? işareti kullanılır. Örneğin:

int? nullableInt = null;
bool? nullableBool = true;
Bu şekilde tanımlanan değişkenler, hem kendi türlerinden bir değer hem de null değerini alabilirler.

Nullable Referans Türleri
C# 8.0 ve sonrası sürümlerde, nullable referans türleri konsepti de eklenmiştir. Bu özellik, referans türlerinin null değerini alıp almayacağını belirler. Varsayılan olarak, referans türleri nullable kabul edilir, yani null olabilirler. Ancak, nullable referans türleri özelliği etkinleştirildiğinde, referans türlerinin null olup olamayacağı daha açık bir şekilde ifade edilir.

Nullable referans türlerini kullanmak için, değişkenlerin null olabileceğini ? işaretiyle belirtiriz:


string? nullableString = null;
Bu şekilde tanımlanan bir string değişken, null değerini alabilir. Nullable referans türleri özelliği etkinleştirildiğinde, nullable olmayan referans türlerine null atamak derleyici hatasına neden olur.

Nullable Kullanımının Avantajları
Hata Önleme: Nullable türler, potansiyel null referans hatalarını (null reference exceptions) azaltmaya yardımcı olabilir.
Esneklik: Nullable türler, belirli bir durumda değer olmayabileceğini ifade etmek için kullanışlıdır.
Kod Okunabilirliği: Nullable türler, kodun niyetini daha açık bir şekilde belirtir, bu da kodun bakımını ve anlaşılmasını kolaylaştırır.
Örnek Kullanım

int? age = null;
if (age.HasValue)
{
    Console.WriteLine($"Age: {age.Value}");
}
else
{
    Console.WriteLine("Age is not provided.");
}
Yukarıdaki örnekte, age nullable bir int olarak tanımlanmış ve null değeri atanmıştır. HasValue özelliği, değişkenin bir değer içerip içermediğini kontrol eder. Eğer age bir değer içeriyorsa, Value özelliği ile bu değer alınır.


Code-First Migration. Ef Core ile Code-First yaklaşımının nasıl kullanılacağı ve migration komutları anlatılmaktadır.
code first daha fazla kullanılan daha sağlıklı uygulama geliştirme yoludur. önce kodları yazar sonra migrations sayesinde veritabanı ve tablolara dönüşüyor.

Migrations (4 adet komutu var aşağıdaki 4 tanesi.)
• Add-migration
• Remove-migration
• Update-database
• Script-migration
...................


package manager konsola giriyoruz. add-migration initial diyince initial adında migrations oluşturur.
Migrations klasoru geldi ve iki tane sayfa var içinde.
random_initial içinde komutlar var. Id kolonunu otomatik primary key ve otomatik artan yapmış.


            using Microsoft.EntityFrameworkCore.Migrations;

            #nullable disable

            namespace turkcell1.Web.Migrations
            {
                public partial class initial : Migration
                {
                    protected override void Up(MigrationBuilder migrationBuilder)
                    {
                        migrationBuilder.CreateTable(
                            name: "Products",
                            columns: table => new
                            {
                                Id = table.Column<int>(type: "int", nullable: false)
                                    .Annotation("SqlServer:Identity", "1, 1"),
                                Name = table.Column<string>(type: "nvarchar(max)", nullable: false),
                                Price = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                                Stock = table.Column<int>(type: "int", nullable: false),
                                Color = table.Column<string>(type: "nvarchar(max)", nullable: true),
                                Width = table.Column<int>(type: "int", nullable: true),
                                Height = table.Column<int>(type: "int", nullable: true)
                            },
                            constraints: table =>
                            {
                                table.PrimaryKey("PK_Products", x => x.Id);
                            });
                    }

                    protected override void Down(MigrationBuilder migrationBuilder)
                    {
                        migrationBuilder.DropTable(
                            name: "Products");
                    }
                }
            }

// bunlardan sonra update-database diyerek değişiklikleri veritabanına yerleştiririz.



Remove Migration. Code-First yaklaşımında remove-migration komutunun nasıl kullanılacağı anlatılmaktadır.
mesela 2 tane sutunu kaldırdık class'tan. sonra add-migration RemoveMigration dedik.

using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace turkcell1.Web.Migrations
{
    public partial class RemoveWidthHeight : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropColumn(
                name: "Height",
                table: "Products");

            migrationBuilder.DropColumn(
                name: "Width",
                table: "Products");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.AddColumn<int>(
                name: "Height",
                table: "Products",
                type: "int",
                nullable: true);

            migrationBuilder.AddColumn<int>(
                name: "Width",
                table: "Products",
                type: "int",
                nullable: true);
        }
    }
}

// değişiklikler veritabanına yansısın istersek o zaman update-database diyeceğiz.
// SnapShots class'ı bizim aslında son yapımızın resmini çeker yeni işlemi ona göre ayarlar elle ellenmemesi gerekir.
migrationslara ve SnapShots'lara elle müdahale etmemek lazım.

remove-migration son yapılan migration'u siler. 
mesela migration oluşturduk ama veritabanına update etmedik o zaman bile elle müdahale etmemek lazım çünkü SnapShots güncellendi buna dikkat etmek lazım.


Update-database <Migratin Name>. Code-First yaklaşımında update-database <migration name> komutunun nasıl kullanılacağı anlatılmaktadır.

uygulanmış migrationları nasıl geri alabiliriz buna bakacağız.
update-database RemoveWidthHeight  demek bu migration'a kadar olan tüm migrationları kaldır geçersiz kıl o versiyona dön demektir.
veritabanına uygulanmış migrationu silemeyiz. hata verir. database'de uygulanmış ise silemeyiz. önce ondan öncesine geri dön sonra sil hatası alırız.

..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
Script-Migration.  Code-First yaklaşımında script-migration komutunun nasıl kullanılacağı anlatılmaktadır.

Script-migration migrationları alıyor ve sqlserverda çalışabilecek bir script dosyası oluşturuyor.

script-migration komutu verdik ve içeriği aşağıdaki komutlar olan sql dosyası geldi.

                IF OBJECT_ID(N'[__EFMigrationsHistory]') IS NULL
                BEGIN
                    CREATE TABLE [__EFMigrationsHistory] (
                        [MigrationId] nvarchar(150) NOT NULL,
                        [ProductVersion] nvarchar(32) NOT NULL,
                        CONSTRAINT [PK___EFMigrationsHistory] PRIMARY KEY ([MigrationId])
                    );
                END;
                GO

                BEGIN TRANSACTION;
                GO

                CREATE TABLE [Products] (
                    [Id] int NOT NULL IDENTITY,
                    [Name] nvarchar(max) NOT NULL,
                    [Price] decimal(18,2) NOT NULL,
                    [Stock] int NOT NULL,
                    [Color] nvarchar(max) NULL,
                    [Width] int NULL,
                    [Height] int NULL,
                    CONSTRAINT [PK_Products] PRIMARY KEY ([Id])
                );
                GO

                INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
                VALUES (N'20240723062919_initial', N'6.0.32');
                GO

                COMMIT;
                GO

                BEGIN TRANSACTION;
                GO

                DECLARE @var0 sysname;
                SELECT @var0 = [d].[name]
                FROM [sys].[default_constraints] [d]
                INNER JOIN [sys].[columns] [c] ON [d].[parent_column_id] = [c].[column_id] AND [d].[parent_object_id] = [c].[object_id]
                WHERE ([d].[parent_object_id] = OBJECT_ID(N'[Products]') AND [c].[name] = N'Height');
                IF @var0 IS NOT NULL EXEC(N'ALTER TABLE [Products] DROP CONSTRAINT [' + @var0 + '];');
                ALTER TABLE [Products] DROP COLUMN [Height];
                GO

                DECLARE @var1 sysname;
                SELECT @var1 = [d].[name]
                FROM [sys].[default_constraints] [d]
                INNER JOIN [sys].[columns] [c] ON [d].[parent_column_id] = [c].[column_id] AND [d].[parent_object_id] = [c].[object_id]
                WHERE ([d].[parent_object_id] = OBJECT_ID(N'[Products]') AND [c].[name] = N'Width');
                IF @var1 IS NOT NULL EXEC(N'ALTER TABLE [Products] DROP CONSTRAINT [' + @var1 + '];');
                ALTER TABLE [Products] DROP COLUMN [Width];
                GO

                INSERT INTO [__EFMigrationsHistory] ([MigrationId], [ProductVersion])
                VALUES (N'20240723065133_RemoveWidthHeight', N'6.0.32');
                GO

                COMMIT;
                GO

neler oluştuysa şu ana kadar bu sql dosyasını veritabanında çalıştırırsak hepsini gerçekleştirir.



Bölüm içerik :
..Kullanıcıdan veri alma yöntemleri
..HttpGet ve HttpPost method tipleri İle veri alma Yöntemleri,
..Add ve Update sayfalarının kodlanması
..Model Binding Attribute


Kullanıcıdan Veri Alma Yöntemi (Model Binding) 1.Adım. Kullanıcıdan form aracılığı veri alma yöntemi anlatılmaktadır.
kullanıcıdan veri alacağız alabilmek için veri girebileceği alanlar yaratmamız lazım.

view klasoru product add sayfası...
@{
    ViewData["Title"] = "Add";
}

<h1>EKLEME</h1>

<form>

    <input type = "text" name = "Name"/> @*değerleri backend tarafına yollarız. name ile backend'de kullanıcının girmiş olduğu dataları yakalamak için kullanırız. id'yi ise javascript için kullanırız.*@
    <input type = "text" name = "Price"/>
    <input type = "text" name = "Stock"/>
    <input type = "text" name = "Color"/>

    <button type = "submit">Ürün Kaydet</button> @*type submit olmalı ki değer sunucuya gitsin.*@



</form>

......................
        [HttpPost] // dataları request'in bodysinde alacağı için tip belirttik.
        public IActionResult SaveProduct() { 
        
            return View();

        }
......................
[HttpPost] attribute'u, bir HTTP POST isteğine yanıt vermesi gereken bir yöntem olduğunu belirtir. Bu tür istekler genellikle sunucuya veri göndermek için kullanılır. Örneğin, bir form gönderdiğinizde veya veri oluşturduğunuzda bir POST isteği gönderirsiniz.

SaveProduct yöntemi bir ürün kaydetme işlemi gerçekleştirecekse, bu işlem sırasında kullanıcının gönderdiği veriler sunucuya POST isteği ile gönderilecektir. Bu nedenle, bu yöntemi [HttpPost] ile işaretlemek mantıklıdır. Kısaca, [HttpPost] kullanmamızın sebebi, bu yöntemin veri göndermeye yönelik bir istekle çağrılmasını istememizdir.

Özetle, [HttpPost] kullanmanın nedeni:

Kullanıcıdan sunucuya veri göndermek için POST isteğini kullanmak.
Bu yöntemle genellikle form verileri veya yeni veri ekleme işlemleri yapılır.
Güvenlik açısından GET isteğinden daha güvenli kabul edilir çünkü veri URL'de değil, isteğin gövdesinde taşınır.
......................


@{
    ViewData["Title"] = "Add";
}

<h1>EKLEME</h1>

<form asp-controller="Products" asp-action="SaveProduct" method="post">  tag helperlar ile hangi kontroller hangi IActionResult'a gideceği ve metotun hangi tipte olduğunu belirttik.

    <label>Ürün İsmi</label>
    <input type = "text" name = "Name"/>
    <br />    <label>Ürün Fiyat</label>

    <input type = "text" name = "Price"/>
    <br />    <label>Ürün Stok</label>

    <input type = "text" name = "Stock"/>
    <br />     <label>Ürün Renk</label>

    <input type = "text" name = "Color"/>
    <br />

    <button type = "submit">Ürün Kaydet</button>

</form>


Girilen veri almak için.
        [HttpPost] // dataları request'in bodysinde alacağı için tip belirttik.
        public IActionResult SaveProduct() {
            // 1. yöntem olarak.
            var name = HttpContext.Request.Form["Name"]; // tag'a göre alır veriyi.
            var price = HttpContext.Request.Form["Price"];

            var stock = HttpContext.Request.Form["Stock"];

            var color = HttpContext.Request.Form["Color"];

            return View();

        }
// bu sistem ile butona basıp ürün ekle dediğimiz zaman ProductsController'deki bu metota veriler aktarılacak.


using Microsoft.AspNetCore.Mvc;
using turkcell1.Web.Models;

namespace turkcell1.Web.Controllers
{
    public class ProductsController : Controller
    {


        private readonly ProductRepository _productRepository;
        private AppDbContext _context; 


        public ProductsController(AppDbContext context)
        {
            // DI container.
            _productRepository = new ProductRepository();
            // Dependies injection pattern bir design patterndir.

            _context = context; // uygulama ayağa kalktığında c# eğer bir constructorda AppDbContext görürse o zaman bundan bir tane nesne örneği üretir ve bize verir. AppDbcontext nesnemizi aldık.

            /*
            if (!_context.Products.Any()) // herhangi bir kayıt yoksa bunları ekle demektir bu.
            {
                _context.Add(new Product() { Name = "Kalem1", Price = 100, Stock = 100,Color = "Red" });
                _context.Add(new Product() { Name = "Kalem2", Price = 100, Stock = 200, Color = "Red" });
                _context.Add(new Product() { Name = "Kalem3", Price = 100, Stock = 300, Color = "Red"});
                // 3 tane data kaydettik.
                _context.SaveChanges(); // değişiklikler veritabanına yansısın istersek eğer o zaman bunu kullanırık. SaveChanges()  denene  kadar ram'de tutulur. sonra veritabanına yansıtılır yansıtılınca ramden silinirler.
            }
            */




        }

        public IActionResult Index()
        {
            var products = _context.Products.ToList(); // veritabanındaki tüm dataları almış oluruz böylece.

            return View(products);
        }

        public IActionResult Remove(int id)
        {
            var product = _context.Products.Find(id); // nesneyi bul.
            _context.Products.Remove(product); // nesneyi sil komutu komut bellekte işlenmesi için SaveChanges lazım.
            _context.SaveChanges(); // değişiklikleri kaydet.


            return RedirectToAction("Index");
        }

        public IActionResult Add()
        {
            return View();
        }

        [HttpPost] // dataları request'in bodysinde alacağı için tip belirttik.
        public IActionResult SaveProduct() {
            // 1. yöntem olarak.
            var name = HttpContext.Request.Form["Name"].ToString(); // keyler ile verileri alırız.
            var price = Decimal.Parse(HttpContext.Request.Form["Price"]);

            var stock = int.Parse(HttpContext.Request.Form["Stock"]);

            var color = HttpContext.Request.Form["Color"].ToString();

            Product newProduct = new Product() { Name = name,Price = price,Stock = stock,Color = color};

            _context.Products.Add(newProduct);
            _context.SaveChanges();



            return RedirectToAction("Index");

        }


        public IActionResult Update(int id)
        {

            return View();

        }

    }
}


Kullanıcıdan Veri Alma Yöntemi (Model Binding) Method Parametre ile. Kullanıcıdan form aracılığı ile method parametresi üzerinden veri alma yöntemi anlatılmaktadır.

using Microsoft.AspNetCore.Mvc;
using turkcell1.Web.Models;

namespace turkcell1.Web.Controllers
{
    public class ProductsController : Controller
    {


        private readonly ProductRepository _productRepository;
        private AppDbContext _context; 


        public ProductsController(AppDbContext context)
        {
            // DI container.
            _productRepository = new ProductRepository();
            // Dependies injection pattern bir design patterndir.

            _context = context; // uygulama ayağa kalktığında c# eğer bir constructorda AppDbContext görürse o zaman bundan bir tane nesne örneği üretir ve bize verir. AppDbcontext nesnemizi aldık.

            /*
            if (!_context.Products.Any()) // herhangi bir kayıt yoksa bunları ekle demektir bu.
            {
                _context.Add(new Product() { Name = "Kalem1", Price = 100, Stock = 100,Color = "Red" });
                _context.Add(new Product() { Name = "Kalem2", Price = 100, Stock = 200, Color = "Red" });
                _context.Add(new Product() { Name = "Kalem3", Price = 100, Stock = 300, Color = "Red"});
                // 3 tane data kaydettik.
                _context.SaveChanges(); // değişiklikler veritabanına yansısın istersek eğer o zaman bunu kullanırık. SaveChanges()  denene  kadar ram'de tutulur. sonra veritabanına yansıtılır yansıtılınca ramden silinirler.
            }
            */




        }

        public IActionResult Index()
        {
            var products = _context.Products.ToList(); // veritabanındaki tüm dataları almış oluruz böylece.

            return View(products);

        }

        public IActionResult Remove(int id)
        {
            var product = _context.Products.Find(id); // nesneyi bul.
            _context.Products.Remove(product); // nesneyi sil komutu komut bellekte işlenmesi için SaveChanges lazım.
            _context.SaveChanges(); // değişiklikleri kaydet.


            return RedirectToAction("Index");
        }

        // aslında metotun üstende default olarak bir [HttpGet] var
        [HttpGet]
        public IActionResult Add()
        {
            return View();
        }

        [HttpPost] // dataları request'in bodysinde alacağı için tip belirttik.
        // bir request var bunun bir head ve body kısmı var HttpPost'u seçersek eğer veriler bu requestin bodysinde gelir şifrelenerek gelir servera geldiğinde açılır güvenli bir şekilde alır.
        // get metotu vardır datalar url ile taşınır ama güvenli değildir.

        public IActionResult Add(string Name,decimal Price,int Stock,string Color) { // bu parametrelerin ismi form nesnesindeki taglarla aynı olmalıdır.
            // kullanıcıdan aldığımız dataları bir metotun parametreleri üzerinden nasıl alırız. asp form'daki tagları(frontend'deki tagları) metota parametre olarak geçersek otomatik olarak verileri alır parametrelere koyar.


            Product newProduct = new Product() { Name = Name,Price = Price,Stock = Stock,Color = Color};

            _context.Products.Add(newProduct);
            _context.SaveChanges();



            return RedirectToAction("Index");

        }


        public IActionResult Update(int id)
        {

            return View();

        }



    }
}

// bu yöntem veri almak için daha fazla kullanılan daha mantıklı yöntemdir.

Kullanıcıdan Veri Alma Yöntemi (Model Binding) Class(Sınıf) ile. Kullanıcıdan form aracılığı ile sınıf parametresi üzerinden veri alma yöntemi anlatılmaktadır.


@{
    ViewData["Title"] = "Add";
}
@model Product 

<h1>EKLEME</h1>

<form asp-controller="Products" asp-action="Add" method="post">

    <label>Ürün İsmi</label>
    <input type = "text" asp-for = "Name"/>
    <br />    <label>Ürün Fiyat</label>

    <input type="text" asp-for="Price" />
    <br />    <label>Ürün Stok</label>

    <input type="text" asp-for="Stock" />
    <br />     <label>Ürün Renk</label>

    <input type="text" asp-for="Color" />
    <br />

    <button type = "submit">Ürün Kaydet</button>



  
</form>
// butona bastığım zaman @model Product ile bir Product üretilecek ve asp-for ile verileri doldurulacak sonra ise Add IActionResult'a parametre olarak gelecek nesne.

.................. // burada bir nesne olarak olarak alacak ve asp-for tagı kullanarak nesnenin attributetelerine gelecek verileri belirleriz.

        public IActionResult Add(Product newProduct) { // gelecek olan nesne model tagı sayesinde buraya parametre olarak gelecek. tip güvenli olarak kullanabileceğiz.


            _context.Products.Add(newProduct);
            _context.SaveChanges();



            return RedirectToAction("Index");

        }

// böylece tip güvenli bir şekilde verileri alabiliriz.         
// güvenli olan verileri requestlerin body'sinde taşımaktır.

Kullanıcıdan Veri Alma Yöntemi (Model Binding) HttpGet
Post değilde Get ile alacağız. En uygun yöntem Post ile almaktır Nesne olarak almaktır alınacak veriyi. 
Get ile almak çok sağlıklı değildir.
Get ile alırsak request'in stringinde gelir veriler çok güvenli değildir.

urlde Query string olarak taşınacak veriler. mesela tc vs vs var o zaman çok sağlıksız ve güvensiz olarak gelir. ssl ile siteler yayınlansansa bile sorun olur iyi bir yöntem değildir. ve taşınabilecek data miktarı sınırlıdır.



@{
    ViewData["Title"] = "Add";
}
@model Product

<h1>EKLEME</h1>

<form asp-controller="Products" asp-action="SaveProduct" method="get"> @*get yaptık metotu ve actionu belirledik.*@

    <label>Ürün İsmi</label>
    <input type = "text" asp-for = "Name"/>
    <br />    <label>Ürün Fiyat</label>

    <input type="text" asp-for="Price" />
    <br />    <label>Ürün Stok</label>

    <input type="text" asp-for="Stock" />
    <br />     <label>Ürün Renk</label>

    <input type="text" asp-for="Color" />
    <br />

    <button type = "submit">Ürün Kaydet</button>



  
</form>
............................

        [HttpGet]  // Get ile alacağımız için belirleme yaptık.
        public IActionResult SaveProduct(Product newProduct) {


            _context.Products.Add(newProduct);
            _context.SaveChanges();



            return View();

        }


Kullanıcıdan Veri Alma Yöntemi (Model Binding) Update.cshtml. Ürün güncelleme sayfasının kodlanması anlatılmaktadır.


@{
    ViewData["Title"] = "Update";
}


@model Product

<h1>Ürün Güncelleme</h1>

<form asp-controller="Products" asp-action="Update" method="post">


    <input type="hidden" asp-for="Id" /> @*Id'yi hidden olarak gönderdik ki asp bunu görebilsin buna göre bir güncelleme yapsın.*@ 


    <label>Ürün İsmi</label>
    <input type="text" asp-for="Name" />
    <br />    <label>Ürün Fiyat</label>

    <input type="text" asp-for="Price" />
    <br />    <label>Ürün Stok</label>

    <input type="text" asp-for="Stock" />
    <br />     <label>Ürün Renk</label>

    <input type="text" asp-for="Color" />
    <br />

    <button type="submit">Ürün Güncelle</button>

</form>

// views product update sayfası.
.......................... // ve iki tane IActionResult doldurduk.


using Microsoft.AspNetCore.Mvc;
using turkcell1.Web.Models;

namespace turkcell1.Web.Controllers
{
    public class ProductsController : Controller
    {


        private readonly ProductRepository _productRepository;
        private AppDbContext _context; 


        public ProductsController(AppDbContext context)
        {
            // DI container.
            _productRepository = new ProductRepository();
            // Dependies injection pattern bir design patterndir.

            _context = context; // uygulama ayağa kalktığında c# eğer bir constructorda AppDbContext görürse o zaman bundan bir tane nesne örneği üretir ve bize verir. AppDbcontext nesnemizi aldık.

            /*
            if (!_context.Products.Any()) // herhangi bir kayıt yoksa bunları ekle demektir bu.
            {
                _context.Add(new Product() { Name = "Kalem1", Price = 100, Stock = 100,Color = "Red" });
                _context.Add(new Product() { Name = "Kalem2", Price = 100, Stock = 200, Color = "Red" });
                _context.Add(new Product() { Name = "Kalem3", Price = 100, Stock = 300, Color = "Red"});
                // 3 tane data kaydettik.
                _context.SaveChanges(); // değişiklikler veritabanına yansısın istersek eğer o zaman bunu kullanırık. SaveChanges()  denene  kadar ram'de tutulur. sonra veritabanına yansıtılır yansıtılınca ramden silinirler.
            }
            */




        }

        public IActionResult Index()
        {
            var products = _context.Products.ToList(); // veritabanındaki tüm dataları almış oluruz böylece.

            return View(products);

        }

        public IActionResult Remove(int id)
        {
            var product = _context.Products.Find(id); // nesneyi bul.
            _context.Products.Remove(product); // nesneyi sil komutu komut bellekte işlenmesi için SaveChanges lazım.
            _context.SaveChanges(); // değişiklikleri kaydet.


            return RedirectToAction("Index");
        }

        // aslında metotun üstende default olarak bir [HttpGet] var
        [HttpGet]
        public IActionResult Add()
        {
            return View();
        }

        [HttpPost] 
        public IActionResult Add(Product newProduct) {


            _context.Products.Add(newProduct);
            _context.SaveChanges();



            return RedirectToAction("Index");

        }



        [HttpGet]
        public IActionResult Update(int id)
        {

            var product = _context.Products.Find(id);

            return View(product); // bu sayfaya gittiği zaman sayfadaki @model Product nesneyi alacak ve textleri dolduracak.. 

        }

        [HttpPost]
        public IActionResult Update(Product updateProduct)
        {


            _context.Products.Update(updateProduct);
            _context.SaveChanges(); // değişiklikleri kaydederiz.


            return RedirectToAction("Index");

        }





    }
}

// hidden olarak bizim Id'yi göndermemiz lazım ki primary key'i görsün ef core.


Kullanıcıdan Veri Alma Yöntemi (Model Binding) Ekleme ve Güncelleme Mesajı Göstermek. Ürün güncelleme ve ekleme işlemlerini sonrasında listeleme sayfasında mesaj gösterme konusu anlatılmaktadır.
bir viewden bir viewe temp data ile taşıma yapacağız.
TempData ile bir veri taşıyınca sayfaya o zaman içi boşalır ve null olur.

@{
    ViewData["Title"] = "Index";
}
@model List<Product>
<h1>Ürünler</h1>

@if(TempData["status"] != null) @*TempData'nın içi boş mu değil mi bakacağız.*@
{
    <div class="alert alert-primary" role="alert">
        @TempData["status"] @*TempData bir kere görüntülenecek sonra içindeki veri null olacak.*@

    </div>

}


<a asp-controller="products" asp-action="Add">Ürün ekle</a>
<table class="table">

    <thead>
        <tr>
        <th>ID</th>
        <th>NAME</th>
        <th>PRICE</th>
            <th>STOCK</th>
         <th>İŞLEM</th>
            <th>RENK</th>

        </tr>
    </thead>
    <tbody>

    @foreach(var item in Model){
        <tr>
            <td>@item.Id</td>
            <td>@item.Name</td>
            <td>@item.Price</td>
            <td>@item.Stock</td>
            <td>@item.Color</td>

                <td><a asp-controller="products" asp-action="Remove" asp-route-id="@item.Id">SİL</a>

                    <a asp-controller="products" asp-action="Update" asp-route-id="@item.Id">GÜNCELLE</a>
                
       
                    


                </td>

        </tr>
    }
    </tbody>


</table>
...................
using Microsoft.AspNetCore.Mvc;
using turkcell1.Web.Models;

namespace turkcell1.Web.Controllers
{
    public class ProductsController : Controller
    {


        private readonly ProductRepository _productRepository;
        private AppDbContext _context; 


        public ProductsController(AppDbContext context)
        {
            // DI container.
            _productRepository = new ProductRepository();
            // Dependies injection pattern bir design patterndir.

            _context = context; // uygulama ayağa kalktığında c# eğer bir constructorda AppDbContext görürse o zaman bundan bir tane nesne örneği üretir ve bize verir. AppDbcontext nesnemizi aldık.

            /*
            if (!_context.Products.Any()) // herhangi bir kayıt yoksa bunları ekle demektir bu.
            {
                _context.Add(new Product() { Name = "Kalem1", Price = 100, Stock = 100,Color = "Red" });
                _context.Add(new Product() { Name = "Kalem2", Price = 100, Stock = 200, Color = "Red" });
                _context.Add(new Product() { Name = "Kalem3", Price = 100, Stock = 300, Color = "Red"});
                // 3 tane data kaydettik.
                _context.SaveChanges(); // değişiklikler veritabanına yansısın istersek eğer o zaman bunu kullanırık. SaveChanges()  denene  kadar ram'de tutulur. sonra veritabanına yansıtılır yansıtılınca ramden silinirler.
            }
            */




        }

        public IActionResult Index()
        {
            var products = _context.Products.ToList(); // veritabanındaki tüm dataları almış oluruz böylece.

            return View(products);

        }

        public IActionResult Remove(int id)
        {
            var product = _context.Products.Find(id); // nesneyi bul.
            _context.Products.Remove(product); // nesneyi sil komutu komut bellekte işlenmesi için SaveChanges lazım.
            _context.SaveChanges(); // değişiklikleri kaydet.


            return RedirectToAction("Index");
        }

        // aslında metotun üstende default olarak bir [HttpGet] var
        [HttpGet]
        public IActionResult Add()
        {
            return View();
        }

        [HttpPost] 
        public IActionResult Add(Product newProduct) {


            _context.Products.Add(newProduct);
            _context.SaveChanges();

            TempData["status"] = "Ürün başarı ile eklendi.";


            return RedirectToAction("Index");

        }


        [HttpGet]
        public IActionResult Update(int id)
        {

            var product = _context.Products.Find(id);


            return View(product); // bu sayfaya gittiği zaman sayfadaki @model Product nesneyi alacak ve textleri dolduracak.. 

        }

        [HttpPost]
        public IActionResult Update(Product updateProduct)
        {


            _context.Products.Update(updateProduct);
            _context.SaveChanges(); // değişiklikleri kaydederiz.
            TempData["status"] = "Ürün başarı ile güncellendi."; // TempData ile veri taşıması yapacağız.


            return RedirectToAction("Index");

        }





    }
}
// TempData'da cookie ile taşınır. işini yaptıktan sonra içi boşalır.
// Requestler arası data taşımayı cookieler üzerinden yaparız okuma olunca silinir. tarayıcının cookie özelliği kapalı ise taşıma yapamayız.
//tarayıcının cookie özelliği kapalı ise taşıma yapamayız.
..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
Kullanıcıdan Veri Alma Yöntemi (Model Binding) Hyprid Model. Kullanıcıdan form aracılığı ile hem query string'den hemde body'den veri alma yöntemi anlatılmaktadır.



@{
    ViewData["Title"] = "Update";
}


@model Product

<h1>Ürün Güncelleme</h1>

<form asp-controller="Products" asp-action="Update" asp-route-productId ="@Model.Id" asp-route-type ="type1" accept-charset=" " method="post"> @*asp-route-parametre ismi  yapısı ile metotun parametresi ne değer alacak belirleyebiliriz.*@

    <label>Ürün İsmi</label>
    <input type="text" asp-for="Name" />
    <br />    <label>Ürün Fiyat</label>

    <input type="text" asp-for="Price" />
    <br />    <label>Ürün Stok</label>

    <input type="text" asp-for="Stock" />
    <br />     <label>Ürün Renk</label>

    <input type="text" asp-for="Color" />
    <br />

    <button type="submit">Ürün Güncelle</button>

</form>

.....................

   [HttpPost]
   public IActionResult Update(Product updateProduct,int productId,string type)
   { // int float gibi değeler requst'in string'inde bekler Product gibi nesneler ise request'in body'sinde taşınırlar bu yapı ile hibrit bir çözüm ürettik.
     // Post ile gelsede query stringde gelir int float decimal gibi değerler query'nin body'sinde gelsin istersek o zaman Product nesnesine entegre edebiliriz.

       updateProduct.Id = productId;
       _context.Products.Update(updateProduct);
       _context.SaveChanges(); // değişiklikleri kaydederiz.
       TempData["status"] = "Ürün başarı ile güncellendi.";


       return RedirectToAction("Index");

   }



Dependency Injection.
    Bölüm içerik :
            Dependency Injection Design Pattern
            Inversion Of Control principle
            Dependency Inversion principle
            DI Contoiner
            Singleton/Scope/Transient


Dependency Injection nedir ?. Dependency Injection Design Pattern konusu anlatılmaktadır.
bir design pattern(DI)dır. bir yazılımın ihtiyaç duyduğu bağımlılıkların dışarıdan eklenmesidir.     
bir implementasyondur. 

        Inversion Of Control principle(IOC)
        Dependency Inversion principle
        // iki prensibi var. 

Inversion Of Control principle: mesela a ve b classlarımız var. bu a class'ının görevini yerine getirebilmesi için b class'ına ihtiyacı var. bu prensip şunu der a class'ı içinde b class'ı olmasın, b class'ı dışarıdan a'nın içerisine gelsin. b class'ı dışarıdan gelirse tüm süreç dışarıda olucak. a class'ı b class'ının yaşam döngüsüne karışmıyor sorumluğu almıyor daha sorunsuz bir süreç oluyor.
        taksiye binip bir yere gitmek gibi tüm sorumluluk takside.  ama kendi arabamız olsaydı lastiği benzini her şeyiyle biz uğraşıcaktık. değişim yaptığımız zaman çok fazla uğraşmamız lazımdı ama taksiden inip başka taksiye binmek kolaydır. tüm süreci dışarıdan yönetmek daha sürdürülebilir bir işlev kuracaktır bize.

Dependency Inversion principle: iki tane class olsun. a class'ının b class'ına ihtiyacı olursa iki class birbirinden habersiz olsun. ve bir interface veya abstract class ile bağlansın. birbirinden soyutlansın sınıflar. kesinlikle birbirlerini direkt olarak bilmesinler. parçalar birbirini ne kadar az bilirlerseler o kadar sürdürülebilir kod yazmış oluruz. yeni featureler geldiğinde daha kolay olacak.
   a class'ı ile b class arasında interface ya da abstract olacak birbirinden soyutlanacaklar direkt olarak birbirlerini bilmeyecekler. parçaların birbirlerini az bilmesi o kadar sürdürülebilir büyütülebilir bir uygulama elde ederiz.

bu iki prensibe sadık olmak lazım. daha güvenli ve güncellenebilir bir sistem yazabiliriz.

bağımlılıkları dışarıdan enjekte etme olayı budur.
sıkı bağlı değil gevşek uygulamar yazmamız lazım. ki daha sürdürülebilir olsun kodlarımız. 


Asp.Net Core (IOC/DI) Container. Asp.Net Core (IOC/DI) Container konusu anlatılmaktadır.
asp.net core framework hazır DI/IOC altyapısı ile gelir. 

a ve b controllerlerinin görevini yerine getirmek için DAL class'ına ihtiyaçları olsun bunun anlamı a ve b DAL'a bağımlıdır demektir. DAL bağımlılık objesidir(Dependency object). spyutlama ile enjekte edeceğiz.
DAL sınıfımız olsun mesela IDAL interface ile a ve b controllerlerine enjekte edeceğiz. 
uygulamanın genelini ilgilendiren DbContext gibi nesneleri new ile üretmek yerine dışardan entegre edeceğiz.

Singleton-Scoped-Transient bunlar ise bağımlılık objelerinin mesela dal class'ı gibi ne kadar olacağını belirlemek için kullanılan yapılardır.


interface ile enjekte etmek mantıklıdır. DI prensibi.
iki yapıyı birbirinden soyutlarken interfaceyi daha fazla kullanırız. abstract yapısıda kullanılabilir ama interface daha fazla.

..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
Singleton-1. Asp.Net Core DI Conteiner ile Singleton yaşam döngüsü anlatılmaktadır.
Tek bir nesne üretmek için. bir tane nesne oluşturulacak ve sadece o nesne kullanılacak. uygulama ayağa kalktığında uygulama açık kaldığı sürece hep aynı nesne olacak ve tek başına olacak.

db ile ilgili işlemlerde Singleton metotlar kullanmak mantıklı değildir.


        private IHelper _helper;

        public ProductsController(AppDbContext context,IHelper helper)
        {
            // DI container.
            _productRepository = new ProductRepository();
            // Dependies injection pattern bir design patterndir.
            _helper = helper;
            _context = context; 

        }
// bu yapı ile kullanmak lazım new kullanmadan direkt olarak bir nesne alacak constructor ve prop'u constructor içinde dolduracağız. böylece Products controller nesnesi Ihelperla ilgilenmeyecek dışarıda bir değişim yapı değişikliği olsa bile ProductsController'da bir değişim olmayacak.

// Program.cs class'ına geldik ve var app'ten önce aşağıdaki satırı ekleriz.
// Programın bu nesnenin yaşam döngüsünü bilmesi için. deriz ki Singleton nesne ekle ve bir class'ın constructorunda Ihelper adında bir nesne görürsen eğer o zaman Helper class'ından bir nesne üret ve getir demektir.
builder.Services.AddSingleton<IHelper,Helper>();

var app = builder.Build();
............................
namespace turkcell1.Web.Helpers
{

    public class Helper : IHelper
    {
        public string Upper(string text)
        {

            return text.ToUpper();


        }


    }


}
......................................
namespace turkcell1.Web.Helpers
{
    public interface IHelper
    {
        string Upper(string text);



    }

}

........................................
builder.Services.AddSingleton<IHelper,Helper>(); // AddSingleton dediğimiz için Singleton olarak belleğe yerleşecek Helper nesnesi.
// bu satır sayesinde. Ihelper parametresi olan class'lara Helper class'ından nesne üretilip getirilecek.

private IHelper _helper;
public ProductsController(AppDbContext context,IHelper helper)

bu yapıya biz constructor injection denir.
..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
Singleton-2.

// ProductsController'deki bir metota enjekte ettik illa constructor ile enjekte edeceğiz diye bir şey yok metot parametresi ilede enjekte edebiliriz. ama metot içerisinde [FromServices] etiketi ile belirtmemiz lazımdır.

        public IActionResult Index([FromServices]IHelper helper2)
        { // [FromServices] demek bunun DI container ile geleceğini belirtir.
            // buda metot enjekte etmeye yarar.
            var status = _helper.Equals(helper2); // true gelecek yani ikiside aynı nesnedir bir tane üretilir ve containter ile gelir ikiside.
            // ikiside bellekteki aynı nesnedir aslında.

            var text = "Asp.net";
            var uppertext = _helper.Upper(text);


            var products = _context.Products.ToList(); // veritabanındaki tüm dataları almış oluruz böylece.

            return View(products);

        }


Scoped. Asp.Net Core DI Conteiner ile Scoped yaşam döngüsü anlatılmaktadır.
nesnelerin yaşam döngüsüne müdahale edebilen metotlardır Singleton-Scoped-Transient.

Scope'de enjekte ettiğimiz sınıfın yaşam döngüsü request responseye dönüşünceye kadardır. mesela bir request geldi kullanıcı butona bastı. ve service1,service2,Acontroller nesneleri üretiliyor ve bu nesneler Ihelper'ı implemente etmiş. önce Ihelper bellekte var mı yok bunu kontrol eder eğer yoksa oluşturur ve belleğe koyar. ve bir daha Ihelper görürse sıfırdan üretmez aynı Helper'ı gönderir. Ama Response olduğunda ise Helper nesnesi bellekten uçar. Singleton'da ise bir kere üretilir sonra tüm requestlerde aynı nesne kullanılır ama bunda Response olunca request nesne uçar.
bunu servis ve veritabanı gibi şeyler için Scoped olarak kullanırız. web ve api'da daha çok scoped kullanırız.
mesela veritabanı için kullanıcak DbContext gibi nesneleri Scoped olarak kullanırız.

builder.Services.AddScoped<IHelper,Helper>(); // bunu ekledik var app üzerine. Bunun anlamaı Ihelper gördüğü constructor parametrelerine veya metot parametrelerine Helper class'ından nesne üretip getirecek demektir. 
request response olunca Helper'den üretilen nesne bellekten uçurulacak.



        Helper _helper; 

        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger,Helper helper)
        {

            _helper = helper;
            _logger = logger;
        }
// mesela bir prensibi ihlal edip interface ile değilde nesne olarak çağırdık o zaman 
builder.Services.AddScoped<Helper>(); // bunu eklememiz lazım Helper gördüğü yere Helperden nesne üretip getirecek. ama bun yöntem çok kullanılmamalıdır.


builder.Services.AddScoped<Helper>(sp => new Helper()); // bu yapıyı kullanırsak eğer o zaman üretilen nesneni constructoruna istenen bir veriyi gönderedebiliriz. sp => new Helper("sdfbdfsb"); yapabiliriz mesela.

DbContext'in yaşam döngüsü default olarak scoped'dir. her request'te veritabanına gider ve bir connection string ile gider bağlantı açar ve sorguları halleder.

Transient. Asp.Net Core DI Conteiner ile Transient yaşam döngüsü anlatılmaktadır.

Tüm bu yaşam döngüsü üretme işlemlerini DI container halleder.

bunda DI container ise her karşılaşmada sıfırdan bir nesne üretir ve belleğe koyar.  response olunca tüm nesneler bellekten silinir.

builder.Services.AddTransient<IHelper,Helper>(); // bu metotu ekledik var app üzerinde. metot ya da constructorda parametre olarak Ihelper görürse helper class'ından bir nesne üretecek.
referancelere göre karşılaştırma yapacak bellekte nesne yoksa oluşturacak. her karşılaşmada yeni nesne üretilecek IHelper ile karşılaşmada.. response olunca request belleği sıfırlayacak.

bir class içerisinde bir constructor oluşturursak(parametre alan bir constructor) default olan constructor yok olur.
..................................
// Program.cs'in içerisi.
builder.Services.AddTransient<IHelper,Helper>(sp =>
{
    return new Helper(true);

});


var app = builder.Build();
....................................
namespace turkcell1.Web.Helpers
{

    public class Helper : IHelper
    {

        private bool _isConfiguration;
        public Helper(bool isConfiguration)
        {
                
            _isConfiguration = isConfiguration;

        }

        public string Upper(string text)
        {


            return text.ToUpper();

        }

    }

}
...............................................
..............................................

using turkcell1.Web.Models;

namespace turkcell1.Web.Helpers
{

    public class Helper : IHelper
    {


        private readonly AppDbContext _context;

        public Helper(AppContext context)
        {
            _context = context;

        }

        public string Upper(string text)
        {


            return text.ToUpper();


        }


    }


} // burada kullanılan AppDbContext'i parametre olarak Program.cs'de göndermeye gerek yok çünkü zaten DI container bunu tanıyor bundan dolayı gerek yok. zaten servis olarak eklenmiş durumda.



[FromService] ile metot injection yapabiliriz. ve toplam 3 tane injection tipi var.
migrationları veritabanına yaansıtmak için update-database deriz. veritabanını güncelleriz.

............
Action method'larda route'dan data almak için kullanılan doğru attribute [FromRoute]'tur.

İşte diğer attribute'ların işlevleri:

[FromQuery]: Query string'den veri almak için kullanılır.
[FromRoute]: Route verilerinden veri almak için kullanılır.
[Route]: Route tanımlamak için kullanılır.
[FromBody]: İstek gövdesinden veri almak için kullanılır.
[FromHeader]: HTTP header'lardan veri almak için kullanılır.
Özetle, route'dan data almak için doğru attribute [FromRoute]'tur.

DbContext veritabanı DbSet ise tabloyu taklit eder.
...........
DbContext ve DbSet ikilisi Entity Framework Core'da veritabanı ile etkileşim kurmak için kullanılır. Aşağıda bu terimlerin ne anlama geldiğini ve karşılık geldiği kavramları bulabilirsiniz:

DbContext: Veritabanı bağlantısını yöneten ve veritabanı işlemlerini (CRUD işlemleri gibi) gerçekleştiren ana sınıftır.
DbSet: Belirli bir veritabanı tablosunu temsil eden ve bu tablo üzerinde CRUD işlemleri yapmanızı sağlayan bir koleksiyon sınıfıdır.
Bu ikili, Object-Relational Mapping (ORM) araçlarında genellikle aşağıdaki ikililere karşılık gelir:

Session/Transaction - Query Object: ORM araçlarında oturum (session) ve işlem (transaction) yönetimi yapan ve veritabanı sorguları gerçekleştiren yapı.
EntityManager - Entity: Veritabanı yönetimini ve etkileşimleri yöneten yapı (EntityManager) ve belirli veritabanı tablolarını temsil eden varlıklar (Entity).
Repository - Model: Veri erişim katmanını sağlayan yapı (Repository) ve işlenebilir veri modelleri (Model).
Entity Framework Core bağlamında en çok benzeyen kavram çifti:

DbContext - DbSet: Veritabanı bağlantısını ve işlemlerini yöneten yapı (DbContext) ve belirli veritabanı tablolarını temsil eden koleksiyon (DbSet).
Yukarıdaki ikililer arasında doğrudan birebir eşleşen kavramlar bulunmamakla birlikte, Entity Framework Core'daki DbContext ve DbSet kavramlarının EntityManager ve Entity kavramlarına oldukça benzer olduğunu söyleyebiliriz.

Özetle:

DbContext ≈ EntityManager
DbSet ≈ Entity
Bu ikililer, ORM sistemlerinde veritabanı işlemlerini ve veritabanı tablolarını temsil eder.
.................
Migration kodlarının SQL script'ini almak için Entity Framework Core'da Script-Migration komutunu kullanabilirsiniz. Bu komut, migration'ların oluşturduğu SQL komutlarını bir dosya olarak almanızı sağlar
.................
Action method’lara parametre olarak geçilen complex type’rın default model binding tipi Form ya da request'in bodysidir.? - kesin değil bu bilgi.
.................
AddSingleton ile nesne üretirsek hep aynı nesne ile işlem olur program kapanana kadar.
....................,
Request’in Header’ından data almak için [FromHeader] attribute'u kullanılır.

Örnek olarak, bir action method'un header'dan veri alması şu şekilde yapılabilir:

public IActionResult MyAction([FromHeader] string myHeaderValue)
{
    // myHeaderValue, request header'ından alınan değeri içerir
    return View();
}
Bu şekilde, myHeaderValue parametresi HTTP request header'ından gelen değeri alır..
.........................................
Ef core ilişkisel veritabanları ile çalışır.
............................................
ASP.NET Core'da model binding için kullanılan çeşitli attribute'lar bulunmaktadır. İşte yaygın olarak kullanılan model binding attribute'ları ve işlevleri:

[FromQuery]: Query string'den veri almak için kullanılır.
[FromRoute]: Route verilerinden veri almak için kullanılır.
[FromBody]: HTTP request gövdesinden veri almak için kullanılır.
[FromHeader]: HTTP request header'ından veri almak için kullanılır.
[FromForm]: Form verilerinden veri almak için kullanılır.
[FromServices]: Dependency Injection ile servisten veri almak için kullanılır.
Bu attribute'lar, ASP.NET Core'da model binding için kullanılır ve her biri belirli bir kaynaktan veri almayı sağlar. Toplamda 6 tane yaygın olarak kullanılan model binding attribute'u vardır.
..................................................




..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
ASP MVC 301.

Form elements: bölüm içerikleri:
    Text
    Radio
    Checkbox
    Select
    Label
    Datetime

Text(Form elements):  Form Elements Input-Css. Form elemanlarından input ve input taglarına css eklemek için bootstrap konusu anlatılmaktadır.


        @{
            ViewData["Title"] = "Add";
        }
        @model Product

        <h1>EKLEME</h1>

        <form asp-controller="Products" asp-action="Add" method="post">


            <div class="mb-3">
                <label for="Name" class="form-label">Ürün ismi:</label>
                <input class="form-control" asp-for="Name">
                
            </div>

                <div class="mb-3">
                <label for="Name" class="form-label">Ürün fiyat:</label>
                <input class="form-control" asp-for="Price">
                
            </div>

            <div class="mb-3">
                <label for="Name" class="form-label">Ürün Stok:</label>
                <input class="form-control" asp-for="Stock">

            </div>


            <div class="mb-3">
                <label for="Name" class="form-label">Ürün Renk:</label>
                <input class="form-control" asp-for="Color">

            </div>


            <button type = "submit">Ürün Kaydet</button>

        </form>

bootstrapten parçalar alarak bir sistem inşa ettik.


Form Elements Input-Checkbox. Form elemanlarından input checkbox tipi anlatılmaktadır.


                @{
                    ViewData["Title"] = "Add";
                }
                @model Product

                <h1>EKLEME</h1>

                <form asp-controller="Products" asp-action="Add" method="post">


                    <div class="mb-3">
                        <label for="Name" class="form-label">Ürün ismi:</label>
                        <input class="form-control" asp-for="Name">
                        
                    </div>

                        <div class="mb-3">
                        <label for="Name" class="form-label">Ürün fiyat:</label>
                        <input class="form-control" asp-for="Price"> @*asp-for gibi tag helperlere verdiğimiz verilere göre zaten asp kendisi tipini belirliyor. eksrta olarka tip belirtmemize gerek yok ama bazen default olarak gelen tipi ezmemiz gerekebilir. o zaman type = "text" gibi ezmemiz lazım.*@
                        
                    </div>

                    <div class="mb-3">
                        <label for="Name" class="form-label">Ürün Stok:</label>
                        <input type ="" class="form-control" asp-for="Stock">

                    </div>


                    <div class="mb-3">
                        <label for="Name" class="form-label">Ürün Renk:</label>
                        <input class="form-control" asp-for="Color">

                    </div>


                    <div class="form-check">
                        <input class="form-check-input" asp-for="IsPublish">
                        <label class="form-check-label" for="flexCheckDefault">
                            Yayınlansın mı?
                        </label>
                    </div> @*asp-for ile nereye gideceğine karar verdik ve bootstraptan aldığımız checksleri yerleştirdik. asp-for ile bir veri girişi belirlersek o zaten typeını otomatik belirliyor. boolean tip olduğunu bilecek. 
                    *@



                    <button type="submit" class="btn btn-primary">Ürün Kaydet</button> @*class="btn btn-primary" bunu bootstrap sitesinden aldık mesela ve bunu ekleyerek butona bir tip ekledik.*@

                </form>


        ..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
        Form Elements Input-Radio. Form elemanlarından input radio tipi anlatılmaktadır.


        @{
            ViewData["Title"] = "Add";
        }
        @model Product

        <h1>EKLEME</h1>

        <form asp-controller="Products" asp-action="Add" method="post">


            <div class="mb-3">
                <label for="Name" class="form-label">Ürün ismi:</label>
                <input class="form-control" asp-for="Name">
                
            </div>

                <div class="mb-3">
                <label for="Name" class="form-label">Ürün fiyat:</label>
                <input class="form-control" asp-for="Price"> @*asp-for gibi tag helperlere verdiğimiz verilere göre zaten asp kendisi tipini belirliyor. eksrta olarka tip belirtmemize gerek yok ama bazen default olarak gelen tipi ezmemiz gerekebilir. o zaman type = "text" gibi ezmemiz lazım.*@
                
            </div>

            <div class="mb-3">
                <label for="Name" class="form-label">Ürün Stok:</label>
                <input type ="" class="form-control" asp-for="Stock">

            </div>


            <div class="mb-3">
                <label for="Name" class="form-label">Ürün Renk:</label>
                <input class="form-control" asp-for="Color">

            </div>


            <div class="form-check">
                <input class="form-check-input" asp-for="IsPublish">
                <label class="form-check-label" for="flexCheckDefault">
                    Yayınlansın mı?
                </label>
            </div> @*asp-for ile nereye gideceğine karar verdik ve bootstraptan aldığımız checksleri yerleştirdik. asp-for ile bir veri girişi belirlersek o zaten typeını otomatik belirliyor. boolean tip olduğunu bilecek. 
            *@




            @foreach (var item in ViewBag.Expire as List<string>)
            { @*as List<string> ile tipini tam olarak belirtmemiz lazım.*@

                <div class="form-check">
                    <input class="form-check-input" type="radio" asp-for="Expire" value="@item"> @*Value değerini ekledik.*@
                    <label class="form-check-label" for="flexRadioDefault1">
                    @item
                    </label>
                </div>

            }


            <button type="submit" class="btn btn-primary">Ürün Kaydet</button> @*class="btn btn-primary" bunu bootstrap sitesinden aldık mesela ve bunu ekleyerek butona bir tip ekledik.*@

        </form>

................................



            @{
                ViewData["Title"] = "Add";
            }
            @model Product

            <h1>EKLEME</h1>

            <form asp-controller="Products" asp-action="Add" method="post">


                <div class="mb-3">
                    <label for="Name" class="form-label">Ürün ismi:</label>
                    <input class="form-control" asp-for="Name">
                    
                </div>

                    <div class="mb-3">
                    <label for="Name" class="form-label">Ürün fiyat:</label>
                    <input class="form-control" asp-for="Price"> @*asp-for gibi tag helperlere verdiğimiz verilere göre zaten asp kendisi tipini belirliyor. eksrta olarka tip belirtmemize gerek yok ama bazen default olarak gelen tipi ezmemiz gerekebilir. o zaman type = "text" gibi ezmemiz lazım.*@
                    
                </div>

                <div class="mb-3">
                    <label for="Name" class="form-label">Ürün Stok:</label>
                    <input type ="" class="form-control" asp-for="Stock">

                </div>


                <div class="mb-3">
                    <label for="Name" class="form-label">Ürün Renk:</label>
                    <input class="form-control" asp-for="Color">

                </div>


                <div class="form-check">
                    <input class="form-check-input" asp-for="IsPublish">
                    <label class="form-check-label" for="flexCheckDefault">
                        Yayınlansın mı?
                    </label>
                </div> @*asp-for ile nereye gideceğine karar verdik ve bootstraptan aldığımız checksleri yerleştirdik. asp-for ile bir veri girişi belirlersek o zaten typeını otomatik belirliyor. boolean tip olduğunu bilecek. 
                *@



                <div class="mb-3 mt-3"> @*mt-3 ekledik 3 tab boşluk bırakır.*@
                    <span>Ürün kaç ay satışta kalacak ?</span>
                @foreach (var item in ViewBag.Expire as Dictionary<string,int>)
                { 

                    <div class="form-check">
                        <input class="form-check-input" type="radio" asp-for="Expire" value="@item.Value"> @*Value değerini ekledik.*@
                        <label class="form-check-label" for="flexRadioDefault1">
                        @item.Key
                        </label>
                    </div>

                }
                </div>

                <button type="submit" class="btn btn-primary">Ürün Kaydet</button> @*class="btn btn-primary" bunu bootstrap sitesinden aldık mesela ve bunu ekleyerek butona bir tip ekledik.*@

            </form>


Form Elements Label. Form elemanlarından input label tipi anlatılmaktadır.

mesela illa kutucuğa değilde yazıya tıklayınca seçili olsun istersek...




@{
    ViewData["Title"] = "Add";
}
@model Product

<h1>EKLEME</h1>

<form asp-controller="Products" asp-action="Add" method="post">


    <div class="mb-3">
        <label asp-for="Name" class="form-label">Ürün ismi:</label>
        <input class="form-control" asp-for="Name">
        
    </div>


        <div class="mb-3">
        <label asp-for="Price" class="form-label">Ürün fiyat:</label>
        <input class="form-control" asp-for="Price"> @*asp-for gibi tag helperlere verdiğimiz verilere göre zaten asp kendisi tipini belirliyor. eksrta olarka tip belirtmemize gerek yok ama bazen default olarak gelen tipi ezmemiz gerekebilir. o zaman type = "text" gibi ezmemiz lazım.*@
        
    </div>

    <div class="mb-3">
        <label asp-for="Stock" class="form-label">Ürün Stok:</label>
        <input type ="" class="form-control" asp-for="Stock">

    </div>


    <div class="mb-3">
        <label asp-for="Color" class="form-label">Ürün Renk:</label>
        <input class="form-control" asp-for="Color">

    </div>


    <div class="form-check">
        <input class="form-check-input" asp-for="IsPublish">
        <label class="form-check-label" asp-for="IsPublish">
            Yayınlansın mı?
        </label>
    </div> @*asp-for ile nereye gideceğine karar verdik ve bootstraptan aldığımız checksleri yerleştirdik. asp-for ile bir veri girişi belirlersek o zaten typeını otomatik belirliyor. boolean tip olduğunu bilecek. 
    *@



    <div class="mb-3 mt-3"> @*mt-3 ekledik 3 tab boşluk bırakır.*@
        <span>Ürün kaç ay satışta kalacak ?</span>
    @foreach (var item in ViewBag.Expire as Dictionary<string,int>)
    { 

        <div class="form-check">
            <input class="form-check-input" type="radio" id ="@(item.Value)Expire" asp-for="Expire" value="@item.Value"> @*Value değerini ekledik.*@
                <label class="form-check-label" asp-for="Expire" for="@(item.Value)Expire">
               @item.Key
            </label>
        </div>

    }
    </div>

    <button type="submit" class="btn btn-primary">Ürün Kaydet</button> @*class="btn btn-primary" bunu bootstrap sitesinden aldık mesela ve bunu ekleyerek butona bir tip ekledik.*@

</form>


forları değiştirdik ve asp-for ile değiştirdik böylece yazıya tıklasak bile seçim yapabileceğiz.

.............................................

@{
    ViewData["Title"] = "Index";
}
@model List<Product>
<h1>Ürünler</h1>

@if(TempData["status"] != null)
{
    <div class="alert alert-primary" role="alert">
        @TempData["status"] @*TempData bir kere görüntülenecek sonra içindeki veri null olacak.*@

    </div>

}







<a asp-controller="products" asp-action="Add">Ürün ekle</a>
<table class="table">

    <thead>
        <tr>
        <th>ID</th>
        <th>NAME</th>
        <th>PRICE</th>
            <th>STOCK</th>
         <th>RENK</th>
            <th>YATINLANSIN MI</th>
            <th>YAYINDA KALMA SÜRESİ</th>
            <th></th>
        </tr>
    </thead>
    <tbody>

    @foreach(var item in Model){
        <tr>
            <td>@item.Id</td>
            <td>@item.Name</td>
            <td>@item.Price</td>
            <td>@item.Stock</td>
            <td>@item.Color</td>
                <td>

                    @if(@item.IsPublish){
                        <text>EVET</text>
                    }
                    else
                    {
                        <text>HAYIR</text>

                    }


                </td>

                <td>@item.Expire</td>


                <td><a asp-controller="products" asp-action="Remove" asp-route-id="@item.Id">SİL</a>

                    <a asp-controller="products" asp-action="Update" asp-route-id="@item.Id">GÜNCELLE</a>
                
       
                    


                </td>

        </tr>
    }
    </tbody>


</table>



Form Elements Textarea. Form elemanlarından input textarea tipi anlatılmaktadır.

kullanıcıdan birden fazla satırda veri almak istersek kullanacağımız form elemanı.



@{
    ViewData["Title"] = "Add";
}
@model Product

<h1>EKLEME</h1>

<form asp-controller="Products" asp-action="Add" method="post">


    <div class="mb-3">
        <label asp-for="Name" class="form-label">Ürün ismi:</label>
        <input class="form-control" asp-for="Name">
        
    </div>


        <div class="mb-3">
        <label asp-for="Price" class="form-label">Ürün fiyat:</label>
        <input class="form-control" asp-for="Price"> @*asp-for gibi tag helperlere verdiğimiz verilere göre zaten asp kendisi tipini belirliyor. eksrta olarka tip belirtmemize gerek yok ama bazen default olarak gelen tipi ezmemiz gerekebilir. o zaman type = "text" gibi ezmemiz lazım.*@
        
    </div>

    <div class="mb-3">
        <label asp-for="Stock" class="form-label">Ürün Stok:</label>
        <input type ="" class="form-control" asp-for="Stock">

    </div>


    <div class="mb-3">
        <label asp-for="Color" class="form-label">Ürün Renk:</label>
        <input class="form-control" asp-for="Color">

    </div>


    <div class="form-check">
        <input class="form-check-input" asp-for="IsPublish">
        <label class="form-check-label" asp-for="IsPublish">
            Yayınlansın mı?
        </label>
    </div> @*asp-for ile nereye gideceğine karar verdik ve bootstraptan aldığımız checksleri yerleştirdik. asp-for ile bir veri girişi belirlersek o zaten typeını otomatik belirliyor. boolean tip olduğunu bilecek. 
    *@



    <div class="mb-3 mt-3"> @*mt-3 ekledik 3 tab boşluk bırakır.*@
        <span>Ürün kaç ay satışta kalacak ?</span>
    @foreach (var item in ViewBag.Expire as Dictionary<string,int>)
    { 

        <div class="form-check">
            <input class="form-check-input" type="radio" id ="@(item.Value)Expire" asp-for="Expire" value="@item.Value"> @*Value değerini ekledik.*@
                <label class="form-check-label" asp-for="Expire" for="@(item.Value)Expire">
               @item.Key
            </label>
        </div>

    }
    </div>

    <div class="form-floating mb-3">
        <textarea asp-for = "Description" class="form-control" placeholder="Ürün açıklama" style="height: 100px"></textarea>
        <label asp-for="Description">Ürün açıklama</label>
    </div>



    <button type="submit" class="btn btn-primary">Ürün Kaydet</button> @*class="btn btn-primary" bunu bootstrap sitesinden aldık mesela ve bunu ekleyerek butona bir tip ekledik.*@

</form>
.................................
                <td>
                    @if(@item.Description.Length > 20){
                        @item.Description.Substring(0,20)<text>...</text>
                    }
                    else
                    {
                        @item.Description
                    }


                </td>
@*if bloğu kullanabiliriz böylece... ve substring metotunuda kullanabiliriz...*@                
................................
@{
    ViewData["Title"] = "Index";
}
@model List<Product>
<h1>Ürünler</h1>

@if(TempData["status"] != null)
{
    <div class="alert alert-primary" role="alert">
        @TempData["status"] @*TempData bir kere görüntülenecek sonra içindeki veri null olacak.*@

    </div>

}


<a asp-controller="products" asp-action="Add">Ürün ekle</a>
<table class="table">

    <thead>
        <tr>
        <th>ID</th>
        <th>NAME</th>
        <th>PRICE</th>
            <th>STOCK</th>
         <th>RENK</th>
            <th>YATINLANSIN MI</th>
            <th>YAYINDA KALMA SÜRESİ(AY)</th>
            <th>AÇIKLAMA</th>
            <th></th>
        </tr>
    </thead>
    <tbody>

    @foreach(var item in Model){
        <tr>
            <td>@item.Id</td>
            <td>@item.Name</td>
            <td>@item.Price</td>
            <td>@item.Stock</td>
            <td>@item.Color</td>
                <td>

                    @if(@item.IsPublish){
                        <text>EVET</text>
                    }
                    else
                    {
                        <text>HAYIR</text>

                    }


                </td>

                <td>@item.Expire</td>
                <td>
                    @if(@item.Description.Length > 20){
                        @item.Description.Substring(0,20)<text>...</text>
                    }
                    else
                    {
                        @item.Description
                    }


                </td>


                <td><a asp-controller="products" asp-action="Remove" asp-route-id="@item.Id">SİL</a>

                    <a asp-controller="products" asp-action="Update" asp-route-id="@item.Id">GÜNCELLE</a>
                
       
                    


                </td>

        </tr>
    }
    </tbody>


</table>

.........................................................................
Form Elements Select-1. Form elemanlarından input select tipi anlatılmaktadır.

select yani comboBoxtan seçim yapmamızı sağlayacak.

     // aslında metotun üstende default olarak bir [HttpGet] var
     [HttpGet]
     public IActionResult Add()
     {

         Dictionary<string, int> Expire = new Dictionary<string, int>()
         {
             { "1 Ay",1},
             { "3 Ay",3},
             { "6 Ay",6},
             { "12 Ay",12}

         };
         ViewBag.Expire = Expire;




        ViewBag.ColorsSelect = new SelectList(new List<ColorSelectList>()
        {
            new () {Data = "Mavi",Value = "Mavi" },
            new () {Data = "Kırmızı",Value = "Kırmızı" },
            new () {Data = "Sarı",Value = "Sarı" }

        },"Value","Data"); // bu sistemi ekledik.



         return View();
     }

........................................... html tarafta gösterme.


@{
    ViewData["Title"] = "Add";
}
@model Product

<h1>EKLEME</h1>

<form asp-controller="Products" asp-action="Add" method="post">


    <div class="mb-3">
        <label asp-for="Name" class="form-label">Ürün ismi:</label>
        <input class="form-control" asp-for="Name">
        
    </div>


        <div class="mb-3">
        <label asp-for="Price" class="form-label">Ürün fiyat:</label>
        <input class="form-control" asp-for="Price"> @*asp-for gibi tag helperlere verdiğimiz verilere göre zaten asp kendisi tipini belirliyor. eksrta olarka tip belirtmemize gerek yok ama bazen default olarak gelen tipi ezmemiz gerekebilir. o zaman type = "text" gibi ezmemiz lazım.*@
        
    </div>


    <div class="mb-3">
        <label asp-for="Stock" class="form-label">Ürün Stok:</label>
        <input type ="" class="form-control" asp-for="Stock">

    </div>


    <div class="mb-3">
     
        @*<label asp-for="Color" class="form-label">Ürün Renk:</label>
        <input class="form-control" asp-for="Color">
        *@

        <select class="form-select" asp-for="Color" asp-items="@ViewBag.ColorSelect">

            <option value="">Renk seçiniz</option>

        </select>
        

    </div>


    <div class="form-check">
        <input class="form-check-input" asp-for="IsPublish">
        <label class="form-check-label" asp-for="IsPublish">
            Yayınlansın mı?
        </label>
    </div> @*asp-for ile nereye gideceğine karar verdik ve bootstraptan aldığımız checksleri yerleştirdik. asp-for ile bir veri girişi belirlersek o zaten typeını otomatik belirliyor. boolean tip olduğunu bilecek. 
    *@



    <div class="mb-3 mt-3"> @*mt-3 ekledik 3 tab boşluk bırakır.*@
        <span>Ürün kaç ay satışta kalacak ?</span>
    @foreach (var item in ViewBag.Expire as Dictionary<string,int>)
    { 

        <div class="form-check">
            <input class="form-check-input" type="radio" id ="@(item.Value)Expire" asp-for="Expire" value="@item.Value"> @*Value değerini ekledik.*@
                <label class="form-check-label" asp-for="Expire" for="@(item.Value)Expire">
               @item.Key
            </label>
        </div>

    }
    </div>

    <div class="form-floating mb-3">
        <textarea asp-for = "Description" class="form-control" placeholder="Ürün açıklama" style="height: 100px"></textarea>
        <label asp-for="Description">Ürün açıklama</label>
    </div>



    <button type="submit" class="btn btn-primary">Ürün Kaydet</button> @*class="btn btn-primary" bunu bootstrap sitesinden aldık mesela ve bunu ekleyerek butona bir tip ekledik.*@

</form>

..........................

  <div class="mb-3">
     
        @*<label asp-for="Color" class="form-label">Ürün Renk:</label>
        <input class="form-control" asp-for="Color">
        *@

        <select class="form-select" asp-for="Color" asp-items="@ViewBag.ColorSelect">

            <option value="">Renk seçiniz</option>

        </select>
        

    </div>

@*bunula yaptık aslında comboBox eklemeyi.*@

.......................................................
Form Elements Datetime. Form elemanlarından input datetime tipi anlatılmaktadır.

Date ile sadece tarihte tutabilirdik.

    <div class="mb-3">
        <label asp-for="PublishDate" class="form-label">Ürün Yayınlanma zamanı:</label>
        <input class="form-control" asp-for="PublishDate">
    </div>




Form Elements Update.cshtml. Ürün güncelleme sayfsının yeni form elemanlarına göre tekrar kodlanması anlatılmaktadır.



        [HttpGet]
        public IActionResult Update(int id)
        {

            var product = _context.Products.Find(id);
            ViewBag.ExpireValue = product.Expire;
            Dictionary<string, int> Expire = new Dictionary<string, int>()
            {
                { "1 Ay",1},
                { "3 Ay",3},
                { "6 Ay",6},
                { "12 Ay",12}

            };
            ViewBag.Expire = Expire;




            ViewBag.ColorsSelect = new SelectList(new List<ColorSelectList>()
           {
               new () {Data = "Mavi",Value = "Mavi" },
               new () {Data = "Kırmızı",Value = "Kırmızı" },
               new () {Data = "Sarı",Value = "Sarı" }

           }, "Value", "Data",product.Color); // seçili olanı getirecek.





            return View(product); // bu sayfaya gittiği zaman sayfadaki @model Product nesneyi alacak ve textleri dolduracak.. 

        }
......................................................Update sayfası.



@{
    ViewData["Title"] = "Update";
}

@model Product

<h1>Ürün Güncelleme</h1>

<form asp-controller="Products" asp-action="Add" method="post">


    <div class="mb-3">
        <label asp-for="Name" class="form-label">Ürün ismi:</label>
        <input class="form-control" asp-for="Name">

    </div>


    <div class="mb-3">
        <label asp-for="Price" class="form-label">Ürün fiyat:</label>
        <input class="form-control" asp-for="Price"> 

    </div>


    <div class="mb-3">
        <label asp-for="Stock" class="form-label">Ürün Stok:</label>
        <input type="" class="form-control" asp-for="Stock">

    </div>


    <div class="mb-3">

        <select class="form-select" asp-for="Color" asp-items="@ViewBag.ColorSelect">

            <option value="">Renk seçiniz</option>

        </select>

    </div>


    <div class="form-check">
        <input class="form-check-input" asp-for="IsPublish">
        <label class="form-check-label" asp-for="IsPublish">
            Yayınlansın mı?
        </label>
    </div> 



    <div class="mb-3 mt-3">
        
        <span>Ürün kaç ay satışta kalacak ?</span>
        @foreach (var item in ViewBag.Expire as Dictionary<string, int>)
        {
            <div class="form-check">


            @if (item.Value == ViewBag.ExpireValue)
            {
                    <input checked = "checked" class="form-check-input" type="radio" id="@(item.Value)Expire" asp-for="Expire" value="@item.Value">
                }
                else
                {
                    <input class="form-check-input" type="radio" id="@(item.Value)Expire" asp-for="Expire" value="@item.Value">
                }

                <label class="form-check-label" asp-for="Expire" for="@(item.Value)Expire">
                    @item.Key
                </label>

            </div>


                
                

        }
    </div>

    <div class="form-floating mb-3">
        <textarea asp-for="Description" class="form-control" placeholder="Ürün açıklama" style="height: 100px"></textarea>
        <label asp-for="Description">Ürün açıklama</label>
    </div>



    <div class="mb-3">
        <label asp-for="PublishDate" class="form-label">Ürün Yayınlanma zamanı:</label>
        <input class="form-control" asp-for="PublishDate">

    </div>


    <button type="submit" class="btn btn-primary">Ürün Kaydet</button> 

</form>





Bölüm içerik :
        Server side validation
        Required
        Range
        StringLength
        EmaiIAddress
        Remote
        ReqularExpression
        Client side validation (arayüzde denetim yapacak böylece veritabanını yormayacak).

ViewModel. View sayfalarında kullanılacak ViewModel yapısı anlatılmaktadır.

ViewModel Viewler için Model oluşturmadır. entityler yerine entitylere karşılık gelecek viewmodel yapacağız ve entityleri kirletmeyeceğiz. ve entity'nin içini açmak istemeyebiliriz ve viewmodelde onu sileriz kimsenin görmesini istemediğimiz bir yapı olabilir.
tam olarak cshtml'in ihtiyacı olan verileri dönebiliriz boşu boşuna kullanılmayacak dataları taşıma işlemi yapmayız.

 hep ViewModel'lerle çalışacağız genel olarak.

ProductViewModel adında bir klasör oluşturduk. sonra ProductViewModel adında bir class oluşturduk. sonra göstermek istediğimiz propertyleri alıp Product class'ından bu class'a ekledik.
            namespace turkcell1.Web.ProductViewModel
            {

                public class ProductViewModel
                {

                    public int Id { get; set; }
                    public string Name { get; set; }

                    public decimal Price { get; set; }

                    public int Stock { get; set; }

                    public string Description { get; set; }
                    public string? Color
                    {
                        get;
                        set;
                    }

                    public DateTime? PublishDate { get; set; } // null olabilir seçeneği veririz ? ile var olan veriler içinde null verecek.

                    public bool IsPublish { get; set; }

                    public int Expire { get; set; }


                }
            }


Automapper ile entityleri otomatik olarak ViewModel'lere çeviren bir kütüphane kullanacağız. Entity ile ViewModel sınıflarını otomatik map'leme işlevini gerçekleştirecek automapper kütüphanesinin kullanılması anlatılmaktadır.
bizim entityleri viewmodellere otomatik olarak mapleyecek. bir bir entity listesi verdiğimde bir viewmodel listesi verecek bize.
entityde propları viewmodel'e aktarır. new ile oluşturmamıza gerek yok automapper otomatik olarak yapar.

kurulum: dependies sağ tık. manage nuget packagesi seçiyoruz. oradan automapperi aratıp yüklüyoruz. AutoMapper.Extensions.Microsoft.DependencyInjection bunu indirdik. asp net core için.
sonra Program.cs'e 
builder.Services.AddAutoMapper(Assembly.GetExecutingAssembly());  bunu ekledik.
sonra projemize mapping adında klasör ekledik. sonra ViewModelMapping.cs adında bir class ekledik bu klasöre ve class :Profile ile Profile'den kalıtım aldı.




using AutoMapper;
using turkcell1.Web.Models;
using turkcell1.Web.ViewModels;

namespace turkcell1.Web.Mapping
{
    public class ViewModelMapping:Profile
    {
        public ViewModelMapping()
        {
            CreateMap<Product, ProductViewModel>().ReverseMap(); // ReverseMap ile ters maplemede yapabiliriz.
             



        }
    }
}


..........................
// Products controllerde         private readonly IMapper _mapper; bunu ekledik sonra constructor içeriisne ekleme yaptık.

        private readonly IMapper _mapper;

        public ProductsController(AppDbContext context, IHelper helper, IMapper mapper)
        {
            // DI container.
            _productRepository = new ProductRepository();
            // Dependies injection pattern bir design patterndir.
            _context = context;
            _mapper = mapper;
        }

............................. sonra prodcutcontrollerdeki index IActionResult'undaki return View(_products) 'ı değiştirdik.;

        public IActionResult Index()
        { 

            var products = _context.Products.ToList(); // veritabanındaki tüm dataları almış oluruz böylece.

            return View(_mapper.Map<List<ProductViewModel>>(products));


        }

....................................

ASP.NET'te bir mapper kullanmak, nesneler arasında veri dönüşümünü kolaylaştıran bir araç veya kütüphane anlamına gelir. Özellikle, veritabanı varlıkları (entities) ve veri transfer nesneleri (DTO'lar) gibi farklı veri yapıları arasında veri taşımak için kullanılır. Mapper kullanmanın bazı ana nedenleri şunlardır:

1. Kod Tekrarını Azaltmak
Nesneler arasında veri taşımak, genellikle çok sayıda benzer kod satırı gerektirir. Mapper kullanmak, bu dönüşüm işlemlerini otomatikleştirerek kod tekrarını azaltır.

2. Kod Bakımını Kolaylaştırmak
Mapper kullanmak, veri dönüşüm mantığını merkezi bir yerde tutar. Bu, veri dönüşüm kurallarını değiştirmek gerektiğinde kodun diğer kısımlarını güncelleme ihtiyacını azaltır.

3. Performans İyileştirmesi
Otomatik dönüşümler manuel dönüşümlere göre daha hızlı olabilir. Ayrıca, iyi optimize edilmiş bir mapper kütüphanesi, performans sorunlarını minimumda tutabilir.

4. Kodun Anlaşılabilirliğini Artırmak
Mapper kullanmak, veri dönüşüm mantığını netleştirir ve kodun genel yapısını daha anlaşılabilir hale getirir. Bu, özellikle büyük projelerde ve ekip çalışmalarında önemlidir.

5. Model-View-Controller (MVC) Yapısını Desteklemek
ASP.NET Core gibi MVC tabanlı frameworklerde, veritabanı modelleri ve görünüm modelleri arasında veri taşımak yaygındır. Mapper kullanmak, bu veri taşımayı standartlaştırır ve kolaylaştırır.

Popüler Mapper Kütüphaneleri
AutoMapper
ASP.NET projelerinde en yaygın kullanılan mapper kütüphanelerinden biri AutoMapper'dir. AutoMapper, nesneler arasında veri taşımayı kolaylaştıran ve konfigurasyonunu kolayca yapabileceğiniz bir kütüphanedir.

AutoMapper Kullanımına Bir Örnek
Adım 1: AutoMapper'i Kurun
AutoMapper'i NuGet üzerinden projenize ekleyin:


Install-Package AutoMapper
Adım 2: Mapper Konfigürasyonunu Yapın
Örnek olarak, User ve UserDto sınıflarını kullanarak AutoMapper konfigürasyonunu gösterelim:


using AutoMapper;

// Modeller
public class User
{
    public int Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
}

public class UserDto
{
    public int Id { get; set; }
    public string FullName { get; set; }
}

// AutoMapper Profili
public class UserProfile : Profile
{
    public UserProfile()
    {
        CreateMap<User, UserDto>()
            .ForMember(dest => dest.FullName, opt => opt.MapFrom(src => $"{src.FirstName} {src.LastName}"));
    }
}

Adım 3: AutoMapper'i Başlatın
ASP.NET Core uygulamanızın Startup dosyasında AutoMapper'i başlatın:


public void ConfigureServices(IServiceCollection services)
{
    services.AddAutoMapper(typeof(Startup));
}

Adım 4: Mapper Kullanımı
Bir kontrolörde veya hizmette (service) AutoMapper'i kullanarak veri dönüşümü gerçekleştirin:

public class UserService
{
    private readonly IMapper _mapper;

    public UserService(IMapper mapper)
    {
        _mapper = mapper;
    }

    public UserDto GetUserDto(User user)
    {
        return _mapper.Map<UserDto>(user);
    }
}
Sonuç
Mapper kullanmak, ASP.NET projelerinde veri dönüşümlerini daha temiz, bakımı daha kolay ve performans açısından daha verimli hale getirir. AutoMapper gibi kütüphaneler, bu dönüşümleri basitleştirir ve standartlaştırır, böylece geliştiricilerin daha az hata yapmasını ve kodlarının daha okunabilir olmasını sağlar.



Model/Form Validation Required. Form Validation işlemlerinde kullanılacak Required attribute konusu anlatılmaktadır.
Validation kullanıcıdan aldığımız bilgileri kontrol etmemizi sağlar. asp.net ile otomatik olarak gelir validation özelliği.
validationları attributesler olarak kullanırız. model veya form validation denir. kullanıcıdan alınan datayı valide edebiliriz yani kontrol edebiliriz.
validationın hem client hem server kısmı var.
server olanda önce veriler servera gelir sonra kontrol edilir. clientta ise servera gelmeden arayüzde kontrol edilir.
.....................
required alan bir verinin girilme zorunluluğu olduğu alandır.

using System.ComponentModel.DataAnnotations;

namespace turkcell1.Web.ViewModels
{
    public class ProductViewModel
    {

        public int Id { get; set; }

        [Required] // doldurulması zorunlu alan olarak belirleriz.

        public string Name { get; set; }

        public decimal Price { get; set; }

        public int Stock { get; set; }

        public string Description { get; set; }
        public string? Color
        {
            get;
            set;
        }

        public DateTime? PublishDate { get; set; } // null olabilir seçeneği veririz ? ile var olan veriler içinde null verecek.

        public bool IsPublish { get; set; }

        public int Expire { get; set; }


    }
}

............................

@{
    ViewData["Title"] = "Add";
}
@model ProductViewModel

<h1>EKLEME</h1>

<form asp-controller="Products" asp-action="Add" method="post">


    <div class="mb-3">
        <label asp-for="Name" class="form-label">Ürün ismi:</label>
        <input class="form-control" asp-for="Name">
        <span class = "text-danger" asp-validation-for="Name"></span>
        @*Name ile ilgili bir validation problem olduğunda burada hata olduğunu belirten bir yapı olacak.*@
       @* class = "text-danger" ile uyarı mesajı gözükecek.*@
    </div>

...............................Products controllerdeki metot.


        [HttpPost] 
        public IActionResult Add(ProductViewModel newProduct) {


            if (ModelState.IsValid) // eğer validationdan geçmiş bir değer ise o zaman kaydet sistemi kurabiliriz.
            {
                _context.Products.Add(_mapper.Map<Product>(newProduct));

                _context.SaveChanges();


                TempData["status"] = "Ürün başarı ile eklendi.";


                return RedirectToAction("Index");
            }
            else
            {
                            Dictionary<string, int> Expire = new Dictionary<string, int>()
            {
                { "1 Ay",1},
                { "3 Ay",3},
                { "6 Ay",6},
                { "12 Ay",12}

            };
            ViewBag.Expire = Expire;




           ViewBag.ColorsSelect = new SelectList(new List<ColorSelectList>()
           {
               new () {Data = "Mavi",Value = "Mavi" },
               new () {Data = "Kırmızı",Value = "Kırmızı" },
               new () {Data = "Sarı",Value = "Sarı" }

           },"Value","Data");

                return View();
            }



        }

........................................

        [Required(ErrorMessage ="İsim alanı boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.

        public string Name { get; set; }

// böyle yaparsak eğer o zaman istediğimiz error messageyi kullanabiliriz.
// ÖNEMLİ... [Required] kullanacaksak eğer bir properity ve o properity value type ise int,decimal gibi o zaman nullable yapmamız lazım. mesela boolean default tipi False'dir o yüzden bunları boolean? ile nullable yapmamız lazım. ama string için vs gerekli değil.

using System.ComponentModel.DataAnnotations;

namespace turkcell1.Web.ViewModels
{
    public class ProductViewModel
    {

        public int Id { get; set; }

        [Required(ErrorMessage ="İsim alanı boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.

        public string Name { get; set; }

        [Required(ErrorMessage = "Fiyat alanı boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.
        public decimal? Price { get; set; }

        [Required(ErrorMessage = "Stok alana boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.
        public int? Stock { get; set; }
        [Required(ErrorMessage = "Açıklama boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.
        public string Description { get; set; }

        public string? Color
        {
            get;
            set;
        }


        public DateTime? PublishDate { get; set; } // null olabilir seçeneği veririz ? ile var olan veriler içinde null verecek.

        public bool IsPublish { get; set; }

        public int Expire { get; set; }


    }
}

.............................Sonra Products Add.cshtml'de span taglarını ekledik uyarın gözükmesini istediğimiz yerlerde.


@{
    ViewData["Title"] = "Add";
}
@model ProductViewModel

<h1>EKLEME</h1>

<form asp-controller="Products" asp-action="Add" method="post">


    <div class="mb-3">
        <label asp-for="Name" class="form-label">Ürün ismi:</label>
        <input class="form-control" asp-for="Name">
        <span class = "text-danger" asp-validation-for="Name"></span>
    </div>



        <div class="mb-3">
        <label asp-for="Price" class="form-label">Ürün fiyat:</label>
        <input class="form-control" asp-for="Price"> @*asp-for gibi tag helperlere verdiğimiz verilere göre zaten asp kendisi tipini belirliyor. eksrta olarka tip belirtmemize gerek yok ama bazen default olarak gelen tipi ezmemiz gerekebilir. o zaman type = "text" gibi ezmemiz lazım.*@
        <span class="text-danger" asp-validation-for="Price"></span>
    </div>


    <div class="mb-3">
        <label asp-for="Stock" class="form-label">Ürün Stok:</label>
        <input type ="" class="form-control" asp-for="Stock">
        <span class="text-danger" asp-validation-for="Stock"></span>
    </div>


    <div class="mb-3">
     
        @*<label asp-for="Color" class="form-label">Ürün Renk:</label>
        <input class="form-control" asp-for="Color">
        *@

        <select class="form-select" asp-for="Color" asp-items="@ViewBag.ColorSelect">

            <option value="">Renk seçiniz</option>

        </select>
        

    </div>


    <div class="form-check">
        <input class="form-check-input" asp-for="IsPublish">
        <label class="form-check-label" asp-for="IsPublish">
            Yayınlansın mı?
        </label>
    </div> @*asp-for ile nereye gideceğine karar verdik ve bootstraptan aldığımız checksleri yerleştirdik. asp-for ile bir veri girişi belirlersek o zaten typeını otomatik belirliyor. boolean tip olduğunu bilecek. 
    *@



    <div class="mb-3 mt-3"> @*mt-3 ekledik 3 tab boşluk bırakır.*@
        <span>Ürün kaç ay satışta kalacak ?</span>
    @foreach (var item in ViewBag.Expire as Dictionary<string,int>)
    { 

        <div class="form-check">
            <input class="form-check-input" type="radio" id ="@(item.Value)Expire" asp-for="Expire" value="@item.Value"> @*Value değerini ekledik.*@
                <label class="form-check-label" asp-for="Expire" for="@(item.Value)Expire">
               @item.Key
            </label>
        </div>

    }
    </div>

    <div class="form-floating mb-3">
        <textarea asp-for = "Description" class="form-control" placeholder="Ürün açıklama" style="height: 100px"></textarea>
        <label asp-for="Description">Ürün açıklama</label>
        <span class="text-danger" asp-validation-for="Description"></span>
    </div>



    <div class="mb-3">
        <label asp-for="PublishDate" class="form-label">Ürün Yayınlanma zamanı:</label>
        <input class="form-control" asp-for="PublishDate">

    </div>


    <button type="submit" class="btn btn-primary">Ürün Kaydet</button> @*class="btn btn-primary" bunu bootstrap sitesinden aldık mesela ve bunu ekleyerek butona bir tip ekledik.*@

</form>


Model/Form Validation Range. Form Validation işlemlerinde kullanılacak Range attribute konusu anlatılmaktadır.
Range attributesi bir sayısal değerin belli bir değer aralığında olup olmadığını belirleyebiliriz...


        [Required(ErrorMessage = "Stok alana boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.
        [Range(1,200,ErrorMessage = "Stok belli alanda olmalı..")] // belli bir aralıkta olmasını sağlarız başlangıç ve bitiş. ve bu şartlar sağlnazmasa o zaman gelecek hata mesajını belirleriz.
        public int? Stock { get; set; }
        // ProductViewModel class'ı içerisi...

    <div class="mb-3">
        <label asp-for="Stock" class="form-label">Ürün Stok:</label>
        <input type ="number" class="form-control" asp-for="Stock">
        <span class="text-danger" asp-validation-for="Stock"></span>
    </div>
    @*add.cshtml içerisi type = "number olarak belirledik."*@

........


        [Required(ErrorMessage = "Fiyat alanı boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.
        [Range(1,1000,ErrorMessage = "Fiyat alanı belli aralıkta olmalı.")]
        public decimal? Price { get; set; }
 

        <div class="mb-3">
        <label asp-for="Price" class="form-label">Ürün fiyat:</label>
        <input class="form-control" asp-for="Price">
        <span class="text-danger" asp-validation-for="Price"></span>
    </div>
    @*decimal olduğu için biz bunu type = "number" yapamayız yoksa ondalıklı sayı giremeyiz.*@



Model/Form Validation StringLength. Form Validation işlemlerinde kullanılacak StringLength attribute konusu anlatılmaktadır.
bir yazının uzunluğu için kullanırız...


        [Required(ErrorMessage ="İsim alanı boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.
        [StringLength(50,ErrorMessage ="İsim alanı en fazla 50 karakter olur...")]
        public string Name { get; set; }

...min uzunluk için ise 

        [Required(ErrorMessage ="İsim alanı boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.
        [StringLength(50,MinimumLength =1,ErrorMessage ="İsim alanı en fazla 50 karakter olur...")]
        public string Name { get; set; }

    <div class="mb-3">
        <label asp-for="Name" class="form-label">Ürün ismi:</label>
        <input class="form-control" asp-for="Name">
        <span class = "text-danger" asp-validation-for="Name"></span>
    </div>
    @*aynen kullandık. bir değişim yapmadık.*@ 


Model/Form Validation EmailAddress. Form Validation işlemlerinde kullanılacak EmailAddress attribute konusu anlatılmaktadır.
email adresi için gerekli kısıtlamaları göreceğiz... email doğrulama için kullanırız.

        [EmailAddress(ErrorMessage ="Email geçersiz.")]
        public string EmailAdress { get; set; }
        //ProductViewModel...

   <div class="mb-3">
       <label asp-for="EmailAdress" class="form-label">Email adresi:</label>
       <input type = "text" class="form-control" asp-for="EmailAdress">
       <span class="text-danger" asp-validation-for="EmailAdress"></span>
   </div>
   @*Products-Add.cshtml*@


Model/Form Validation ReqularExpression. Form Validation işlemlerinde kullanılacak ReqularExpression attribute konusu anlatılmaktadır.
ReqularExpression herhangi bir değeri karşılaştırmamızı sağlar.

hello ---	contains {hello}
gray|grey ---	contains {gray, grey}
gr(a|e)y ---	contains {gray, grey}
gr[ae]y ---	contains {gray, grey}
b[aeiou]bble ---	contains {babble, bebble, bibble, bobble, bubble}
[b-chm-pP]at|ot ---	contains {bat, cat, hat, mat, nat, oat, pat, Pat, ot}
colou?r	contains --- {color, colour}
rege(x(es)?|xps?) ---	contains {regex, regexes, regexp, regexps}
go*gle ---	contains {ggle, gogle, google, gooogle, goooogle, ...}
go+gle --- contains {gogle, google, gooogle, goooogle, ...}
g(oog)+le ---	contains {google, googoogle, googoogoogle, googoogoogoogle, ...}
z{3} ---	contains {zzz}
z{3,6} ---	contains {zzz, zzzz, zzzzz, zzzzzz}
z{3,} ---	contains {zzz, zzzz, zzzzz, ...}
[Bb]rainf\*\*k ---	contains {Brainf**k, brainf**k}
\d	--- contains {0,1,2,3,4,5,6,7,8,9}
\d{5}(-\d{4})? ---	contains a United States zip code
1\d{10}	--- contains an 11-digit string starting with a 1
[2-9]|[12]\d|3[0-6] ---	contains an integer in the range 2..36 inclusive
Hello\nworld	--- contains Hello followed by a newline followed by world
mi.....ft	--- contains a nine-character (sub)string beginning with mi and ending with ft (Note: depending on context, the dot stands either for “any character at all” or “any character except a newline”.) Each dot is allowed to match a different character, so both microsoft and minecraft will match.
\d+(\.\d\d)?	--- contains a positive integer or a floating point number with exactly two characters after the decimal point.
[^i*&2@]	--- contains any character other than an i, asterisk, ampersand, 2, or at-sign.
//[^\r\n]*[\r\n]	--- contains a Java or C# slash-slash comment
^dog	--- begins with "dog"
dog$	--- ends with "dog"
^dog$	--- is exactly "dog"

// içerik sorgulamak için kullanılan sistem...
// içereni bulursa true döner yoksa false

        [RegularExpression(@"^[0-9]+(\.[0-9]{{1,2})",ErrorMessage ="Hata alındı...")] // @ koyarak \ gibi ifadelerin stringi bozmasını engelledik.
        public decimal? Price { get; set; }
        // noktadan sonra maks 2 basamak girilebilir yapar.

...........


        <div class="mb-3">
        <label asp-for="Price" class="form-label">Ürün fiyat:</label>
        <input class="form-control" asp-for="Price">
        <span class="text-danger" asp-validation-for="Price"></span>
        </div>
  



Model/Form Validation ValidationSummary. Form Validation işlemlerinde kullanılacak ValidationSummary attribute konusu anlatılmaktadır.
validation mesajlarını gösterirken toplu bir şekilde nasıl gösterebiliriz. hepsinin tek tek altında oluyor ama biz hepsini toplu gösterebiliriz error mesajları.


@{
    ViewData["Title"] = "Add";
}
@model ProductViewModel

<h1>EKLEME</h1>
<div asp-validation-summary="All"> @*tüm hata mesajları burada gözükecek. ama css'siz bunu kendimiz eklememiz gerekebilir.*@

</div>
@*products add.cshtmlde*@

.........................//ProductsController içerisi.

asp-validation-summary="ModelOnly" yaparsak bunu herhangi bir textboxa ait olmayan hata mesajı göstermek istemezsek eğer o zaman kullanırız.

[HttpPost] 
public IActionResult Add(ProductViewModel newProduct) {


                if (!string.IsNullOrEmpty(newProduct.Name) && newProduct.Name.StartsWith("A"))
                {
        ModelState.AddModelError(string.Empty,"Ürün ismi A harfi ile başlayamaz..."); // string.Empyt dersek eğer hata mesajı herhangi bir text boxta değil toplu gösterim alanında göster demek
                                 //string.Empty yerine  "Name" vs dersek o zaman Name'in text boxunda hatayı gösterebilirdik. 
                }

    ............


Model/Form Validation Custom Hata Mesajı. Form Validation işlemlerinde custom hata mesajlarının nasıl gösterileceği anlatılmaktadır.
hata mesajı göstereceğiz ve herhangi bir texboxın validationı değil uygulamanın geneli ile alakalı bir hata olabilir.



                try
                {

                    _context.Products.Add(_mapper.Map<Product>(newProduct));

                    _context.SaveChanges();


                    TempData["status"] = "Ürün başarı ile eklendi.";


                    return RedirectToAction("Index");

                }
                catch (Exception)
                {

                    ModelState.AddModelError(string.Empty,"Ürün kaydedilirken hata oldu");
                    // ModelState kısmına hata mesajı ve hatanın nerede gösterileceğini yazarız.
                }




@{
    ViewData["Title"] = "Add";
}
@model ProductViewModel

<h1>EKLEME</h1>
<div asp-validation-summary="All"> @*tüm hata mesajları burada gözükecek.*@


</div>



Model/Form Validation Client-Side Validation. Form Validation işlemlerinde Client Side validation işleminin nasıl gerçekleştirileceği anlatılmaktadır.
client side olursa veriler daha sunucuya gitmeden doğrulama yapılacak...
her değer için her işlem için serverı yormak mantıklı değildir. javascript ve html5'in gücüyle bunu servera gitmeden değerleri kontrol edebiliriz.
shared klasöründe _ValidationScriptsPartial.cshtml dosyası var.   içinde <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script> <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>  içinde iki tane script dosyası var.

Add.cshtml'in en altına şunu ekledik.


</form> @*en sona veya en başa _ValidationScriptsPartial.cshtml içindekileri aşağıya aşağıdaki biçimde yerleştirdik.*@

@section Scripts{

    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

}

...........
using System.ComponentModel.DataAnnotations;

namespace turkcell1.Web.ViewModels
{
    public class ProductViewModel
    {

        public int Id { get; set; }

        [Required(ErrorMessage ="İsim alanı boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.
        [StringLength(50,MinimumLength =1,ErrorMessage ="İsim alanı en fazla 50 karakter olur...")]
        public string Name { get; set; }

        [Required(ErrorMessage = "Fiyat alanı boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.
        [Range(1,1000,ErrorMessage = "Fiyat alanı belli aralıkta olmalı.")]
        [RegularExpression(@"^[0-9]+(\.[0-9]{{1,2})",ErrorMessage ="Hata alındı...")] // @ koyarak \ gibi ifadelerin stringi bozmasını engelledik.
        public decimal? Price { get; set; }


        [Required(ErrorMessage = "Stok alana boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.
        [Range(1,200,ErrorMessage = "Stok alana boş olamaz.")] // belli bir aralıkta olmasını sağlarız başlangıç ve bitiş. ve bu şartlar sağlnazmasa o zaman gelecek hata mesajını belirleriz.
        public int? Stock { get; set; }
        [Required(ErrorMessage = "Açıklama boş olamaz.")] // doldurulması zorunlu alan olarak belirleriz.
        [StringLength(300,MinimumLength =1,ErrorMessage = "Açıklama alanı istenen aralıkta değil...")]
        public string Description { get; set; }
        [Required(ErrorMessage = "Renk seçimi boş olamaz.")]
        public string? Color
        {
            get;
            set;
        }

        [Required(ErrorMessage = "Yayınlanma tarihi boş olamaz.")]
        public DateTime? PublishDate { get; set; } // null olabilir seçeneği veririz ? ile var olan veriler içinde null verecek.

        public bool IsPublish { get; set; }

        [Required(ErrorMessage = "yayınlanma süresi boş olamaz.")]
        public int? Expire { get; set; }


        [EmailAddress(ErrorMessage ="Email geçersiz.")]
        public string EmailAdress { get; set; }

    }
}
..............

@{
    ViewData["Title"] = "Add";
}
@model ProductViewModel

<h1>EKLEME</h1>
<div asp-validation-summary="All"> @*tüm hata mesajları burada gözükecek.*@


</div>


<form asp-controller="Products" asp-action="Add" method="post">


    <div class="mb-3">
        <label asp-for="Name" class="form-label">Ürün ismi:</label>
        <input class="form-control" asp-for="Name">
        <span class = "text-danger" asp-validation-for="Name"></span>
    </div>



        <div class="mb-3">
        <label asp-for="Price" class="form-label">Ürün fiyat:</label>
        <input class="form-control" asp-for="Price">
        <span class="text-danger" asp-validation-for="Price"></span>
    </div>


    <div class="mb-3">
        <label asp-for="Stock" class="form-label">Ürün Stok:</label>
        <input type ="number" class="form-control" asp-for="Stock">
        <span class="text-danger" asp-validation-for="Stock"></span>
    </div>


    <div class="mb-3">
     
        @*<label asp-for="Color" class="form-label">Ürün Renk:</label>
        <input class="form-control" asp-for="Color">
        *@

        <select class="form-select" asp-for="Color" asp-items="@ViewBag.ColorSelect">

            <option value="">Renk seçiniz</option>

        </select>
        <span class="text-danger" asp-validation-for="Color"></span>

    </div>


    <div class="form-check">
        <input class="form-check-input" asp-for="IsPublish">
        <label class="form-check-label" asp-for="IsPublish">
            Yayınlansın mı?
        </label>
    </div> @*asp-for ile nereye gideceğine karar verdik ve bootstraptan aldığımız checksleri yerleştirdik. asp-for ile bir veri girişi belirlersek o zaten typeını otomatik belirliyor. boolean tip olduğunu bilecek. 
    *@



    <div class="mb-3 mt-3"> @*mt-3 ekledik 3 tab boşluk bırakır.*@
        <span>Ürün kaç ay satışta kalacak ?</span>
    @foreach (var item in ViewBag.Expire as Dictionary<string,int>)
    { 

        <div class="form-check">
            <input class="form-check-input" type="radio" id ="@(item.Value)Expire" asp-for="Expire" value="@item.Value"> @*Value değerini ekledik.*@
                <label class="form-check-label" asp-for="Expire" for="@(item.Value)Expire">
               @item.Key
            </label>
        </div>

    }
        <span class="text-danger" asp-validation-for="Expire"></span>
    </div>

    <div class="form-floating mb-3">
        <textarea asp-for = "Description" class="form-control" placeholder="Ürün açıklama" style="height: 100px"></textarea>
        <label asp-for="Description">Ürün açıklama</label>
        <span class="text-danger" asp-validation-for="Description"></span>
    </div>



    <div class="mb-3">
        <label asp-for="PublishDate" class="form-label">Ürün Yayınlanma zamanı:</label>
        <input class="form-control" asp-for="PublishDate">
        <span class="text-danger" asp-validation-for="PublishDate"></span>
    </div>

    @*
    <div class="mb-3">
        <label asp-for="EmailAdress" class="form-label">Email adresi:</label>
        <input class="form-control" asp-for="EmailAdress">
        <span class="text-danger" asp-validation-for="EmailAdress"></span>
    </div>
    *@


    <button type="submit" class="btn btn-primary">Ürün Kaydet</button> @*class="btn btn-primary" bunu bootstrap sitesinden aldık mesela ve bunu ekleyerek butona bir tip ekledik.*@

</form>

@section Scripts{

    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

}


Model/Form Validation Remote.Form Validation işlemlerinde kullanılacak Remute attribute konusu anlatılmaktadır.
Remote ekstra bir metot çalıştırmak istersek eğer o zaman kullandığımız yapı. mesela bir tc alanında bu tcnin olup olmadığını kontrol eden bir yapı. mesela tc girdik sonra isim girerken o sırada veritabanı ile haberleşip o sırada bir uyarı mesajı gösterebilir... client tarafta gerçekleştirir ve o sırada veritabanı ile haberleşilir buna ajax teknolojisi denir. 
backende yaparsak sayfa yenilenecek vs remoto bunu ajax teknolojisi ile client tafaındayken biz veritabanı ile haberleşerek halleder.

       [AcceptVerbs("GET","POST")] // hem [HttpGet] hem [HttpPost ] olabilir demektir.
       public IActionResult HasProductName(string name)
       {
           var anyProduct = _context.Products.Any(x=> x.Name.ToLower() == name.ToLower()); // .Any() true ya da false döner.
           if (anyProduct)
           {
               return Json("Kaydetmeye çalıştığınız ürün adı veritabanında vardır.");
           }
           else
           {
               return Json(true);
           }

       }
// bu metotu ekledik ProductsController'a.

sonra ProductViewModel'e geçeriz.
        [Remote(action:"HasProductName",controller:"ProductsController")]
        public string Name { get; set; }
// böylece client tarafta iken haberleşme yapabilecek.




Model/Form Validation Update.cshtml .. Ürün Güncelleme sayfasının validation ile tekrardan düzenlenmesi anlatılmaktadır.

//prodcutcontrollerdeki değişimler.

        [HttpGet]
        public IActionResult Update(int id)
        {

            var product = _context.Products.Find(id);
            ViewBag.ExpireValue = product.Expire;
            Dictionary<string, int> Expire = new Dictionary<string, int>()
            {
                { "1 Ay",1},
                { "3 Ay",3},
                { "6 Ay",6},
                { "12 Ay",12}

            };
            ViewBag.Expire = Expire;




            ViewBag.ColorsSelect = new SelectList(new List<ColorSelectList>()
           {
               new () {Data = "Mavi",Value = "Mavi" },
               new () {Data = "Kırmızı",Value = "Kırmızı" },
               new () {Data = "Sarı",Value = "Sarı" }

           }, "Value", "Data",product.Color); // seçili olanı getirecek.





            return View(_mapper.Map<ProductViewModel>(product));    

        }

        [HttpPost]
        public IActionResult Update(ProductViewModel updateProduct)
        {
            if (ModelState.IsValid)
            {


                ViewBag.ExpireValue = updateProduct.Expire;
                Dictionary<string, int> Expire = new Dictionary<string, int>()
            
            {
            
                { "1 Ay",1},
                { "3 Ay",3},
                { "6 Ay",6},
                { "12 Ay",12}

            };
                ViewBag.Expire = Expire;




                ViewBag.ColorsSelect = new SelectList(new List<ColorSelectList>()
           {
               new () {Data = "Mavi",Value = "Mavi" },
               new () {Data = "Kırmızı",Value = "Kırmızı" },
               new () {Data = "Sarı",Value = "Sarı" }

           }, "Value", "Data", updateProduct.Color); // seçili olanı getirecek.

                return View();
            }

            _context.Products.Update(_mapper.Map<Product>(updateProduct));
            _context.SaveChanges(); 
            TempData["status"] = "Ürün başarı ile güncellendi.";


            return RedirectToAction("Index");

        }

.............Products add.cshtml


@{
    ViewData["Title"] = "Update";
}

@model ProductViewModel

<h1>Ürün Güncelleme</h1>

<form asp-controller="Products" asp-action="update" method="post">

    <input type="hidden" asp-for="Id"/> @*hidden ile gönderdik ki id alanıda dolsun yoksa hata alırız hangi id'de ürünü güncelleyeceğiz bilemeyeiz.*@


    <div class="mb-3">
        <label asp-for="Name" class="form-label">Ürün ismi:</label>
        <input class="form-control" asp-for="Name">
        <span class = "text-danger"asp-validation-for="Name"></span>
    </div>


    <div class="mb-3">
        <label asp-for="Price" class="form-label">Ürün fiyat:</label>
        <input class="form-control" asp-for="Price"> 
        <span class="text-danger" asp-validation-for="Price"></span>

    </div>


    <div class="mb-3">
        <label asp-for="Stock" class="form-label">Ürün Stok:</label>
        <input type="" class="form-control" asp-for="Stock">
        <span class="text-danger" asp-validation-for="Stock"></span>

    </div>


    <div class="mb-3">

        <select class="form-select" asp-for="Color" asp-items="@ViewBag.ColorSelect">

            <option value="">Renk seçiniz</option>

        </select>
        <span class="text-danger" asp-validation-for="Color"></span>

    </div>


    <div class="form-check">
        <input class="form-check-input" asp-for="IsPublish">
        <label class="form-check-label" asp-for="IsPublish">
            Yayınlansın mı?
        </label>
    </div> 



    <div class="mb-3 mt-3">
        
        <span>Ürün kaç ay satışta kalacak ?</span>
        @foreach (var item in ViewBag.Expire as Dictionary<string, int>)
        {
            <div class="form-check">


            @if (item.Value == ViewBag.ExpireValue)
            {
                    <input checked = "checked" class="form-check-input" type="radio" id="@(item.Value)Expire" asp-for="Expire" value="@item.Value">
                }
                else
                {
                    <input class="form-check-input" type="radio" id="@(item.Value)Expire" asp-for="Expire" value="@item.Value">
                }

                <label class="form-check-label" asp-for="Expire" for="@(item.Value)Expire">
                    @item.Key
                </label>

            </div>


                
                

        }
        <span class="text-danger" asp-validation-for="Expire"></span>

    </div>

    <div class="form-floating mb-3">
        <textarea asp-for="Description" class="form-control" placeholder="Ürün açıklama" style="height: 100px"></textarea>
        <label asp-for="Description">Ürün açıklama</label>
    </div>



    <div class="mb-3">
        <label asp-for="PublishDate" class="form-label">Ürün Yayınlanma zamanı:</label>
        <input class="form-control" asp-for="PublishDate">
        <span class="text-danger" asp-validation-for="PublishDate"></span>
    </div>


    <button type="submit" class="btn btn-primary">Ürün Güncelle</button> 


</form>

@section Scripts{

    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>

}




..............................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................

Partial View /View Component.

Partial View Model Binding 1.Aşama. Partial View'lere model binding işleminin nasıl yapılacağı anlatılmaktadır...
partial viewler birer cshtml dosyasıdır... bir layout kullanmazlar. bir uygulamamızın bir çok yerinden kullanıdığımız şeyleri tekrarlamamızı önler. 

partial viewler için ayrı dosya açtık partialViews adında.

biz şimdi tüm verileri alıp gösteren bir partialView tablosu yapacağız verileri içeren bir tablo olacak.


// bir class oluşturduk... PartialViews klasöründe.
using System;

namespace turkcell1.Web.PartialViews
{
    public class ProductListPartialViewModel
    {
        public List<ProductPartialViewModel> Products { get; set; } // bir sınıf ile wrapladım. sonradan başka şeyler ekleyebiliriz.


    }
    public class ProductPartialViewModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public decimal Price { get; set; }
        public int Stock { get; set;}



    }


}


.......// _ProductListPartialView.cshtml içerisi.
@using turkcell1.Web.PartialViews
@model ProductListPartialViewModel

<table class="table table-success table-striped">


    <thead>
        <tr>
            <th>ID</th>
            <th>İSİM</th>
            <th>FİYAT</th>
            <th>STOK</th>



        </tr>

    </thead>

    <tbody>

        @foreach(var item in Model.Products)
        {
            
            <tr>

                <td>@item.Id</td>
                <td>@item.Name</td>
                <td>@item.Price</td>
                <td>@item.Stock</td>

            </tr>

        }



    </tbody>


</table>
........... şimdi listeleme işi yapacağız.

    public class HomeController : Controller
    {


        private readonly AppDbContext _context;
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger, AppDbContext appDbContext)
        {

            _logger = logger;
            _context = appDbContext;
        
        }

        public IActionResult Index()
        {
            var products = _context.Products.OrderByDescending(x=>x.Id).Select(x=>new ProductPartialViewModel(){

                Id = x.Id,
                Name = x.Name,
                Price = x.Price,
                Stock = x.Stock,


            });
            ViewBag.productListPartialViewModel = new ProductListPartialViewModel()
            {
                Products = products.ToList(),
            };
            return View();
        }

// Home controllere ekleme yaptık.

HomeController'ın index.cshtml'i...

<partial name="~~/PartialViews/_ProductListPartialView.cshtml" model="@ViewBag" /> @*~~ kök klasördür.*@
@*bunu ekledik shared içinde olmadığı için ~~ ve yol olarak verdik. Ve model ViewBag ile taşıdık onu veririz.*@

.............
<div class="row">
    <div class="col-md-4">

<partial name="~~/PartialViews/_ProductListPartialView.cshtml" model="@ViewBag" /> @*~~ kök klasördür.*@

    </div>


</div>
bootstrap default olarak bir sayfayı 12 bölgeye ayırır. yatay olarak 12 tane çizgi ile 12 parçaya bölünmüştür. biz col-md-4 ile 4 parçasını kullanır olduk.

 

View Component.
yapı itibarı ile partialView ile aynıdır neredeyse. tekrar tekrar kod yazmaktan kurtarır bizi. sayfaları merkezi bir yerde toplar.
partialViewlere ihtiyaç duydukları dataları dışarıdan veririz.
view componentlerin kendi classları var kendi cs. dosyaları var verileri kendi içindeki class'tan gelecek.
partialView'den farkı yok sadece ihtiyaç duyacağı datayı kendi class'ından alır.

Shared klasorunde ViewComponents adında bir klasör oluşturduk. bunun içinde classlarımız olacak.
sonra ise shared içerisinde Components adında bir klasor oluşturduk. bunun içinde ise cshtml dosyaları olacak.
bu sistemin sayesinde controllerler içerisinde bussiness kod yazmamıza gerek kalmayacak.
..........

ViewComponents klasorunde ProductListViewComponent isminde bir class oluşturduk ViewComponent ile bitmesi şart çağırırken ProductList olarak çağırıcaz. ViewComponent asp tarafından silinecek ve ona göre işlem yapacak.
            // sadece isim ve açıklama istiyorum. onun için ViewModel klasöründe bir class oluştururuz.
 namespace turkcell1.Web.ViewModels
{

    public class ProductListComponentViewModel
    {
        public string Name {  get; set; } 
        public string Description { get; set; }

    }
}
.........
using Microsoft.AspNetCore.Mvc;
using turkcell1.Web.Models;
using turkcell1.Web.ViewModels;

namespace turkcell1.Web.Views.Shared.ViewComponents
{
    public class ProductListViewComponent:ViewComponent
    {

        private readonly AppDbContext _context;

        public ProductListViewComponent(AppDbContext context)
        {
            _context = context;
            
        }

        public async Task<IViewComponentResult> InvokeAsync()
        {
            // sadece isim ve açıklama istiyorum.
            var viewmodes = _context.Products.Select(x=>new ProductListComponentViewModel()
            {

                Name = x.Name,
                Description = x.Description,

            }).ToList();

            return View(viewmodes);


        }






    }
}
................cs.html kısmını kodlama.
Components klasoru içerisinde bir klasör daha oluşturduk. ProductList isminde. ProductListViewComponent ismindeki class'a göre yaptık bu isimlendirmeyi. ViewComponent'i atarak isimlendirdik.
ProductList klasöründe add view dedik razor viewi seçtik dosyanın adını Default.cshmtl koyduk ve create as Partial View şıkkını işaretledik.

.............
@model List<ProductListComponentViewModel>



<table class="table table-success table-striped">


    <thead>
        <tr>
            <th>İSİM</th>
            <th>AÇIKLAMA</th>

        </tr>

    </thead>

    <tbody>

        @foreach(var item in Model)
        {
            
            <tr>

                <td>@item.Name</td>
                <td>@item.Description</td>


            </tr>

        }

    </tbody>


</table>

..............Home klasörü index sayfası..

@{
    ViewData["Title"] = "Home Page";
}



@section Css{


    <style>

    </style>
}


@section Scripts{



    0
}
<div class="row">
    <div class="col-md-4">

<partial name="~~/PartialViews/_ProductListPartialView.cshtml" model="@ViewBag" /> @*~~ kök klasördür.*@

    </div>

    <div class="col-md-4">
        @await  Component.InvokeAsync("ProductList") @*asenkron metot olduğu için.  içerideki isim ViewComponent atılmış hali olmalı. EKLEME BURADA YAPILDI tablonun yanına tablo ekledik.*@ 
    </div>
</div>

.....................View Component'leri sayfalarda tag helper yardımı ile nasıl ekleneceği anlatılmaktadır.
Shared-components-productList klasörü içine type2 adında bir cshtl ekledik new item razor page ile ekledik.

@model List<ProductListComponentViewModel>


<a class = "btn btn-outline-primary" asp-controller="products" asp-action="index">ÜRÜNLERE GİT</a> @*bir tag helper ile bir sayfaya yönlerdirme yapabildik.*@
<table class="table table-success table-striped">


    <thead>
        <tr>
            <th>İSİM</th>
            <th>AÇIKLAMA</th>

        </tr>

    </thead>

    <tbody>

        @foreach (var item in Model)
        {

            <tr>

                <td>@item.Name</td>
                <td>@item.Description</td>


            </tr>

        }

    </tbody>


</table>
......... sonra ise ProductListViewComponent classını değiştirdik.

using Microsoft.AspNetCore.Mvc;
using turkcell1.Web.Models;
using turkcell1.Web.ViewModels;

namespace turkcell1.Web.Views.Shared.ViewComponents
{
    public class ProductListViewComponent:ViewComponent
    {

        private readonly AppDbContext _context;

        public ProductListViewComponent(AppDbContext context)
        {
            _context = context;
            
        }

        public async Task<IViewComponentResult> InvokeAsync(int type = 1) // default değer 1
        {

            // sadece isim ve açıklama istiyorum.
            var viewmodels = _context.Products.Select(x=>new ProductListComponentViewModel()
            {

                Name = x.Name,
                Description = x.Description,

            }).ToList();

            if (type == 1)
            {
                return View("Default",viewmodels);

            }
            else
            {
                return View("Type2", viewmodels);    
            }


        }






    }
}
.......... sonra ise Home'de ki index sayfasında değişim yaptık.
@{
    ViewData["Title"] = "Home Page";
}



@section Css{


    <style>

    </style>
}


@section Scripts{



    0
}
<div class="row">
    <div class="col-md-4">

<partial name="~~/PartialViews/_ProductListPartialView.cshtml" model="@ViewBag" /> @*~~ kök klasördür.*@

    </div>

    <div class="col-md-4">
        @await  Component.InvokeAsync("ProductList",new {Type = 1}) @*asenkron metot olduğu için.  içerideki isim ViewComponent atılmış hali olmalı. *@ 
    </div>
</div>
.................
ViewComponent istenen verileri gönderirsek onları kullanabiliriz. PartialViewden ayrılan kısmı odur genel olarak.
.............

















