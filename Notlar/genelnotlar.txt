python yorumlayıcısı olan bir dildir. kütüphaneleri çok geniştir. bilgisayarlar sadece makine dilini kullanır. sadece 0101011 gibi bir dilden anlarlar.
pythonda satırlar c java gibi ; ile bölünmediği için hangi hizada olduğu önemlidir kodların. 
mesela class emre(): yapınca sınıfın içindeki her şeyin belirlenebilmesi için sana verilen hiza içerisinde kodları yazmak lazı. 

as ile mesela import numpy as np deriz ve numpy'i artık np ismi ile kullanabiliriz.

import pandas as pd;import numpy as np   şeklinde bir kullanım yapabiliriz.

list(range(1,6)) yaparak biz bunu bir liste haline almış oluruz normalde tuple.   ama [*range(1,6)] yaparakta liste haline alabiliriz...


cmd'de python yazarsak eğer python kodlarını çalıştıracak şekle gelir o moda geçer quit() yaparsak cmd eski haline windows yönetici ekranı olarak çalışmaya başlar.
   yani python dil paketi yüklenince ide olmadanda kodlar çalışacak çünkü python paketi sayesinde bilgisayar bu kodları anlayabilecek. ama daha iyi bir yazım için en iyisi her zaman ide kullanmaktır. yoksa direkt olarak cmd ile bile kodlar çalışabilir eğer python paketi varsa... o paket ile kodlar bilgisayar diline döner.

windows + r...powershell...
   ls komutu ile bulunduğumuz dizideki tüm dosyaları görürüz.
   cd ile istenen dosya yoluna gideriz. cd.. ile geri gideriz cd desktop dersek eğer istenen bir dosya yoluna geçeriz.
   mkdir ad ile klasör vs oluştururuz bulunduğumuz dosya yolu üzerinde.
   cmd'de mkdir için uzantı belirtirsek eğer uuzantıya göre dosya oluşturur uzantıı belirtmezsek eğer o zaman klasör oluşturur.
   rmdir isim yapısı ile istenen klasör,dosya vs silinir. ama dosya yolu silinecek'in dosya yolunda olmalı. (uzantılı bir dosya silinicekse uzantısı yazılmalı.)
   cmd'ye code . yazarsak eğer vscode çalışır. eğer mesela python dosyalarının olduğu klasör'ün dosya yolunda iken code . yaparsak direkt oolarak o klasör içindekiler ile açılacak.
   dir ile cmd ekranında bulunan dosya yolundaki tüm klasörler dosyalar vs görürüz..

python dosyalarının uzantısı .py javanın .java c'nin ise .c

\’	Tek tırnak
\”	Çift tırnak
\\	Ters eğik çizgi (backslash)
\	Çok satırlı stringlerde yeni satır
\t	tab (yatay boşluk)
\n	Satır başı

wCam,hCam = 640,480  # pythonda tek satırda birden fazla atama yapabiliriz...

"""
self.hands = self.mpHands.Hands(self.mode, self.maxHands, self.detectionCon, self.trackCon)

biz bunu hands(detectionCon = 0.7) diyebiliriz. seçili olan parametrenin değerini belirleyebiliriz.

"""

sql server client server mimarisi üzerine kurulmuş bir sistemdir. işlem veririz karşılığında işlemi yapmasını beklersiniz.

 local sunucular kendi kaynaklarını kullanırlar. microsoft acsess mesela kendi kaynaklarınızı kullanarak sorgulama yapar ama sql server öyle değildir client işlemleri yapabiliriz. 

bütün veritabanlarının dili sql'dir. mssql sadece biraz daha gelişmiş olan tsql kullanır. ilişkisel veritabanlarından bahsediyoruz...

biz sql ile mssql server'a sorgular verirsek eğer mssql serverin kaynakları kullanılacak sorgulama ve işlem yaparken. sorgularımız bilgisayarımız ile server'a gider ve sonuçlanma olur. network üzerinden dinleme ve sorgulama olur.

sayi = None
while True:
    try:
        sayi = int(input("Sayiyi giriniz: "))
        while (sayi < 0) or (sayi > 100):
            sayi = int(input("Sayinizi dogru giriniz: "))
        break    
    except:
        print("Hata var...")     

        #istenen sayıyı iyi şekilde alma.


c dilinde long int kavramı vardır %ld ile atama yazdırma falan yapılır yüksek sayılar alabilir...

bir kodu pc'de çalıştırmak sorun yaratabilir. bağlantı gidebilir. şarj bitebilir güncelleme olabilir bu yüzden bulut sistemleri kullanırız. tercihen linux kurulu olarak gelir. bulut internet bağlantılı genellikle linux server üzerinde çalışan bir sistemdir bulut sistemi tüm işlemler uzaktan bağlantı ile consolda yapılıyor..
    pythonanywhere mesela ücretsiz planı olan bir web servisidir.

single board mesela = raspery pi. bunu araştırmak gerek. server gibi kullanabiliriz. internete bağlı bir bilgisayar gibi kullanabiliriz. server gibi kullanabiliriz.

bir dosyayı rar yapmak için arşive ekle deriz ve rara çevirebiliriz şifrede verebiliriz.

eğer satırların başındaki boşlukları veya istersek toplu bir değişim o zaman ctrl + h diyoruz sonra alt + r yapıyoruz find ve replace giriyoruz. sonra ise ctrl + alt + enter ile ise bunu uyguluyoruz...

eğer kendi modülümüzü oluşturmak istersek bir .py uzantılı dosya içerisine gerekli şeyleri ekleyip(fonksiyon,değişken vs)   bu mödülü lib klasörüne eklemeliyiz  sonra import diyerek çağırabiliriz.  import modul print(help(modul))  diyerek gerekli bilgilere ulaşabiliriz.     import modul    modul.func()  diyerek içerisindeki fonksiyon değişken vs'leri kullanabiliriz.     bu mödülü  pythonun lib klasörüne eklemeliyiz böylece istenen mödülü import diyerek çağırabiliriz... python her ayrı projeden bu mödüle ulaşabilir  illaki aynı path üzerinde olmasına gerek kalmaz. python kurulumu ile gelen mödüllerde lid'de bulunur.
bazı modüller c dili ile yazılır ve dll dosyasına eklenmiş olarak bulunur.  


anaconda nedir = python sürümü olacak içerisinde. genelde python kodlarını yazdığımız bir platform. open source(açık kaynaklı...)     
python çok fazla kütüphaneye sahiptir. çok farklı alanlarda işlem yapmaya olanak tanır.  
  tüm paketler yüklü olur kurulum yapmadan istenen projeyi halledebilirsin.

envormioent ile istenen paketleri kurabilir projemizi on kısmından istenen envormioent ile açabiliriz. gerekli kütüphaneleri yükler gereksizleri aradan çıkarırız. kendimize envormioent oluşturabiliriz istediğimi paketleri vs ekleyebiliriz.

.....................................................................................................................

python dosyasını .exe yapma:
    python dosyasını executable yapabilmek için indirmek gereken paket var... 
    pip install pyinstaller    
    
    tekrar terminalden projenin olduğu klasöre geliriz path olarak.
    pyinstaller projeismi.py # birden fazla çıktı verir.
    sadece .exe çıktısı alabilmek için:
        projenin olduğu path içinde pyinstaller --onefile proje(istenen proje).py

    eğer konsol gözükmesin istersek: (mesela keylogger için vs.)
        aynı path olayı geçerli.
        pyinstaller --onefile --noconsole proje(istenen proje).py



    pyinstaller --onedir --noconsole first1.py  # ile  bir klasör içerisinde gelir tüm proje. ilgili kütüphaneler .dll'ler vs bir klasörde gelir. ve uygulamayı gerekli ikondan açabiliriz.

    # eğer başka bir pcde çalışssın istersek. o zaman --onedir kullanmak lazım kütüphaneler vs ile ilgili sorun olmasın diye...


    ikonları ,resimleri vs nasıl halledeceğiz...

    kullandığımız resimleri vs executable folderle aynı path üzerinde olacak şekilde eklememiz lazım... aynı klasöre ekledik ve bitti. icon ve resimlerde belli oldu...
    


.....................................................................................................................

sql injection bir hack yöntemidir. tasarım yaparken buna önlem alınması lazım. yoksa verdiği komutlar ile verilere sızabilir veri alabilir veri ekleyebilir.

.....................................................................................................................

if __name__ == "__main__":   # bunun genel amacı importladığımız dosyaların bizden habersiz çalışmasının önüne geçmek için kullanılır.
    ....
    ....
    ....
    ....
    # yani bu bloğun bulunduğu paket import edildi ise blok içerisi çalışmayacak...    bu blok şunu kontrol eder çalıştığım yer bulunduğum yer mi.  kendi paketimde mi çalışıyorum başka bir pakete mi gittim eğer başka bir yer import etti ise çalıştırmaz. kendi paketi için çalışır bu blok.

print(__name __) # __main__ verir eğer ana dosyada isek. 
# mesela iki tane dosya olsun ikisinde de print(__name__olsun)   modul1 ve modul2 olsun isimleri  modul2'yi çalıştırırsak eğer önce modul1 sonra __main__ verir. modul1'i çalıştırırsak eğer modul2 __main__ verir.   modul'ün çalıştığı yere göre isimlendirme değişir.
# neden kullanırız. mesela bir modülü import edicez bazı kısımlarının çalışmasını istemiyoruz o zaman if __name__ == "__main__" deriz böylece bu modül import edilir bu blok içerisinde olan kısım gittiği yerde çalışmaz. sadece kendi içerisinde çalışır. bu yapılı kısm'ı olan modülün o kısmı gittiği yerde çalışmaz. python çalıştırılacak bir yer görmez.


# python'da bir dosyayı import edersek eğer direkt olarak o dosya komple baştan sona çalışır. eğer çok büyük bir dosya ise içinden gerekli olan kısımları from ile almalıyız programı kastırmamak için.
.....................................................................................................................

import math 
dir(math) # böylece tüm metotları görebiliriz.

.......................................................................................................................

google cloud gibi sistemler işlemleri internet hatta server üzerinde çalıştırmamızı sağlar. online sistemler için kullanılır genel olarak. eskiden fiziksel sunucular varmış ancak şimdi online olarak hallediliyor. hepsi cloud'a taşınmış durumda. sunucu işlemleri güvenlik işleri. bakım işlerini vs firmalar kendisi yapar.
google cloud ile konteynar sistemi kurabiliriz bir uygulamayı 7/24 olarak kullanmamızı sağlayabilir. 


import paket
print(paket.__file__) # bu yapı ile bir paketin nerede olduğunu görebiliriz.

.......................................................................................................................

    THREAD
    Bir iş yaparken diğer işe geçebilsin istersek eğer kullanmak gerekir. mesela bir yandan toplama yapacak bir yandan ise verileri çekecek gibi... buunn için işleri iş parçacığına bölmek gerekir... 

import threading # threading ile çağırırız...
import time

def start():
    print("Merhaba")
    time.sleep(2)
    print("selam")

start()

for i in range(10):
    t = threading.Thread(target=start)
    t.start()
    


ÇIKTI.............


Merhaba
selam
MerhabaMerhaba

Merhaba
Merhaba
Merhaba
Merhaba
Merhaba
Merhaba
Merhaba
Merhaba
selam
selamselam

selam
selam
selam
selam
selam
selam
selam

Burada olan şudur... t.start() ile her seferinde ayrı ayrı parçacıkta THREAD oluşur ve her fonksiyon ayrı ayrı threadlerde çalışır...

.......................................................................................................................

.ipynb python notebook içindir.. onun uzantısıdır...

....................................................................................................................................................................................................................................................................
kodların bir yerde çalışabilmesi için cloud gerekir... veya pcmizzi sunucu yapacağız o zamanda clouda sunucu olarak tanıtmamız lazım ki insanlar bu kodlara erişebilsin...
veya bir model oluşturduk bunu canlıya alacağız clouda yüklemek lazım cloud aslında internettir... bir nevi internet.
sunucular artık merkzlerde toplamıştır aws google vs olarak... uygulama yedekleme ortamlarına gerek duyulur. bunlar sağlanır bunlara ise cloud sistemi ile erişebiliriz...

Sunucu (server) ve depolama (storage) kavramları, bilgi teknolojileri alanında farklı ama birbirine bağlı olan iki önemli bileşendir.

Sunucu (Server): Sunucu, genellikle ağ üzerindeki diğer cihazlara hizmet veren bir bilgisayar sistemidir. Sunucular, istemcilere (örneğin, bilgisayarlar, telefonlar veya diğer cihazlar) dosya paylaşımı, web sayfaları sunumu, e-posta hizmeti, veritabanı erişimi, oyun sunucuları gibi farklı hizmetleri sağlamak için kullanılır. Sunucular genellikle daha güçlü donanıma, yüksek depolama kapasitesine ve daha güçlü işlemcilere sahip olabilirler. Özel işletim sistemleri veya sunucu uygulamaları genellikle sunucular üzerinde çalışır.

Depolama (Storage): Depolama, verilerin saklandığı, tutulduğu veya işlendiği bir alandır. Depolama, genellikle veri merkezlerinde veya sunucularda kullanılan donanım veya yazılım sistemlerini ifade eder. Bu depolama, sabit diskler, SSD'ler (Solid State Drive), bulut depolama hizmetleri veya diğer depolama aygıtları aracılığıyla gerçekleştirilebilir. Depolama, sunucularda kullanılan verilerin kalıcı olarak saklandığı alanı ifade eder.  serverlar depolama alanlarına bağlanırlar ve istenen kodları verileri tutarlar o server için.

Yani, sunucu, genellikle hizmetleri sunmak veya istemcilere erişim sağlamak için kullanılan bir bilgisayar sistemidir. Bu sunucular, genellikle büyük miktarda veriyi depolamak için depolama sistemlerine ihtiyaç duyarlar. Depolama ise, verilerin kalıcı olarak saklandığı veya işlendiği alandır ve sunucuların ihtiyaç duyduğu bu verileri sağlamak için kullanılır.

Kısacası, sunucu hizmetleri sağlayan bir bilgisayar sistemini temsil ederken, depolama, verilerin saklandığı donanım veya yazılım sistemlerini ifade eder ve sunucuların gereksinim duyduğu verilerin depolanmasını sağlar.
Şirketlerde bulunan donanım veya yazılım uygulamalarını bir şirketin internet ile bize sağlamasıdır. bbilişim hizmetlerini başka bir yerden başka binada olan server ve storageden almaktır.

....................................................................................................................................................................................................................................................................

.net framework sadece windowsta çalışır .net core ise platfrom bağımsız...   asp.net core ile web uygulamaları yapılabilir. xamarin ile mobil. windows form ile ise masaüstü uygulamaları yapabiliriz. 
.net framework ile core arasında büyük bir performans farkı var.
5.0'dan sonra platform bağımsız yani .core olmuştur...
.net core açık kaynak kodlu oldu. 5 ile. platform bağımsız oldu.

.exe kullanıcının çalıştırabileceği yazılım uzantısı bunu ise compiler yapar... derlemenin iki çıktısı vardır exe ve dll...

c# ile yazılan dili compiler ile biz makine koduna çeviririz o dosyayıda biz .exe ile çalıştırabiliriz...
    derleme yapılır. derleme compiler etmektir.

mvc model-view-controller... spagetti kodlar tek bir sayfada ise spagetti kodlamadır... 
mvc- ise arayüz ve mantık kısmını birbirinden ayırır. model = iş mantığı ve veri işleme... view ziyaretçilerin gördüğü sayfalardır(html,css,js)... controller(uygulama kısmı backend kısmı)...
kullanıcı bir talep yapar controller ile modelden alınır view'e gönderilir... view'e gidene kadar tüm işlemler controller tarafından işlenir...
artık c# ile yapılmış uygulamalar linux bir serverda çalışabilir oldu... .net core ile.   

.net core bir çekirdek yapısı aslında... normalde .net framework'e bağlı kalarak çalışılırmış eskiden oda sadece windowsta çalışırmış şimdi iste her platformda her serverde çalışabilir oldu.
.net core kodları yorumlayan bir çekirdek. core tabanlı olunca her sistemde çalışır hale geliyor.

mikroservis nedir = 
    hizmetler bellidir. maaliyetler düşüktür. küçük servislerdir.
    neden kullanırız = öncelikle kullanacakmıyız belirlememiz lazım. monotlitic mimariye rakiptir. hangisini kullanacağız belirlemek lazım.
    mikroservis ise her biri ayrı birer fonksiyon gibidir. izole bir şekilde her yapı kendi işini yaparsa bu yapı mikroservis yapısı olur. 
    mesela hepsiburada da sepete gittik ürünleri listele dedik sadece o mikroservis çalışır gerisine gerek yoktur. diğer mikroservislerle işi olmayacak. diğer mikroservislerin yaptığı işi yapmayacak.
    olabildiğince izole ve küçük servislere ayırmak gerekiyor.
    mikroservisler birbirinden izole olduğu için farklı dbler ve farklı diller kullanabilirler aynı dbyede bağlanabilirler. mantık budur bir projede mikroservis sayesinde farklı dilleri kullanabiliriz.
    mikroservisler illaki dbye bağlanacak diye bir şey yok normal işlemlerde yapabilirler.
    örnek olarak mikroservis sayesinde c# ve java hepsiburada da aynı anda kullanılabilir.
    büyük işlerde mesela bir yazılımcı geldi sadece sepetle ilgilenecek o zaman tüm kodlara hakim olmasına gerek yok istediği dil ile kendi bölgesinde işlem yapabilir.
    api gateway ise işlemlere göre çalışması gereken mikroservisi belirler...
    dezavantaj olarak ise karmaşıklık olabilir.
    mikroservisler eventbus ise mikroservislerin birbiri ile iletişim sağlaması için kullanılır.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

REST (Representational State Transfer), web tabanlı iletişimde kullanılan bir yazılım mimarisidir. Bu mimari, uygulama programlama arayüzü (API) tasarımı için kullanılır ve HTTP protokolünü temel alır. RESTful API'lar, istemcilerin sunucudaki kaynaklarla (veri, hizmet veya işlevsellik) etkileşimde bulunmasını sağlar.

Temel prensipleri şunlardır:

Kaynaklar (Resources): Her kaynak, tekil bir URI (Uniform Resource Identifier) ile tanımlanır. Örneğin, bir blog yazısı için "/posts" gibi.

HTTP Metodları (HTTP Methods): CRUD işlemlerini gerçekleştirmek için HTTP metodları kullanılır. Temel metodlar şunlardır:

GET: Kaynağın alınması için kullanılır.
POST: Yeni bir kaynağın oluşturulması için kullanılır.
PUT: Bir kaynağın güncellenmesi için kullanılır.
DELETE: Bir kaynağın silinmesi için kullanılır.
Temel Veri Formatları: Genellikle JSON veya XML gibi temel veri formatları kullanılır. JSON, son zamanlarda daha popülerdir.

Stateless İletişim (Stateless Communication): İstemci ve sunucu arasındaki iletişimde herhangi bir oturum durumu saklanmaz. Her istek, tüm gerekli bilgiyi içermelidir.

REST API'lar, web tabanlı uygulamalar arasında veri alışverişi ve iletişimi sağlamak için yaygın olarak kullanılır. Bu API'lar, genellikle uygulama geliştiricilerinin farklı platformlar arasında veri alışverişini kolaylaştırmak için tercih ettiği bir standart haline gelmiştir.

rest http ile client server iletişimi yapabileceğimiz bir mimaridir.
restte değişken url ile metotlar üzerinde işlem yapılır.
restfull rest üzerine geliştirilmiştir. 

..........................................
// /**/   -> c java c#
# """"  """  '''  '''  python yorum satırı
pip list ile elde olan kütüphaneleri görebiliriz...
howdoi how can i upgrade pandas? (pip install howdoi)
..........................................


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

mesela windows bir platformdur. veya linux. uygulamın çalıştığı işletim sistemi veya donanım.
  ama mesela .net core ve javada bir platformdur bunlarla yazılmış uygulamalar direkt olarak işletim siteminde değil bir sanal makine üzerinde çalışırlar. 
  sanal makine sayesinde(.net core ve java) her işletim sistemi için farklı kod yazmak zorunda kalmazsınız.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class UserRepository():
    def __init__(self):
        self.users = []
        self.isLoggedIn = False
        self.currentUser = {}
    #load users from .json file
        self.loadUser()
    
    def loadUsers(self):
        if os.path.exists("Datas.json"): # eğer bu dosya varsa o zaman True verecek...
            with open("Datas.json","r",encoding="utf-8") as file:
                users = json.load(file) # tüm bilgileri alacağız her nesne bir dict halinde ama string dict halinde gelecek.ve hepsi bir liste içerisinde gelecek.
                for user in users:
                    user = json.loads(user) # loads ile biz string dict olan json verisini dict haline getirebildik.
                    print(user["username"]+" "+user["email"])
                    newUser = User(username=user["username"],password=user["password"],email=user["email"]) # dict hale gelen nesneyi tekrar nesne haline getirdik.
                    self.users.append(newUser)
                #print(self.users)
                
                     
    def register(self, user:User): # gelecek olan verinin User tipinde olacağını belirtiriz bu yapı ile.   // burada mesela bir class'ın metotuna başka bir class'ın nesnesinin referance'ı gelecke  o zaman onu belirtmemiz lazım user ismi:User ise referance verecek nesneni oluşturulduğu class'tır *****************************************************
        self.users.append(user)
        self.saveToFile()
        print('kullanici olusturuldu...')
    
    def login(self,username,password):
        if self.isLoggedIn:
            print("Zaten login oldunuz...")
        else:
            for user in self.users:
                if user.username == username and user.password == password:
                    self.isLoggedIn = True
                    self.currentUser = user
                    print("Login yapildi...")

    def saveToFile(self):
        liste = []
        for user in self.users:
            liste.append(json.dumps(user.__dict__)) # user.__dict__ ile biz aslında bir nesneyi dict yapısına çevirdik. böylece dumps için kullanılacak hale getirdik... yoksa class ile direkt olarak işlem yapamazdık.
    
        with open('Datas.json',"w") as file: # her şeyi siler ve biz elde olanları sıfırdan yazdıracağız. 
            json.dump(liste,file) # dump ile jsona yazdırma yapacağız. ve biz buna bir liste içinde classlar olarak yolladık. dumps ise jsona uygun hale getirir. 
    
    def logOut(self):
        self.isLoggedIn = False
        self.currentUser = {}        
        print("Cikis basarili...")
    
    def identity(self):
        if self.isLoggedIn:
            print(f'username: {self.currentUser["username"]}')
        else:
            print("Giris yapilmamis...")    

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################







###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################












