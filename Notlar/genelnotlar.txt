https://bunifuframework.com/    modern masaüstü uygulama geliştirme nugeti iyi windows formlar yapabilirsin.
........................................................................................................................................................................................................................................................................................................................................................................................................................
windows + v ile geçmişte kopyalanan şeyleri görebiliriz.
........................................................................................................................................................................................................................................................................................................................................................................................................................
SQL Server'da tüm veritabanlarının dosya yollarını görmek için aşağıdaki SQL sorgusunu kullanabilirsiniz:

SELECT
    d.name AS DatabaseName,
    mf.physical_name AS FilePath
FROM
    sys.master_files mf
    INNER JOIN sys.databases d ON mf.database_id = d.database_id
ORDER BY
    d.name,
    mf.physical_name;

Bu sorgu, her veritabanı için dosya yollarını ve ilgili veritabanı adlarını listeler. sys.master_files görünümü, SQL Server'daki tüm veritabanı dosyalarının bilgilerini içerirken, sys.databases görünümü tüm veritabanlarının bilgilerini içerir. Bu iki görünümü birleştirerek veritabanı adlarını ve dosya yollarını alabilirsiniz.
........................................................................................................................................................................................................................................................................................................................................................................................................................
python yorumlayıcısı olan bir dildir. kütüphaneleri çok geniştir. bilgisayarlar sadece makine dilini kullanır. sadece 0101011 gibi bir dilden anlarlar.
pythonda satırlar c java gibi ; ile bölünmediği için hangi hizada olduğu önemlidir kodların. 
mesela class emre(): yapınca sınıfın içindeki her şeyin belirlenebilmesi için sana verilen hiza içerisinde kodları yazmak lazı. 

as ile mesela import numpy as np deriz ve numpy'i artık np ismi ile kullanabiliriz.

import pandas as pd;import numpy as np   şeklinde bir kullanım yapabiliriz.

list(range(1,6)) yaparak biz bunu bir liste haline almış oluruz normalde tuple.   ama [*range(1,6)] yaparakta liste haline alabiliriz...


cmd'de python yazarsak eğer python kodlarını çalıştıracak şekle gelir o moda geçer quit() yaparsak cmd eski haline windows yönetici ekranı olarak çalışmaya başlar.
   yani python dil paketi yüklenince ide olmadanda kodlar çalışacak çünkü python paketi sayesinde bilgisayar bu kodları anlayabilecek. ama daha iyi bir yazım için en iyisi her zaman ide kullanmaktır. yoksa direkt olarak cmd ile bile kodlar çalışabilir eğer python paketi varsa... o paket ile kodlar bilgisayar diline döner.

windows + r...powershell...
   ls komutu ile bulunduğumuz dizideki tüm dosyaları görürüz.
   cd ile istenen dosya yoluna gideriz. cd.. ile geri gideriz cd desktop dersek eğer istenen bir dosya yoluna geçeriz.
   mkdir ad ile klasör vs oluştururuz bulunduğumuz dosya yolu üzerinde.
   cmd'de mkdir için uzantı belirtirsek eğer uuzantıya göre dosya oluşturur uzantıı belirtmezsek eğer o zaman klasör oluşturur.
   rmdir isim yapısı ile istenen klasör,dosya vs silinir. ama dosya yolu silinecek'in dosya yolunda olmalı. (uzantılı bir dosya silinicekse uzantısı yazılmalı.)
   cmd'ye code . yazarsak eğer vscode çalışır. eğer mesela python dosyalarının olduğu klasör'ün dosya yolunda iken code . yaparsak direkt oolarak o klasör içindekiler ile açılacak.
   dir ile cmd ekranında bulunan dosya yolundaki tüm klasörler dosyalar vs görürüz..

python dosyalarının uzantısı .py javanın .java c'nin ise .c

\’	Tek tırnak
\”	Çift tırnak
\\	Ters eğik çizgi (backslash)
\	Çok satırlı stringlerde yeni satır
\t	tab (yatay boşluk)
\n	Satır başı

wCam,hCam = 640,480  # pythonda tek satırda birden fazla atama yapabiliriz...

"""
self.hands = self.mpHands.Hands(self.mode, self.maxHands, self.detectionCon, self.trackCon)

biz bunu hands(detectionCon = 0.7) diyebiliriz. seçili olan parametrenin değerini belirleyebiliriz.

"""

sql server client server mimarisi üzerine kurulmuş bir sistemdir. işlem veririz karşılığında işlemi yapmasını beklersiniz.

 local sunucular kendi kaynaklarını kullanırlar. microsoft acsess mesela kendi kaynaklarınızı kullanarak sorgulama yapar ama sql server öyle değildir client işlemleri yapabiliriz. 

bütün veritabanlarının dili sql'dir. mssql sadece biraz daha gelişmiş olan tsql kullanır. ilişkisel veritabanlarından bahsediyoruz...

biz sql ile mssql server'a sorgular verirsek eğer mssql serverin kaynakları kullanılacak sorgulama ve işlem yaparken. sorgularımız bilgisayarımız ile server'a gider ve sonuçlanma olur. network üzerinden dinleme ve sorgulama olur.

sayi = None
while True:
    try:
        sayi = int(input("Sayiyi giriniz: "))
        while (sayi < 0) or (sayi > 100):
            sayi = int(input("Sayinizi dogru giriniz: "))
        break    
    except:
        print("Hata var...")     

        #istenen sayıyı iyi şekilde alma.


c dilinde long int kavramı vardır %ld ile atama yazdırma falan yapılır yüksek sayılar alabilir...

bir kodu pc'de çalıştırmak sorun yaratabilir. bağlantı gidebilir. şarj bitebilir güncelleme olabilir bu yüzden bulut sistemleri kullanırız. tercihen linux kurulu olarak gelir. bulut internet bağlantılı genellikle linux server üzerinde çalışan bir sistemdir bulut sistemi tüm işlemler uzaktan bağlantı ile consolda yapılıyor..
    pythonanywhere mesela ücretsiz planı olan bir web servisidir.

single board mesela = raspery pi. bunu araştırmak gerek. server gibi kullanabiliriz. internete bağlı bir bilgisayar gibi kullanabiliriz. server gibi kullanabiliriz.

bir dosyayı rar yapmak için arşive ekle deriz ve rara çevirebiliriz şifrede verebiliriz.

eğer satırların başındaki boşlukları veya istersek toplu bir değişim o zaman ctrl + h diyoruz sonra alt + r yapıyoruz find ve replace giriyoruz. sonra ise ctrl + alt + enter ile ise bunu uyguluyoruz...

eğer kendi modülümüzü oluşturmak istersek bir .py uzantılı dosya içerisine gerekli şeyleri ekleyip(fonksiyon,değişken vs)   bu mödülü lib klasörüne eklemeliyiz  sonra import diyerek çağırabiliriz.  import modul print(help(modul))  diyerek gerekli bilgilere ulaşabiliriz.     import modul    modul.func()  diyerek içerisindeki fonksiyon değişken vs'leri kullanabiliriz.     bu mödülü  pythonun lib klasörüne eklemeliyiz böylece istenen mödülü import diyerek çağırabiliriz... python her ayrı projeden bu mödüle ulaşabilir  illaki aynı path üzerinde olmasına gerek kalmaz. python kurulumu ile gelen mödüllerde lid'de bulunur.
bazı modüller c dili ile yazılır ve dll dosyasına eklenmiş olarak bulunur.  


anaconda nedir = python sürümü olacak içerisinde. genelde python kodlarını yazdığımız bir platform. open source(açık kaynaklı...)     
python çok fazla kütüphaneye sahiptir. çok farklı alanlarda işlem yapmaya olanak tanır.  
  tüm paketler yüklü olur kurulum yapmadan istenen projeyi halledebilirsin.

envormioent ile istenen paketleri kurabilir projemizi on kısmından istenen envormioent ile açabiliriz. gerekli kütüphaneleri yükler gereksizleri aradan çıkarırız. kendimize envormioent oluşturabiliriz istediğimi paketleri vs ekleyebiliriz.

...............................................................................................................................................................................................................................................................................................................................................................
nas. ağa bağlı depolama cihazıdır. ortak noktada herkesin erişebileceği bir veri depolama sistemi. sisteme çok fazla depolama aygıtı takmak istersek ona göre işletim sistemi kullanırız. Truenas işletim sistemi kullanabiliriz. iyi bir internet kartı takarak daha hızlı işlemler yapabiliriz.   Truenas önceki freenas olan bir işletim sistemi. linux ve bsd tabanlı işletim sistemi. openzfs sistemi kullanır dosya kayıplarını engeller. Truenas ile nas kurarsak tüm işletim sistemleri ile bu sisteme erişebiliriz. tüm işletim sistemi protokollerini destekler. 
kurulum için TrueNas iso dosyası. bir usb en az 4gb. ve isoyu usbye yazmak için rufus'a ihtiyacımız var.
kurulum için ssd seçmek daha hızlı çalışmamızı sağlar.  

https://www.youtube.com/watch?v=m-i2JBtG4FE
........................................................................................................................................................................................................................................................................................................................................................................
API nedir?
- uygulama programlama ara birimidir. iki farklı uygulamanın birbiri ile haberleşmesini sağlar. sadece iki uygulama için değil örnek olarak bir api yazdık hem mobil uygulama ile hem internet sitesi ile hemde masaüstü uygulamar ile çalışabilir. bunu yayınlarız örnek olarak ve uygualamar ile haberleşmesini sağlayabiliriz. 
- en basit hali ile uygulamalar arasında okuma yazma işlemleri sağlayabilir. 
- programların illa internet olacak diye bir şey yok uygualamar arasında konuşmayı sağlar. mesela word ile excelin kendi bilgisayarımzda internet olmadan konuşması. ya da java kodu yazdık ve bir framework ile o kodun aynı pakette internet olmadan haberleşmesi.



API (Application Programming Interface), bir yazılımın başka bir yazılımla iletişim kurmasını sağlayan bir dizi kural ve protokoldür. API'ler, iki farklı yazılım sisteminin veri alışverişi yapmasına ve birbirleriyle etkileşimde bulunmasına olanak tanır.

API'ler çeşitli şekillerde kullanılabilir:

Web API'ler: Web üzerinden erişilebilen API'lerdir. Örneğin, bir hava durumu uygulaması, hava durumu verilerini almak için bir hava durumu servisi API'sini kullanabilir.

RESTful API'ler: REST (Representational State Transfer) mimarisine dayanan API'lerdir. HTTP protokolü kullanılarak çalışır ve genellikle JSON veya XML formatında veri döner.

SOAP API'ler: Simple Object Access Protocol (SOAP) protokolüne dayanan API'lerdir. XML formatında veri gönderir ve alır.

Kütüphane API'leri: Bir programlama dilinde kullanılan kütüphaneler veya framework'ler tarafından sağlanan API'lerdir. Örneğin, .NET framework'ü içindeki sınıflar ve metodlar, programcıların .NET uygulamaları yazarken kullanabileceği API'lerdir.

API'lerin avantajları:

Yeniden Kullanılabilirlik: Aynı API, birden fazla uygulama tarafından kullanılabilir.
Modülerlik: API'ler, büyük sistemlerin daha küçük ve yönetilebilir parçalara ayrılmasını sağlar.
Güvenlik: API'ler, sistemler arasında güvenli veri alışverişi sağlar.
Entegrasyon: Farklı yazılım sistemlerinin birbiriyle entegre olmasına olanak tanır.
Bir API örneği olarak, senin de üzerinde çalıştığın ASP.NET Core Web API'yi ele alabiliriz. Bu tür API'ler, HTTP istekleri (GET, POST, PUT, DELETE vb.) aracılığıyla çeşitli kaynaklara erişim sağlar ve bu kaynakları yönetir.

...............................................................................................................................................................................................................
1- VPN, Tor ve oldu da Snowflake kullanırken sorun yaşadık, güçlü bir sansüre uğradılar. Peki internetten kopmamak için ne yapacağız? Gelin en basit alternatifleri birlikte öğrenelim:

2- İlk aklımıza gelecek olan Proxy Sunucular. Proxy sunucularının birçok farklı türü var. Örneğin Web Proxy, HTTP Proxy, SOCKS Proxy, SSL/TLS Proxy, Reverse Proxy vb. gibi. Bunların hepsi VPN gibi gizlilik sağlamaz. Ancak bizim amacımız burada gizlilik değil, internete erişim.

3- VPN, Tor ve Snowflake sansürlenirse alternatif Proxy yolları:

Web Proxy: Tarayıcı üzerinden erişilebilen proxy sunucular. Örneğin: KProxy, ProxySite vb.

HTTP Proxy Sunucuları: HTTP protokolünü kullanarak internet trafiğini yönlendirir. Örn: Squid, Apache HTTP Server vb.

4- VPN, Tor ve Snowflake olur da sansürlenirse alternatif proxy yolları:

SOCKS Proxy: TCP/IP tabanlı bağlantıları destekler. Örn: Shadowsocks, Dante, Tor SOCKS Proxy

SSL/TLS Proxy: Güvenli iletişim için kullanılan SSL veya TLS protokollerini kullanır. Örn: Squid, Nginx, HAProxy

5- Proxy konusunu anlamayanlar için en basit çözüm DNS değiştirme.

DNS değiştirin. Örnek DNS adresleri şöyle:

Open DNS:
208.67.222.222
208.67.220.220

Norton DNS: 
198.153.192.1
198.153.194.1

Comodo Secure DNS:
8.26.56.26
8.20.247.20

Safe DNS:
195.46.39.39
195.46.39.40


6- VPN, Tor ve Snowflake engellenir ve floodun başındaki örneklerde olan mevcut Proxy konusunu çözemezseniz alternatif DNS yolları:

Cloudflare DNS:
1.1.1.1
1.0.0.1

Quad9 DNS:
9.9.9.9
149.112.112.112

DNSWatch:
84.200.69.80
84.200.70.40

...............................................................................................................................................................................................................................................................................................................................................................
1- VPN hizmetlerinin hepsi engellenir ve Tor kısıtlanırsa Snowflake’e yönelin dedik. Peki nedir bu Snowflake? Ne işe yarar? Bunu nasıl kurarız? Gelin bu önemli içeriğe birlikte göz atalım:

2- Farklı ülkelerden gelen destekler sayesinde Tor’un SnowFlake ürününü kullanarak daha hızlı bir internete erişebilmemiz [Bant genişliği daraltılmış internette] ve bunun yanında sansürü/engellemeleri aşabilmemiz mümkün. Bu sayede VPN hizmetine ihtiyacımız yok.

3- Tor’un #Snowflake eklentisini Chrome, Edge veya Firefox’a da kurmanız mümkün (http://snowflake.torproject.org) Unutmayın geçtiğimiz yıl İran’daki #Mahsa_Amini eylemlerinde İran hükümetinin interneti kısıtlamasının ardından İran’daki insanlar internete bu sayede erişim sağladı.

4- Tor’un son sürümünü indirin. Son sürümün güncellemesini yapamıyorsanız frontdesk[at]torproject[dot]org ile iletişime geçin, durumu anlatın. İndirmek için Telegram üzerinden GetTor_bot ile de iletişim kurabilirsiniz. Snowflake'i her cihazda kullanabilir, sansürü aşabilirsiniz.

5- Bilgisayarda Snowflake:
Başlangıç ekranından ‘Bağlantıyı yapılandır’ > Köprüler > Hazır köprülerden seçilsin > Snowflake yolunu izleyin.

- iOS kullanıyorsanız (iPhone, iPad), Onion Browser uygulamasını indirin. App Store'da Mike Tigas ismini görürsünüz, o doğru uygulama.

6- Android için Snowflake: Ayarlar > Bir köprü yapılandırmak için ‘Bir Tor köprüsü yapılandır’ > “Hazır köprülerden seçilsin” >“Snowflake” yolunu izleyin.

7- Sadece Instagram engellemesi - sansürü için değil. Her zaman işe yarayacak olan bu bilgiyi duyurursanız oldukça faydalı olacaktır. Aşağıdaki tweeti paylaşabilirsiniz. Sevgiler.

.............................................................................................................................................................................................................................................................................................................................................................................
python dosyasını .exe yapma:
    python dosyasını executable yapabilmek için indirmek gereken paket var... 
    pip install pyinstaller    
    
    tekrar terminalden projenin olduğu klasöre geliriz path olarak.
    pyinstaller projeismi.py # birden fazla çıktı verir.
    sadece .exe çıktısı alabilmek için:
        projenin olduğu path içinde pyinstaller --onefile proje(istenen proje).py

    eğer konsol gözükmesin istersek: (mesela keylogger için vs.)
        aynı path olayı geçerli.
        pyinstaller --onefile --noconsole proje(istenen proje).py



    pyinstaller --onedir --noconsole first1.py  # ile  bir klasör içerisinde gelir tüm proje. ilgili kütüphaneler .dll'ler vs bir klasörde gelir. ve uygulamayı gerekli ikondan açabiliriz.

    pyinstaller --onedir isim.py  # yaparsak terminalde çalışan kodumuzu her pcde çalışır hale getirebiliriz...


    # eğer başka bir pcde çalışssın istersek. o zaman --onedir kullanmak lazım kütüphaneler vs ile ilgili sorun olmasın diye...

    ikonları ,resimleri vs nasıl halledeceğiz...

    kullandığımız resimleri vs executable folderle aynı path üzerinde olacak şekilde eklememiz lazım... aynı klasöre ekledik ve bitti. icon ve resimlerde belli oldu...
    
# EXE YAPMA YANİ CANLIYA ALMA GİBİ DÜŞÜNEBİLİRİZ...
    bir dosya oluşur ve programadi.exe'yi istersek kısayol oluşturur masaüstüne atar istediğimiz gibi kullanabiliriz. 

.....................................................................................................................

sql injection bir hack yöntemidir. tasarım yaparken buna önlem alınması lazım. yoksa verdiği komutlar ile verilere sızabilir veri alabilir veri ekleyebilir.
.....................................................................................................................
mesela telefonda eğer reklem çıkmasın istersek özel dns veya gizli dns kısmına  dns.adguard.com   yazarak reklamsız kullanabiliriz androidde ama... 
.....................................................................................................................
venv nedir... bilgisayarınzda ekstra bir python kurmanızı sağlarız... kütüphaneleri yeniden kurmamıza gerek kalmaz... mesela python 3.6 ile yapılmış proje var venv 3.6'ya taşırsak eğer projeyi sprunlar çözülür...
pip install virtualenv yaparız....
bir uygulamayı exe vs yapabiliriz...
https://www.youtube.com/watch?v=1ltHy2X4yg8&list=PLRb-ja_tK-M0jGMTYvCvY353k1sEP634D&index=3

.....................................................................................................................
live preview ile show preview deriz ve yazdığımız fronent kodunu seçili tarayıcımızda görebiliriz...  
.....................................................................................................................
C# ve Java compiler, nodejs, PHP, Python interpreter. CPU güçlü ise interpreter dilleri kullanılır Backend'de, Memory ve depolama alanından tasarruf edilir. Diğerlerinde tam tersi. Veya CPU çok güçlüdür ama Backend'de yapılan işler de çok fazla CPU gücü ister, o zaman C# ve Java gibi compiler olan diller kullanılır. Interpreter kullanılınca server programın kodunu satır satır okuyor ve anlık derleyip çalıştırıyor. Compiler da ise en baştan derleniyor, server derlenmiş kodu çalıştırıyor. Satır satır interpreterla çalıştırılan yazılım derlenmişe göre çok yavaş kalıyor tabii ama CPU çok güçlü olunca derlenmişe göre aradaki fark hissedilmiyor. Derlenmiş kodun çalışması için gerekli Memory, kaynak vs. baştan belli, devreye alındığında bunlar yoksa en baştan hiç çalışmıyor. Ayrıca yazılım çalışırken kullanılan kaynakları gerek kalmayınca boşa çıkarmak vs. çok dikkatli yapmak gerekiyor. Avantaj olarak da runtime hataları en baştan eleniyor. Interpreter'da ise Memory az olsa bile yazılım çalışıyor, anlık olarak Memory vs. boşaltılıyor, ekleniyor vs. ama runtime hatası olma ihtimali çok yüksek diğerine göre ve CPU güçlü olduğu zaman hissedilmese bile çok yavaş.
.....................................................................................................................
Mesela bankalarda runtime hatası tahammül edilebilir bir şey değil, bu yüzden Python, nodejs falan gibi script dilleri kritik projelerde kullanılmaz. Ayrıca script dillerini hack'lemek daha kolaydır. Görüntü işleme, canlı data mining vs. gibi gerçek zamanlı projelerde çalışacaksanız C#, Java vs.
.....................................................................................................................
görev yöneticisi... sonra ayrıntılar... sonra services.exe'yi bul... eğer onun kullanıcılar kısmındaki adı SYSTEM ise sorun yok başka bir şey ise keylogger vs vardır... bunun karşısına geçmek için ise format atmak gerekebilir....
.....................................................................................................................
if __name__ == "__main__":   # bunun genel amacı importladığımız dosyaların bizden habersiz çalışmasının önüne geçmek için kullanılır.
    ....
    ....
    ....
    ....
    # yani bu bloğun bulunduğu paket import edildi ise blok içerisi çalışmayacak...    bu blok şunu kontrol eder çalıştığım yer bulunduğum yer mi.  kendi paketimde mi çalışıyorum başka bir pakete mi gittim eğer başka bir yer import etti ise çalıştırmaz. kendi paketi için çalışır bu blok.

print(__name __) # __main__ verir eğer ana dosyada isek. 
# mesela iki tane dosya olsun ikisinde de print(__name__olsun)   modul1 ve modul2 olsun isimleri  modul2'yi çalıştırırsak eğer önce modul1 sonra __main__ verir. modul1'i çalıştırırsak eğer modul2 __main__ verir.   modul'ün çalıştığı yere göre isimlendirme değişir.
# neden kullanırız. mesela bir modülü import edicez bazı kısımlarının çalışmasını istemiyoruz o zaman if __name__ == "__main__" deriz böylece bu modül import edilir bu blok içerisinde olan kısım gittiği yerde çalışmaz. sadece kendi içerisinde çalışır. bu yapılı kısm'ı olan modülün o kısmı gittiği yerde çalışmaz. python çalıştırılacak bir yer görmez.


# python'da bir dosyayı import edersek eğer direkt olarak o dosya komple baştan sona çalışır.mesela print falan varsa consola yazı yazdırır gibi...eğer çok büyük bir dosya ise içinden gerekli olan kısımları from ile almalıyız programı kastırmamak için.
.....................................................................................................................

import math 
dir(math) # böylece tüm metotları görebiliriz.

.......................................................................................................................

google cloud gibi sistemler işlemleri internet hatta server üzerinde çalıştırmamızı sağlar. online sistemler için kullanılır genel olarak. eskiden fiziksel sunucular varmış ancak şimdi online olarak hallediliyor. hepsi cloud'a taşınmış durumda. sunucu işlemleri güvenlik işleri. bakım işlerini vs firmalar kendisi yapar.
google cloud ile konteynar sistemi kurabiliriz bir uygulamayı 7/24 olarak kullanmamızı sağlayabilir. 


import paket
print(paket.__file__) # bu yapı ile bir paketin nerede olduğunu görebiliriz.

.......................................................................................................................

    THREAD
    Bir iş yaparken diğer işe geçebilsin istersek eğer kullanmak gerekir. mesela bir yandan toplama yapacak bir yandan ise verileri çekecek gibi... buunn için işleri iş parçacığına bölmek gerekir... 

import threading # threading ile çağırırız...
import time

def start():
    print("Merhaba")
    time.sleep(2)
    print("selam")

start()

for i in range(10):
    t = threading.Thread(target=start)
    t.start()
    


ÇIKTI.............


Merhaba
selam
MerhabaMerhaba

Merhaba
Merhaba
Merhaba
Merhaba
Merhaba
Merhaba
Merhaba
Merhaba
selam
selamselam

selam
selam
selam
selam
selam
selam
selam

Burada olan şudur... t.start() ile her seferinde ayrı ayrı parçacıkta THREAD oluşur ve her fonksiyon ayrı ayrı threadlerde çalışır...

.......................................................................................................................
Bilgisayarınıza, kripto virüsünü bulaştırma yöntemlerinden en yaygın olanı.

1-Önce ülkedeki tüm sabit ip adreslerinin listesi elde edilir.
2-Portcheck edilerek 1433 portu yoklanır.
3-sa kullanıcı adı ile listedeki şifreler sırayla denenir.
4-bingo sql e bağlantı sağlandı.
5-T-sql ile cmd shell kullanarak bilgisayardaki tüm dosyalar şifrelenir.
6-şantaj metni bilgisayara bırakılır.
KORUNMAK İÇİN,
1433 portunu değiştirin.
Sa kullanıcı adını kullanmayın.
Güçlü şifreler oluşturun.
Bitti gitti.....
..................................................................................................................................................................................................................................................................................................................................................................................................................................................
Debug yaptığımızda solda kırmızı top olacak şekilde bir breakpoint belirler ve debug yaparsak eğer o zaman oraya gelene kadar çalışır sistem orada durur.
..................................................................................................................................................................................................................................................................................................................................................................................................................................................
Bir NAS (Network Attached Storage), ağ üzerinde veri depolama ve paylaşma işlevi gören bir cihazdır. NAS, genellikle bir ev veya ofis ağında merkezi bir depolama birimi olarak kullanılır ve kullanıcıların dosyalarını depolamalarına, paylaşmalarına ve yedeklemelerine olanak tanır.

NAS Sunucusunun Temel Özellikleri:
Ağ Üzerinden Erişim: NAS cihazları, ağ üzerinden erişilebilir, bu da farklı cihazların (bilgisayarlar, tabletler, akıllı telefonlar vb.) NAS'a bağlanarak dosya okuma ve yazma işlemleri yapabilmesini sağlar.
Veri Yedekleme: NAS, verilerin yedeklenmesi için kullanılır, bu sayede veri kaybı riskini minimize eder.
Ortak Depolama: Farklı kullanıcıların aynı dosyalara erişebilmesi ve paylaşabilmesi için merkezi bir depolama alanı sunar.
Medya Sunucusu: Bazı NAS cihazları, medya dosyalarını (video, müzik, fotoğraf) saklamak ve ağ üzerinden yayınlamak için kullanılabilir.
Güvenlik: NAS cihazları genellikle veri şifreleme ve kullanıcı yetkilendirme gibi güvenlik özellikleri sunar.
..................................................................................................................................................................................................................................................................................................................................................................................................................................................
ctrl basılı önce k sonra c yorum satırına alır seçili olanı... ctrl basılı önce k sonra u ise seçili olanı yorum satırından çıkarır...
.......................................................................................................................
.ipynb python notebook içindir.. onun uzantısıdır...
..............................................................................................................................................................................................................................................................................................

        CSRF (Cross-Site Request Forgery), web uygulamalarında yaygın bir güvenlik açığı türüdür. CSRF saldırısı, bir kullanıcının tarayıcısında, genellikle başka bir site üzerinden kötü niyetli bir şekilde yürütülen isteklere dayanır. Saldırgan, bu istekleri kullanıcının tarayıcısı üzerinden gerçekleştirir ve kullanıcının oturumunu kötü niyetli eylemler için kullanabilir.

        CSRF saldırılarından korunmak için birçok yöntem vardır ve bu yöntemlerden biri de "CSRF Token" kullanmaktır.

        CSRF Token Nedir:
        CSRF token, web uygulamalarında güvenlik önlemlerinden biridir ve saldırılara karşı koruma sağlar. Bu token, kullanıcının oturumunu ve istekleri doğrulamak için kullanılır. Web uygulaması, kullanıcının tarayıcısına gömülen bu token'ı kullanarak, kullanıcının gerçekleştirdiği her isteği doğrular.

        Nasıl Çalışır:

        Kullanıcı bir web uygulamasına giriş yapar ve oturum açar.
        Web uygulaması, kullanıcının tarayıcısına özel ve tek kullanımlık bir CSRF token gönderir.
        Kullanıcı, bir form gönderdiğinde veya belirli bir işlemi gerçekleştirmek için bir istekte bulunduğunda, tarayıcı bu CSRF token'ı kullanarak isteği gönderir.
        Web uygulaması, gelen isteği aldığında, CSRF token'ı kontrol eder ve bu token geçerli değilse isteği reddeder.
        CSRF Token Kullanımı:
        CSRF token'ın kullanımı genellikle web uygulamasındaki form gönderme işlemleri sırasında ortaya çıkar. Örneğin, bir kullanıcının bir form aracılığıyla bir şeyi değiştirmesini isteyen bir web sayfası düşünelim. Bu durumda, form içine gömülen bir CSRF token, formun güvenilir bir şekilde gönderildiğini doğrular.

       -HTML....
        <form action="/example" method="post">
            <!-- Diğer form alanları -->
            <input type="hidden" name="csrf_token" value="buraya_token_gelecek">
            <button type="submit">Gönder</button>
        </form>
        Web uygulaması, formu aldığında ve işlem yapacağında, gönderilen CSRF token'ı kontrol eder. Eğer token geçerli değilse veya eksikse, işlem reddedilir.

        CSRF token kullanımı, web uygulamasını bu tür güvenlik tehditlerine karşı daha dirençli hale getirir.
....................................................................................................................................................................................................................................................................
kodların bir yerde çalışabilmesi için cloud gerekir... veya pcmizzi sunucu yapacağız o zamanda clouda sunucu olarak tanıtmamız lazım ki insanlar bu kodlara erişebilsin...
veya bir model oluşturduk bunu canlıya alacağız clouda yüklemek lazım cloud aslında internettir... bir nevi internet.
sunucular artık merkzlerde toplamıştır aws google vs olarak... uygulama yedekleme ortamlarına gerek duyulur. bunlar sağlanır bunlara ise cloud sistemi ile erişebiliriz...

Sunucu (server) ve depolama (storage) kavramları, bilgi teknolojileri alanında farklı ama birbirine bağlı olan iki önemli bileşendir.

Sunucu (Server): Sunucu, genellikle ağ üzerindeki diğer cihazlara hizmet veren bir bilgisayar sistemidir. Sunucular, istemcilere (örneğin, bilgisayarlar, telefonlar veya diğer cihazlar) dosya paylaşımı, web sayfaları sunumu, e-posta hizmeti, veritabanı erişimi, oyun sunucuları gibi farklı hizmetleri sağlamak için kullanılır. Sunucular genellikle daha güçlü donanıma, yüksek depolama kapasitesine ve daha güçlü işlemcilere sahip olabilirler. Özel işletim sistemleri veya sunucu uygulamaları genellikle sunucular üzerinde çalışır.

Depolama (Storage): Depolama, verilerin saklandığı, tutulduğu veya işlendiği bir alandır. Depolama, genellikle veri merkezlerinde veya sunucularda kullanılan donanım veya yazılım sistemlerini ifade eder. Bu depolama, sabit diskler, SSD'ler (Solid State Drive), bulut depolama hizmetleri veya diğer depolama aygıtları aracılığıyla gerçekleştirilebilir. Depolama, sunucularda kullanılan verilerin kalıcı olarak saklandığı alanı ifade eder.  serverlar depolama alanlarına bağlanırlar ve istenen kodları verileri tutarlar o server için.

Yani, sunucu, genellikle hizmetleri sunmak veya istemcilere erişim sağlamak için kullanılan bir bilgisayar sistemidir. Bu sunucular, genellikle büyük miktarda veriyi depolamak için depolama sistemlerine ihtiyaç duyarlar. Depolama ise, verilerin kalıcı olarak saklandığı veya işlendiği alandır ve sunucuların ihtiyaç duyduğu bu verileri sağlamak için kullanılır.

Kısacası, sunucu hizmetleri sağlayan bir bilgisayar sistemini temsil ederken, depolama, verilerin saklandığı donanım veya yazılım sistemlerini ifade eder ve sunucuların gereksinim duyduğu verilerin depolanmasını sağlar.
Şirketlerde bulunan donanım veya yazılım uygulamalarını bir şirketin internet ile bize sağlamasıdır. bbilişim hizmetlerini başka bir yerden başka binada olan server ve storageden almaktır.

classlar soyut verilerdir abstract ise soyutlanmış classlardır. nesneler ise somutlaşmış halleridir...
....................................................................................................................................................................................................................................................................

.net framework sadece windowsta çalışır .net core ise platfrom bağımsız...   asp.net core ile web uygulamaları yapılabilir. xamarin ile mobil. windows form ile ise masaüstü uygulamaları yapabiliriz. 
.net framework ile core arasında büyük bir performans farkı var.
5.0'dan sonra platform bağımsız yani .core olmuştur...
.net core açık kaynak kodlu oldu. 5 ile. platform bağımsız oldu.

.exe kullanıcının çalıştırabileceği yazılım uzantısı bunu ise compiler yapar... derlemenin iki çıktısı vardır exe ve dll...

c# ile yazılan dili compiler ile biz makine koduna çeviririz o dosyayıda biz .exe ile çalıştırabiliriz...
    derleme yapılır. derleme compiler etmektir.

mvc model-view-controller... spagetti kodlar tek bir sayfada ise spagetti kodlamadır... 
mvc- ise arayüz ve mantık kısmını birbirinden ayırır. model = iş mantığı ve veri işleme... view ziyaretçilerin gördüğü sayfalardır(html,css,js)... controller(uygulama kısmı backend kısmı)...
kullanıcı bir talep yapar controller ile modelden alınır view'e gönderilir... view'e gidene kadar tüm işlemler controller tarafından işlenir...
artık c# ile yapılmış uygulamalar linux bir serverda çalışabilir oldu... .net core ile.   

.net core bir çekirdek yapısı aslında... normalde .net framework'e bağlı kalarak çalışılırmış eskiden oda sadece windowsta çalışırmış şimdi iste her platformda her serverde çalışabilir oldu.
.net core kodları yorumlayan bir çekirdek. core tabanlı olunca her sistemde çalışır hale geliyor.

mikroservis nedir = 
    hizmetler bellidir. maaliyetler düşüktür. küçük servislerdir.
    neden kullanırız = öncelikle kullanacakmıyız belirlememiz lazım. monotlitic mimariye rakiptir. hangisini kullanacağız belirlemek lazım.
    mikroservis ise her biri ayrı birer fonksiyon gibidir. izole bir şekilde her yapı kendi işini yaparsa bu yapı mikroservis yapısı olur. 
    mesela hepsiburada da sepete gittik ürünleri listele dedik sadece o mikroservis çalışır gerisine gerek yoktur. diğer mikroservislerle işi olmayacak. diğer mikroservislerin yaptığı işi yapmayacak.
    olabildiğince izole ve küçük servislere ayırmak gerekiyor.
    mikroservisler birbirinden izole olduğu için farklı dbler ve farklı diller kullanabilirler aynı dbyede bağlanabilirler. mantık budur bir projede mikroservis sayesinde farklı dilleri kullanabiliriz.
    mikroservisler illaki dbye bağlanacak diye bir şey yok normal işlemlerde yapabilirler.
    örnek olarak mikroservis sayesinde c# ve java hepsiburada da aynı anda kullanılabilir.
    büyük işlerde mesela bir yazılımcı geldi sadece sepetle ilgilenecek o zaman tüm kodlara hakim olmasına gerek yok istediği dil ile kendi bölgesinde işlem yapabilir.
    api gateway ise işlemlere göre çalışması gereken mikroservisi belirler...
    dezavantaj olarak ise karmaşıklık olabilir.
    mikroservisler eventbus ise mikroservislerin birbiri ile iletişim sağlaması için kullanılır.

iki farklı mimari var monotlitic mimari ve mikroservis mimarisi vardır. 
monotlitic bir pakettir mvc gibi. mikroservis ise web api gibi.
session oturumdur.
mikroservis mimarisinde uygulamamızı kodlara sunuculara veritabanlarına vs vs bölebiliriz. bunları genel olarak api ile yaparız.

sql veritabanları daha çok static veriler için kullanılır ama dinamik sürekli değişen bir yapı için mesela hepsiburada alışveriş sepeti sürekli bir değişim var ozaman nosql kullanmak daha mantıklıdır redis gibi.

.system dir .. gibi komutlar ile sistemin komutlarını kullanabiliriz eğer bir iş içerisindeysek ve sistem komutlarını kullanmak istiyorsak eğer.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
selamlar,

teknoloji, bilişim, yazılım ve programlama gibi birçok alanda* ücretsiz kitap ve kaynak edinmek isteyenler aşağıdaki bağlantılara göz atabilir. bu siteler, eğitim, iş hayatı ve kişisel gelişim için gayet uygundur.

freecomputerbooks

bilgisayar bilimi, yazılım geliştirme ve diğer teknoloji konularında geniş bir e-kitap koleksiyonu sunar.

github

çeşitli programlama dilleri, algoritmalar ve yazılım geliştirme konularında ücretsiz e-kitap ve kaynaklar sunar.

opencourseware

massachusetts ınstitute of technology tarafından sağlanan, yazılım geliştirme ve bilişim konularında ücretsiz ders materyalleri ve kitaplar barındırır.

open textbox

üniversite düzeyinde bilgisayar bilimi ve yazılım konularında ücretsiz ders kitapları sunar.

gutenberg

bazı eski bilgisayar bilimi ve teknoloji kitaplarına erişim sağlar.

bookboon

teknoloji, bilişim ve yazılım konularında ücretsiz e-kitaplar sunar ve ağırlıkla iş dünyası ve akademik konulara odaklanır.

digilibraries

teknoloji ve bilgisayar bilimi konularında çeşitli ücretsiz e-kitaplar sunar.

w3schools

web geliştirme ve programlama konularında kapsamlı ücretsiz öğreticiler ve kılavuzlar sunar.

geeksforgeeks

bilgisayar bilimi ve yazılım geliştirme üzerine geniş bir yazılı içerik ve öğretici koleksiyonu sunar.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
REST (Representational State Transfer), web tabanlı iletişimde kullanılan bir yazılım mimarisidir. Bu mimari, uygulama programlama arayüzü (API) tasarımı için kullanılır ve HTTP protokolünü temel alır. RESTful API'lar, istemcilerin sunucudaki kaynaklarla (veri, hizmet veya işlevsellik) etkileşimde bulunmasını sağlar.

Temel prensipleri şunlardır:

Kaynaklar (Resources): Her kaynak, tekil bir URI (Uniform Resource Identifier) ile tanımlanır. Örneğin, bir blog yazısı için "/posts" gibi.

HTTP Metodları (HTTP Methods): CRUD işlemlerini gerçekleştirmek için HTTP metodları kullanılır. Temel metodlar şunlardır:

GET: Kaynağın alınması için kullanılır.
POST: Yeni bir kaynağın oluşturulması için kullanılır.
PUT: Bir kaynağın güncellenmesi için kullanılır.
DELETE: Bir kaynağın silinmesi için kullanılır.
Temel Veri Formatları: Genellikle JSON veya XML gibi temel veri formatları kullanılır. JSON, son zamanlarda daha popülerdir.

Stateless İletişim (Stateless Communication): İstemci ve sunucu arasındaki iletişimde herhangi bir oturum durumu saklanmaz. Her istek, tüm gerekli bilgiyi içermelidir.

REST API'lar, web tabanlı uygulamalar arasında veri alışverişi ve iletişimi sağlamak için yaygın olarak kullanılır. Bu API'lar, genellikle uygulama geliştiricilerinin farklı platformlar arasında veri alışverişini kolaylaştırmak için tercih ettiği bir standart haline gelmiştir.

rest http ile client server iletişimi yapabileceğimiz bir mimaridir.
restte değişken url ile metotlar üzerinde işlem yapılır.
restfull rest üzerine geliştirilmiştir. 

..........................................
// /**/   -> c java c#
# """"  """  '''  '''  python yorum satırı
pip list ile elde olan kütüphaneleri görebiliriz...
howdoi how can i upgrade pandas? (pip install howdoi)
..........................................
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
windows + r kısmına shell:AppsFolder yazarsan tüm uygualamarı görebilirsin istersen kaldırabilirsin vs. istersen kısayol oluşturursun pcdeki her şeyi görebilirsin.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

mesela windows bir platformdur. veya linux. uygulamın çalıştığı işletim sistemi veya donanım.
  ama mesela .net core ve javada bir platformdur bunlarla yazılmış uygulamalar direkt olarak işletim siteminde değil bir sanal makine üzerinde çalışırlar. 
  sanal makine sayesinde(.net core ve java) her işletim sistemi için farklı kod yazmak zorunda kalmazsınız.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
C# dilinde bir Windows Forms uygulaması geliştirirken, özellikle birden fazla iş parçacığı (thread) kullanacaksanız, iş parçacığı senkronizasyonunu ve kaynak yönetimini doğru şekilde yapmanız gerekmektedir. İş parçacıkları, programınızın birden fazla işlemi aynı anda yapmasını sağlar, ancak bu işlemler aynı kaynakları kullanıyorsa (örneğin aynı veriye erişim) çeşitli sorunlar ortaya çıkabilir. Bu tür sorunlara çözüm sağlamak için mutex, semaphore, monitor ve lock gibi senkronizasyon mekanizmaları kullanılır. İşte detaylı bir açıklama:

1. Thread (İş Parçacığı)
Bir iş parçacığı, bir işlem içinde çalışan bağımsız bir kontrol akışıdır. .NET Framework, System.Threading ad alanı altında iş parçacığı yönetimi için çeşitli araçlar sunar. İş parçacıkları aynı anda birden fazla iş yapabilmenizi sağlar, ancak kaynak paylaşımı ve erişim kontrolü konusunda dikkatli olunmalıdır.

Örnek Kullanım:

csharp

using System.Threading;

Thread thread = new Thread(new ThreadStart(Method));
thread.Start();

void Method() {
    Console.WriteLine("Thread başladı.");
}
2. Lock
Lock, belirli bir kod bloğunun bir seferde sadece bir iş parçacığı tarafından erişilebilir olmasını sağlar. C#’da lock anahtar kelimesi ile kolayca kullanılabilir. Bu yöntem, belirli bir nesne üzerinde kilit oluşturarak diğer iş parçacıklarının o nesneye erişimini engeller.

Örnek Kullanım:

csharp

private static object _lockObject = new object();

void CriticalSection() {
    lock (_lockObject) {
        // Kritik bölge, bir kere de bir thread tarafından erişilebilir.
    }
}
3. Mutex
Mutex (Mutual Exclusion Object), iş parçacıklarının kaynaklara sırayla erişimini sağlayan bir senkronizasyon mekanizmasıdır. Mutex, inter-process (işlem arası) senkronizasyon için de kullanılabilir, yani farklı işlemler arasında da kaynak paylaşımını yönetebilir.

Örnek Kullanım:

csharp

using System.Threading;

Mutex mutex = new Mutex();
mutex.WaitOne();  // Mutex kilidi alınır.
// Kritik bölge
mutex.ReleaseMutex();  // Mutex kilidi serbest bırakılır.
4. Semaphore
Semaphore, belirli bir kaynağa aynı anda erişebilecek maksimum iş parçacığı sayısını sınırlar. Örneğin, bir veritabanı bağlantısına aynı anda en fazla 10 iş parçacığının erişmesine izin vermek için semafor kullanılabilir.

Örnek Kullanım:

csharp

using System.Threading;

Semaphore semaphore = new Semaphore(0, 10); // Başlangıçta 0, maksimum 10 erişim
semaphore.WaitOne();  // Erişim için bekler
// Kritik bölge
semaphore.Release();  // Erişim hakkını serbest bırakır
5. Monitor
Monitor, lock'a benzer bir yapıdır ve genellikle lock anahtar kelimesi ile kullanılır. Ancak, Monitor sınıfı daha karmaşık iş parçacığı senkronizasyon görevleri için ek fonksiyonlar sunar, örneğin iş parçacıklarını uyutma ve uyandırma.

Örnek Kullanım:

csharp

using System.Threading;

object _lock = new object();
Monitor.Enter(_lock);
try {
    // Kritik bölge
}
finally {
    Monitor.Exit(_lock);
}
6. Deadlock ve Race Conditions
İş parçacığı senkronizasyonu sırasında karşılaşılabilecek iki önemli problem "deadlock" ve "race condition"dır.

Deadlock, iki veya daha fazla iş parçacığının, birbirinin serbest bırakmasını beklediği kaynaklar üzerinde sonsuza kadar beklemesi durumudur.
Race Condition, birden fazla iş parçacığının, değişkenlerin beklenmedik şekillerde değiştirilmesine neden olacak şekilde kaynaklara erişmeye çalışmasıdır.
Her iki durumda da uygulamanın hatalı çalışmasına veya çökmesine neden olabilir. Bunları önlemek için dikkatli bir tasarım ve doğru senkronizasyon mekanizmalarının kullanımı gereklidir.

Özet
C#’da iş parçacığı yönetimi ve senkronizasyonu, uygulamanın performansını ve güvenilirliğini artırabilir. Ancak, yanlış kullanıldığında ciddi performans sorunlarına ve hatalara yol açabilir. İş parçacıkları ve senkronizasyon mekanizmaları hakkında sağlam bir anlayışa sahip olmak, çoklu iş parçacığı kullanılan uygulamalar geliştirirken önemlidir.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1. Delegate Tanımı ve Kullanımı
Delegate, belirli bir imzaya sahip metodları referans almak için kullanılan bir tipdir. Özel bir delegate tipi tanımlayabilir veya genel delegate tiplerini (Action, Func) kullanabilirsiniz.

Örnek:

csharp
Kodu kopyala
public delegate void Print(int value);

public class Program
{
    public static void PrintNumber(int num)
    {
        Console.WriteLine($"Number: {num}");
    }

    public static void Main()
    {
        Print printDel = PrintNumber;
        printDel(100);
    }
}
Bu örnekte, Print isimli bir delegate tanımlanmış ve PrintNumber metodunu işaret etmek için kullanılmıştır. printDel değişkeni üzerinden PrintNumber metodu çağırılmıştır.

2. Action ve Func Delegate'leri
.NET, çoğu ihtiyaca yönelik hazır delegate tanımları sunar. Action ve Func en yaygın kullanılan iki genel delegate'dir.

Action: Geriye değer döndürmeyen metodlar için kullanılır.
Func: Geriye değer döndüren metodlar için kullanılır.
Örnekler:

csharp
Kodu kopyala
Action<string> printAction = (message) => Console.WriteLine(message);
printAction("Hello, World!");

Func<int, int, int> addFunc = (x, y) => x + y;
int result = addFunc(10, 20);
Console.WriteLine(result);
printAction bir string alıp, onu konsola yazdıran bir Action delegate'i iken, addFunc iki integer alıp, bunların toplamını döndüren bir Func delegate'idir.

3. Lambda Expressions
Lambda ifadeleri, anonim metodları tanımlamak için kullanılan kısa bir sözdizimidir. Lambda ifadeleri, Func, Action gibi delegate tipleri ile sıklıkla kullanılır.

Örnek:

csharp
Kodu kopyala
Func<int, int, int> multiply = (x, y) => x * y;
Console.WriteLine(multiply(5, 2));  // Çıktı: 10
Bu örnekte, iki parametre alan ve çarpım sonucunu döndüren bir lambda ifadesi tanımlanmıştır.

4. Closures (Kapanışlar)
Closures, bir dış metodun yerel değişkenlerine erişim sağlayan lambda ifadeleri veya anonim metodlardır. Bu özellik, lambda ifadelerinin dış metodun değişkenlerini "hatırlamasını" sağlar.

Örnek:

csharp
Kodu kopyala
Func<int, int> GetMultiplier(int factor)
{
    return x => x * factor;
}

var doubler = GetMultiplier(2);
Console.WriteLine(doubler(5));  // Çıktı: 10
Bu örnekte, GetMultiplier fonksiyonu bir lambda ifadesi döndürmekte ve bu lambda ifadesi, GetMultiplier metodunun parametresi olan factor değişkenini kullanmaktadır.

Genel Özet
C# delegate'leri, programınızda metodları birinci sınıf vatandaşlar gibi kullanmanıza olanak tanır. Bu, özellikle olay yönetimi, callback fonksiyonları ve LINQ gibi senaryolarda oldukça güçlüdür. Action ve Func, çoğu kullanım durumu için yeterli olacak şekilde tasarlanmıştır ve lambda ifadeleri ile birlikte kullanıldıklarında, kodunuzu oldukça temiz ve anlaşılır kılarlar. Closures ise çevresel değişkenleri "hatırlama" yeteneği ile karmaşık işlevsellikleri basitleştirmeye yardımcı olur.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
class UserRepository():
    def __init__(self):
        self.users = []
        self.isLoggedIn = False
        self.currentUser = {}
    #load users from .json file
        self.loadUser()
    
    def loadUsers(self):
        if os.path.exists("Datas.json"): # eğer bu dosya varsa o zaman True verecek...
            with open("Datas.json","r",encoding="utf-8") as file:
                users = json.load(file) # tüm bilgileri alacağız her nesne bir dict halinde ama string dict halinde gelecek.ve hepsi bir liste içerisinde gelecek.
                for user in users:
                    user = json.loads(user) # loads ile biz string dict olan json verisini dict haline getirebildik.
                    print(user["username"]+" "+user["email"])
                    newUser = User(username=user["username"],password=user["password"],email=user["email"]) # dict hale gelen nesneyi tekrar nesne haline getirdik.
                    self.users.append(newUser)
                #print(self.users)
                
                     
    def register(self, user:User): # gelecek olan verinin User tipinde olacağını belirtiriz bu yapı ile.   // burada mesela bir class'ın metotuna başka bir class'ın nesnesinin referance'ı gelecke  o zaman onu belirtmemiz lazım user ismi:User ise referance verecek nesneni oluşturulduğu class'tır *****************************************************
        self.users.append(user)
        self.saveToFile()
        print('kullanici olusturuldu...')
    
    def login(self,username,password):
        if self.isLoggedIn:
            print("Zaten login oldunuz...")
        else:
            for user in self.users:
                if user.username == username and user.password == password:
                    self.isLoggedIn = True
                    self.currentUser = user
                    print("Login yapildi...")

    def saveToFile(self):
        liste = []
        for user in self.users:
            liste.append(json.dumps(user.__dict__)) # user.__dict__ ile biz aslında bir nesneyi dict yapısına çevirdik. böylece dumps için kullanılacak hale getirdik... yoksa class ile direkt olarak işlem yapamazdık.
    
        with open('Datas.json',"w") as file: # her şeyi siler ve biz elde olanları sıfırdan yazdıracağız. 
            json.dump(liste,file) # dump ile jsona yazdırma yapacağız. ve biz buna bir liste içinde classlar olarak yolladık. dumps ise jsona uygun hale getirir. 
    
    def logOut(self):
        self.isLoggedIn = False
        self.currentUser = {}        
        print("Cikis basarili...")
    
    def identity(self):
        if self.isLoggedIn:
            print(f'username: {self.currentUser["username"]}')
        else:
            print("Giris yapilmamis...")    

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Asenkron Programlama
Asenkron programlama, genellikle tek bir iş parçacığındaki bloklayıcı olmayan operasyonları yönetmek için kullanılır. Buradaki amaç, programın diğer bölümlerinin çalışmasını bloke etmeden uzun süren işlemleri arka planda yürütmektir. Bu operasyonlar sıklıkla I/O operasyonlarıdır (disk okumaları, ağ istekleri vb.).

Asenkron Programlama Özellikleri:
Tek Thread Üzerinde Çalışma: Asenkron metodlar genellikle tek bir iş parçacığı üzerinde çalışır ve bu iş parçacığı bloklanmaz.
Event Loop: Node.js gibi bazı platformlarda asenkron operasyonlar bir olay döngüsü üzerinden işlenir. C#'da bu, iş parçacığı havuzları ve görev tabanlı asenkron model (TAP) ile yönetilir.
Kaynak Kullanımı: Asenkron operasyonlar, CPU yerine I/O bağlantılı kaynakları yoğun şekilde kullanır.
Asenkron Senaryo Örneği:
Bir web sunucusu, eş zamanlı olarak çok sayıda kullanıcı isteğini işleyebilir çünkü her istek asenkron olarak işlenir ve bu, sunucunun tek bir isteği işlerken diğerlerini beklemesini engeller.

Paralel Programlama
Paralel programlama, birden fazla işlem veya iş parçacığının aynı anda çalıştırılmasını sağlayarak işleri hızlandırır. Bu yaklaşım, özellikle CPU-yoğun görevler için uygundur.

Paralel Programlama Özellikleri:
Birden Fazla İş Parçacığı: İşler, birden fazla iş parçacığı arasında bölünür ve her iş parçacığı işlemcinin bir çekirdeği tarafından işlenir.
Senkronizasyon Mekanizmaları: Mutex, semaphore ve diğer kilitleme mekanizmaları, paylaşılan kaynaklara erişimi kontrol etmek için kullanılır.
Kaynak Paylaşımı: Paylaşılan kaynaklara erişimde yarış koşulları ve ölü kilitlerin (deadlock) önlenmesi için dikkatli bir tasarım gereklidir.
Paralel Senaryo Örneği:
Bir görüntü işleme uygulaması, bir görüntünün işlenmesini birden fazla parçaya bölebilir ve her parçayı ayrı bir iş parçacığında işleyerek işlem süresini kısaltabilir.

Senkronizasyon Mekanizmaları
Paralel programlama, özellikle birden fazla iş parçacığının aynı kaynağı kullanması gerektiğinde senkronizasyon mekanizmalarına ihtiyaç duyar.

Mutex:
Mutex, bir kaynağın aynı anda yalnızca bir iş parçacığı tarafından kullanılmasını sağlayan bir kilitleme mekanizmasıdır.

csharp

Mutex mutex = new Mutex();
mutex.WaitOne(); // Kaynağa erişim sağlamak için bekler
// Kritik bölge - Kaynak üzerinde işlem yapılır
mutex.ReleaseMutex(); // Kaynağı serbest bırakır
Semaphore:
Semaphore, belirli bir anda belirli sayıda iş parçacığının bir kaynağa erişmesine izin veren bir yapıdır.

csharp

Semaphore semaphore = new Semaphore(0, 5); // En fazla 5 iş parçacığı
semaphore.WaitOne(); // Erişim için bekler
// Kritik bölge
semaphore.Release(); // Erişim iznini serbest bırakır
Asenkron ve Paralel Programlama Arasındaki Farklar
Kaynak Kullanımı: Asenkron işlemler genellikle disk veya ağ I/O gibi bloklayıcı olmayan kaynaklarla ilişkilidir, paralel işlemler ise CPU gibi işlem kaynaklarını yoğun kullanır.
Uygulama Modeli: Asenkron programlama genellikle olaylara dayalı bir modeli takip eder ve genellikle tek bir iş parçacığı üzerinde çalışır, paralel programlama ise çoklu iş parçacıkları veya işlemler üzerinde eş zamanlı işlemleri yönetir.
Senkronizasyon İhtiyacı: Paralel programlama, kaynak paylaşımı nedeniyle genellikle daha karmaşık senkronizasyon gerektirir. Asenkron programlama ise, genellikle bu tür karmaşık senkronizasyonlardan kaçınır çünkü çoğunlukla tek bir iş parçacığı üzerinde çalışır.
Her iki yaklaşım da belirli problemlere çözüm sunar ve modern yazılım geliştirme pratiğinde önemli yer tutar. Ancak, senaryonuza en uygun olanı seçmek, uygulamanızın performansını ve kararlılığını doğrudan etkileyecektir.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
C#’da paralel programlama, çok çekirdekli işlemcilerden tam anlamıyla yararlanarak işlemleri eş zamanlı gerçekleştirmek için kullanılan bir programlama paradigmasıdır. Paralel programlama, özellikle CPU-yoğun işlemler ve büyük veri setlerinin işlenmesi gibi senaryolarda performansı artırmak için tercih edilir.

Paralel programlama sırasında kaynak yönetimi ve iş parçacıkları arasında senkronizasyon sağlamak için Mutex, Semaphore, Monitor, lock gibi araçlar kullanılır. Bu araçların her biri farklı senkronizasyon ihtiyaçlarına çözüm sağlar.

1. Paralel Programlama Kavramları
1.1 İş Parçacığı (Thread)
İş parçacığı, bir işlemin (process) içinde bağımsız olarak çalışabilen en küçük çalışma birimidir. C#’da, paralel programlamanın temeli iş parçacıklarıdır. Her iş parçacığı, bir işlemci çekirdeği tarafından paralel olarak çalıştırılır.

csharp
Kodu kopyala
using System.Threading;

Thread thread = new Thread(() =>
{
    Console.WriteLine("Thread çalışıyor.");
});
thread.Start();
1.2 Task Tabanlı Programlama
Task tabanlı programlama, iş parçacıklarıyla manuel olarak uğraşmak yerine, görevleri (tasks) tanımlayarak paralel işlemleri yönetmenizi sağlar. C#’da System.Threading.Tasks namespace’i bu amaçla kullanılır.

csharp
Kodu kopyala
using System.Threading.Tasks;

Task task1 = Task.Run(() =>
{
    Console.WriteLine("Task 1 çalışıyor.");
});

Task task2 = Task.Run(() =>
{
    Console.WriteLine("Task 2 çalışıyor.");
});

Task.WaitAll(task1, task2); // Tüm görevlerin tamamlanmasını bekler
1.3 Parallel Sınıfı
Parallel sınıfı, döngü işlemlerini (for ve foreach gibi) otomatik olarak birden fazla iş parçacığına dağıtarak paralel çalıştırır.

csharp
Kodu kopyala
using System.Threading.Tasks;

int[] numbers = Enumerable.Range(1, 10).ToArray();

Parallel.For(0, numbers.Length, i =>
{
    Console.WriteLine($"Index {i} işleniyor.");
});
1.4 PLINQ (Parallel LINQ)
PLINQ, LINQ sorgularını paralel olarak çalıştırır. Büyük veri setleri üzerinde paralel sorgulamalar yapmayı sağlar.

csharp
Kodu kopyala
using System.Linq;

int[] numbers = Enumerable.Range(1, 100).ToArray();

var parallelQuery = numbers.AsParallel()
    .Where(x => x % 2 == 0)
    .Select(x => x * x);

foreach (var item in parallelQuery)
{
    Console.WriteLine(item);
}
2. Senkronizasyon Araçları
Paralel programlama sırasında birden fazla iş parçacığı aynı kaynağa erişmeye çalışabilir. Bu durumda, veri tutarlılığını sağlamak için senkronizasyon mekanizmalarına ihtiyaç duyulur.

2.1 lock Anahtar Kelimesi
lock anahtar kelimesi, bir kod bloğunun yalnızca bir iş parçacığı tarafından erişilmesini sağlar.

Örnek:

csharp
Kodu kopyala
private static readonly object lockObject = new object();

void CriticalSection()
{
    lock (lockObject)
    {
        Console.WriteLine("Kritik bölgeye erişildi.");
    }
}
2.2 Monitor Sınıfı
Monitor, lock anahtar kelimesine benzer, ancak daha fazla kontrol sağlar. Örneğin, bir iş parçacığını bekletebilir veya uyandırabilirsiniz.

Örnek:

csharp
Kodu kopyala
object _lock = new object();

Monitor.Enter(_lock);
try
{
    Console.WriteLine("Kritik bölge.");
}
finally
{
    Monitor.Exit(_lock);
}
2.3 Mutex
Mutex (Mutual Exclusion Object), bir kaynağın aynı anda yalnızca bir iş parçacığı tarafından kullanılmasını sağlar. Mutex, işlemler arası (inter-process) senkronizasyon için de kullanılabilir.

Örnek:

csharp
Kodu kopyala
using System.Threading;

Mutex mutex = new Mutex();

void AccessResource()
{
    mutex.WaitOne(); // Mutex'i kilitler
    Console.WriteLine("Kaynak kullanılıyor.");
    Thread.Sleep(1000); // Kaynağı kullan
    mutex.ReleaseMutex(); // Mutex'i serbest bırak
}
2.4 Semaphore
Semaphore, aynı anda belirli sayıda iş parçacığının bir kaynağa erişmesine izin verir. Örneğin, bir kaynağa en fazla 3 iş parçacığının erişmesini sağlamak için kullanılabilir.

Örnek:

csharp
Kodu kopyala
using System.Threading;

Semaphore semaphore = new Semaphore(2, 2); // Maksimum 2 iş parçacığı

void AccessResource()
{
    semaphore.WaitOne(); // Kaynağa erişim izni al
    Console.WriteLine("Kaynak kullanılıyor.");
    Thread.Sleep(1000); // Kaynağı kullan
    semaphore.Release(); // Kaynağı serbest bırak
}
2.5 ReaderWriterLockSlim
Bu sınıf, birden fazla iş parçacığının aynı anda veri okuyabilmesine izin verir, ancak yazma işlemi sırasında yalnızca bir iş parçacığına izin verir.

Örnek:

csharp
Kodu kopyala
using System.Threading;

ReaderWriterLockSlim rwLock = new ReaderWriterLockSlim();

void ReadData()
{
    rwLock.EnterReadLock();
    try
    {
        Console.WriteLine("Veri okunuyor.");
    }
    finally
    {
        rwLock.ExitReadLock();
    }
}

void WriteData()
{
    rwLock.EnterWriteLock();
    try
    {
        Console.WriteLine("Veri yazılıyor.");
    }
    finally
    {
        rwLock.ExitWriteLock();
    }
}
3. Asenkron ve Paralel Programlama Farkları
Kriter	Asenkron Programlama	Paralel Programlama
Temel Amaç	I/O işlemleri sırasında bloklama yapmamak.	CPU-yoğun işlemleri hızlandırmak.
Çalışma Modeli	Tek iş parçacığında çalışabilir.	Çok iş parçacığında çalışır.
Senaryolar	Veri tabanı sorguları, dosya okuma, web istekleri.	Matematiksel hesaplamalar, görüntü işleme.
Senkronizasyon İhtiyacı	Genellikle senkronizasyon gerektirmez.	Paylaşılan kaynaklar için senkronizasyon gerekir.
4. Deadlock ve Yarış Koşulları (Race Conditions)
Deadlock (Ölü Kilit)
Bir iş parçacığı, başka bir iş parçacığının serbest bırakmasını beklediği kaynağa erişmeye çalışırken sonsuza kadar bekler.

Örnek:

csharp
Kodu kopyala
lock (obj1)
{
    lock (obj2)
    {
        // Deadlock riski
    }
}
Race Condition
İki veya daha fazla iş parçacığı, bir kaynağa eş zamanlı olarak eriştiğinde ve sonuç belirsiz hale geldiğinde oluşur.

Çözüm:

lock, Mutex veya Monitor kullanarak kaynak erişimini kontrol altına alın.
5. Örnek: Paralel İşlem ve Senkronizasyon
csharp
Kodu kopyala
using System;
using System.Threading;
using System.Threading.Tasks;

class Program
{
    static readonly object lockObject = new object();
    static int sharedResource = 0;

    static void Main(string[] args)
    {
        Parallel.For(0, 10, i =>
        {
            lock (lockObject)
            {
                sharedResource++;
                Console.WriteLine($"Thread {i}: {sharedResource}");
            }
        });
    }
}
Çıktı: Kilitlenmiş lock sayesinde sharedResource değişkeni her seferinde güvenli bir şekilde artırılır.

C#’da paralel programlama, çok çekirdekli sistemlerden maksimum performans elde etmek için güçlü bir araçtır. Ancak, doğru senkronizasyon mekanizmalarını kullanmadan paralel programlama yapmak, veri tutarsızlığına, ölü kilitlere ve yarış koşullarına yol açabilir. Yukarıdaki araçlar ve teknikler, bu sorunları çözmek için etkili yöntemler sunar.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1. Filtreleme Yöntemleri
1.1 LINQ (Language-Integrated Query) Kullanarak Filtreleme
LINQ, C#’da veri sorgulama ve filtreleme işlemlerini kolaylaştıran bir sorgu dilidir. LINQ, SQL'e benzer bir sözdizimine sahiptir ve dizi, koleksiyon, XML veya veritabanı gibi veri kaynakları üzerinde çalışabilir.

Örnek: Temel LINQ Filtreleme
csharp
Kodu kopyala
using System;
using System.Linq;

class Program
{
    static void Main()
    {
        int[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        var evenNumbers = from num in numbers
                          where num % 2 == 0
                          select num;

        foreach (var number in evenNumbers)
        {
            Console.WriteLine(number); // 2, 4, 6, 8
        }
    }
}
1.2 Lambda İfadeleri ile Filtreleme
Lambda ifadeleri, LINQ ile birlikte sıklıkla kullanılan kısa ve sade bir sözdizimidir. Where metodu, bir koleksiyonda filtreleme yaparken lambda ifadeleriyle birlikte kullanılır.

Örnek: Where ile Lambda İfadesi
csharp
Kodu kopyala
using System;
using System.Linq;

class Program
{
    static void Main()
    {
        int[] numbers = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };

        var evenNumbers = numbers.Where(num => num % 2 == 0);

        foreach (var number in evenNumbers)
        {
            Console.WriteLine(number); // 2, 4, 6, 8
        }
    }
}
2. İleri Seviye Filtreleme Teknikleri
2.1 Birden Fazla Kriter ile Filtreleme
Birden fazla kritere göre filtreleme yapılabilir. Örneğin, bir koleksiyondaki çift sayıları ve 5'ten büyük olanları seçebilirsiniz.

Örnek:
csharp
Kodu kopyala
var filteredNumbers = numbers.Where(num => num % 2 == 0 && num > 5);

foreach (var number in filteredNumbers)
{
    Console.WriteLine(number); // 6, 8
}
2.2 Koleksiyonlarda Obje Filtreleme
Koleksiyonlar genellikle nesnelerden oluşur. LINQ veya lambda ifadeleri, nesne koleksiyonlarında belirli özelliklere dayalı filtreleme için kullanılabilir.

Örnek:
csharp
Kodu kopyala
using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    public class Product
    {
        public string Name { get; set; }
        public double Price { get; set; }
    }

    static void Main()
    {
        var products = new List<Product>
        {
            new Product { Name = "Laptop", Price = 1200 },
            new Product { Name = "Phone", Price = 800 },
            new Product { Name = "Tablet", Price = 400 }
        };

        var expensiveProducts = products.Where(p => p.Price > 500);

        foreach (var product in expensiveProducts)
        {
            Console.WriteLine(product.Name); // Laptop, Phone
        }
    }
}
2.3 İlk Elemanı veya Son Elemanı Seçme
Filtreleme sırasında genellikle yalnızca ilk veya son eleman gereklidir. Bunun için First, FirstOrDefault, Last, LastOrDefault metodları kullanılır.

Örnek:
csharp
Kodu kopyala
var firstEven = numbers.First(num => num % 2 == 0);
Console.WriteLine(firstEven); // 2

var lastEven = numbers.Last(num => num % 2 == 0);
Console.WriteLine(lastEven); // 8
Not: Eğer koleksiyonda uygun eleman yoksa FirstOrDefault ve LastOrDefault varsayılan değer (null veya 0 gibi) döner. First ve Last ise hata fırlatır.

2.4 Belirli Sayıda Eleman Seçme
Take ve Skip metodları belirli sayıda eleman seçmek veya atlamak için kullanılır.

Örnek:
csharp
Kodu kopyala
var firstThree = numbers.Take(3); // İlk 3 eleman
var skipTwo = numbers.Skip(2); // İlk 2 elemanı atla
2.5 Gruplama ile Filtreleme
GroupBy metodu, koleksiyondaki öğeleri belirli bir kritere göre gruplar.

Örnek:
csharp
Kodu kopyala
var groupedNumbers = numbers.GroupBy(num => num % 2 == 0 ? "Even" : "Odd");

foreach (var group in groupedNumbers)
{
    Console.WriteLine(group.Key); // "Odd" ve "Even"
    foreach (var num in group)
    {
        Console.WriteLine(num);
    }
}
3. Veritabanı Üzerinde Filtreleme
C#’da LINQ to SQL veya Entity Framework kullanarak veritabanı sorguları da filtrelenebilir. Bu filtreleme, SQL sorgularına benzer.

Örnek: Entity Framework ile Filtreleme
csharp
Kodu kopyala
using (var context = new MyDbContext())
{
    var expensiveProducts = context.Products
                                   .Where(p => p.Price > 500)
                                   .ToList();

    foreach (var product in expensiveProducts)
    {
        Console.WriteLine(product.Name);
    }
}
4. Performans İpuçları
AsEnumerable ve AsQueryable:

Veritabanı sorgularında IQueryable kullanımı sorguları optimize eder.
Ancak veriler belleğe çekildikten sonra AsEnumerable kullanılabilir.
Lazy Evaluation (Ertelenmiş Çalıştırma):

LINQ sorguları genellikle ancak ToList, ToArray gibi metotlarla sonuç alındığında çalışır. Bu, performans avantajı sağlar.
5. Özet: Kullanım Örnekleri
Tüm Sayıları Filtreleme
csharp
Kodu kopyala
int[] numbers = { 1, 2, 3, 4, 5, 6 };
var evenNumbers = numbers.Where(x => x % 2 == 0);
Nesne Koleksiyonunda Özellik Bazlı Filtreleme
csharp
Kodu kopyala
var filteredProducts = products.Where(p => p.Price > 1000 && p.Name.Contains("Laptop"));
İlk/Varsayılan Eleman
csharp
Kodu kopyala
var firstProduct = products.FirstOrDefault(p => p.Price > 1000);
Gruplama
csharp
Kodu kopyala
var groupedByPrice = products.GroupBy(p => p.Price > 500 ? "Expensive" : "Cheap");
C#'da filtreleme, gerek küçük koleksiyonlar üzerinde gerekse büyük veri setlerinde etkili bir şekilde kullanılabilir. LINQ, lambda ifadeleri ve koleksiyon metotları ile filtreleme işlemleri hem kolay hem de okunaklı hale gelir. Hangi yöntemlerin kullanılacağı, veri yapısına ve performans gereksinimlerine bağlıdır.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
api ile internet ile olacak diye bir şey yok. mesela bir c# kodu kütüphanelerle api aracıylığıyla konuşur. web api demek internet ortamında www. ile haberleşir kendine ulaşan sistemlere demektir. api zaten uygulama programlama ara birimidir.
apilar farklı uygulamalarla farklı şekilde konuşabilirler...
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
web servis platform bağımsız uygulama ve cihazların http protokolü ile iletişim kurmalarını sağlayan yapıdır.
bir uygulama yazdık mesela bunu yayınladık başka bir kullanıcı talep etti ve indirdi api ile bunu dışarı çıkarabiliriz. mesela java ile yazdık diğerleri .net ile yazdı bunları web servisler ile entegre edebiliriz.
soap(simple object access protokol)    = xml mesajları web uygulamaları üzerinden birbiriyle haberleştirmeye yarayan mesajlaşma protokolüdür. http post metotunu kullanır. soap mesaj göndermek için kullanılır. soap internet üzerinden iletişim kurmak için tasarlanmıştır.  soap platformdan ve dilden bağımsız bir yapıdır. soap w3c standartıdır.   
wsdl soap web servisleri kullanmak için yazılmış bir dildir. bir dökümantasyon gibidir. 

SOAP web servisleri genellikle kurumsal uygulamalarda, özellikle banka, telekomünikasyon ve büyük ölçekli iş sistemleri gibi güvenliğin önemli olduğu yerlerde kullanılır.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

soap ve rest farkları 
soap ve rest web servis oluşturmak için kullanılır. api oluşturmak içinde ikisi birden kullanılabilir.
soap bir protokoldür. her şey kurallara bağlıdır. isteklerde bulunurken yapman gereken maddeler belirlenmiştir.
rest bir protokol değildir katı kuralları yoktur daha esnektir.  kullanımı daha kolaydır. soap sadece xml data formatı ile çalışır. 
rest url xml http json bunları kullanabilir genelde json kullanır.    

soap statefull'dür rest ise Stateless'dir
statefull demek daha önceki işlemlerinizi requestleri saklıyordur sizi tanıyordur.
Stateless ise her Requesti yeni bir Request gibi kabul eder. 

soap yavaştır daha geniş bant kullanır. data bir bantın içinde gidip gelir. rest hızlıdır bant genişliği azdır. 
bant genişliği problemi xmlden kaynaklıdır. 

soap'ın güvenlik standartları yüksektir çok güvenli bir protokoldür.


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Controller ve ControllerBase arasındaki temel fark Controller sınıfı daha kapsayıcı View falan dönebilir. Ve en kapsayıcı Metot ActionResult'tır. 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Evet, ASP.NET Core MVC'de bir View'e birden fazla veri gönderebilirsin. Bunun için birkaç farklı yöntem var. En yaygın yöntemler şunlardır:

✅ 1️⃣ View'e Model Kullanarak Veri Gönderme (En İyi Yöntem)
En iyi yöntem View Model kullanmaktır. Birden fazla veri göndermek istiyorsan, bunları bir sınıfta birleştirip View'e gönderebilirsin.

📌 Adım 1: Model Sınıfını Tanımla
Öncelikle, bir model sınıfı oluştur.

csharp
Kopyala
Düzenle
public class PersonViewModel
{
    public string[] Names { get; set; }
    public string[] Surnames { get; set; }
    public int[] Ages { get; set; }
}
📌 Adım 2: Controller'da Model Kullan
Şimdi Index2 action metodunu güncelle:

csharp
Kopyala
Düzenle
public ViewResult Index2()
{
    var model = new PersonViewModel
    {
        Names = new string[] { "Emre", "Ahmet", "Mehmet" },
        Surnames = new string[] { "Yılmaz", "Demir", "Kaya" },
        Ages = new int[] { 25, 30, 35 }
    };

    return View("Index2", model);
}
📌 Adım 3: View (Index2.cshtml) İçinde Modeli Kullan
Şimdi View içinde modeli alıp kullanabilirsin:

html
Kopyala
Düzenle
@model PersonViewModel

<h2>İsimler</h2>
<ul>
    @foreach (var name in Model.Names)
    {
        <li>@name</li>
    }
</ul>

<h2>Soyisimler</h2>
<ul>
    @foreach (var surname in Model.Surnames)
    {
        <li>@surname</li>
    }
</ul>

<h2>Yaşlar</h2>
<ul>
    @foreach (var age in Model.Ages)
    {
        <li>@age</li>
    }
</ul>
✅ Bu yöntem en temiz ve en düzenli olanıdır. Model View'e direkt bağlandığı için kodun okunaklı olur.

✅ 2️⃣ ViewBag ile Birden Fazla Veri Gönderme (Alternatif)
Eğer hızlı bir şekilde View'e veri göndermek istersen, ViewBag kullanabilirsin.

📌 Controller:
csharp
Kopyala
Düzenle
public ViewResult Index2()
{
    ViewBag.Names = new string[] { "Emre", "Ahmet", "Mehmet" };
    ViewBag.Surnames = new string[] { "Yılmaz", "Demir", "Kaya" };
    ViewBag.Ages = new int[] { 25, 30, 35 };

    return View("Index2");
}
📌 View (Index2.cshtml):
html
Kopyala
Düzenle
<h2>İsimler</h2>
<ul>
    @foreach (var name in ViewBag.Names)
    {
        <li>@name</li>
    }
</ul>

<h2>Soyisimler</h2>
<ul>
    @foreach (var surname in ViewBag.Surnames)
    {
        <li>@surname</li>
    }
</ul>

<h2>Yaşlar</h2>
<ul>
    @foreach (var age in ViewBag.Ages)
    {
        <li>@age</li>
    }
</ul>
📌 ViewBag dinamik bir yapıdır. Tip güvenliği yoktur ve büyük projelerde pek önerilmez. Küçük projelerde veya test amaçlı kullanabilirsin.

✅ 3️⃣ ViewData ile Birden Fazla Veri Gönderme (Alternatif)
ViewData, ViewBag gibi dinamik bir yapıdır ancak Dictionary<string, object> gibi çalışır.

📌 Controller:
csharp
Kopyala
Düzenle
public ViewResult Index2()
{
    ViewData["Names"] = new string[] { "Emre", "Ahmet", "Mehmet" };
    ViewData["Surnames"] = new string[] { "Yılmaz", "Demir", "Kaya" };
    ViewData["Ages"] = new int[] { 25, 30, 35 };

    return View("Index2");
}
📌 View (Index2.cshtml):
html
Kopyala
Düzenle
<h2>İsimler</h2>
<ul>
    @foreach (var name in (string[])ViewData["Names"])
    {
        <li>@name</li>
    }
</ul>

<h2>Soyisimler</h2>
<ul>
    @foreach (var surname in (string[])ViewData["Surnames"])
    {
        <li>@surname</li>
    }
</ul>

<h2>Yaşlar</h2>
<ul>
    @foreach (var age in (int[])ViewData["Ages"])
    {
        <li>@age</li>
    }
</ul>
📌 ViewData ile çalışırken veriyi cast ((string[])ViewData["Names"]) etmen gerekir. Bu yüzden hata yapmaya açık bir yöntemdir.

✅ 4️⃣ TempData ile Birden Fazla Veri Gönderme (Sayfalar Arası)
Eğer veriyi sayfalar arasında taşımak istiyorsan, TempData kullanabilirsin.

📌 Controller:
csharp
Kopyala
Düzenle
public IActionResult Index2()
{
    TempData["Names"] = new string[] { "Emre", "Ahmet", "Mehmet" };
    TempData["Surnames"] = new string[] { "Yılmaz", "Demir", "Kaya" };
    TempData["Ages"] = new int[] { 25, 30, 35 };

    return RedirectToAction("ShowData");
}

public IActionResult ShowData()
{
    return View();
}
📌 View (ShowData.cshtml):
html
Kopyala
Düzenle
<h2>İsimler</h2>
<ul>
    @foreach (var name in (string[])TempData["Names"])
    {
        <li>@name</li>
    }
</ul>
📌 TempData sadece bir sayfa yönlendirmesi süresince saklanır (yani bir kez okunursa, silinir). Keep() veya Peek() metotlarını kullanarak veri kaybolmadan tekrar çağırabilirsin.

🚀 Hangi Yöntemi Kullanmalısın?
Yöntem	Kullanım Amacı	Avantajları	Dezavantajları
✅ Model (ViewModel)	En iyi yöntem (Önerilir)	Tip güvenli, düzenli, okunaklı	Kod yazımı daha uzun olabilir
✅ ViewBag	Küçük veriler için hızlı kullanım	Dinamik olarak çalışır, kolaydır	Tip güvenliği yoktur, büyük projelerde önerilmez
✅ ViewData	Controller'dan View'e küçük veri gönderme	Aynı isimle farklı tipler tutulabilir	Cast işlemi gerekir, hata yapmaya açıktır
✅ TempData	Sayfalar arasında veri taşımak	Redirect sonrası veri taşır	Bir kere okunduğunda kaybolur
🚀 Genellikle ViewModel kullanmak en sağlıklısıdır.
Ama küçük veriler için ViewBag veya ViewData kullanılabilir.
Sayfalar arasında veri taşımak için TempData kullanabilirsin.

Eğer proje büyükse ve daha sağlam bir yapı istiyorsan, kesinlikle ViewModel ile çalışmalısın! 💪😊
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
bir mvc projesinin api gibi de kullanabiliriz asp.net core'de.
mesela localhost://5074/api/products diyip json veri dönen bir api gibide kullanabileceğiz. tümleşik bir web uygulaması yapabiliriz böylece.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Evet, ASP.NET Core MVC ve React Native'i birlikte kullanarak hem web uygulaması hem de mobil uygulama geliştirebilirsin. 🚀
Bunun için ASP.NET Core MVC'yi API olarak kullanıp, React Native ile mobil uygulamayı bu API'ye bağlayabilirsin.

✅ Genel Mimari Yapı
Bu senaryoda, MVC uygulamanın API desteği sağlaması gerekiyor.
📌 Genel yapı şöyle olur:

ASP.NET Core MVC + API (Backend)
Web uygulaması ve API için ASP.NET Core MVC kullanılır.
Mobil uygulamanın ihtiyacı olan verileri sağlayan RESTful API'ler yazılır.
Veritabanı (MSSQL, PostgreSQL, MySQL, vb.) burada yönetilir.
React Native (Mobil Uygulama)
ASP.NET Core API'ye HTTP istekleri yaparak verileri çeker.
Kullanıcı giriş/çıkış işlemleri, sipariş yönetimi, canlı bildirimler React Native içinde çalışır.
✅ 1️⃣ ASP.NET Core MVC Projesini API Destekli Hale Getirme
ASP.NET Core MVC içinde API yazmak için ControllerBase kullanmalısın.
Aşağıda bir API Controller örneği var:

📌 ProductsController.cs - API Endpoint Örneği
csharp
Kopyala
Düzenle
using Microsoft.AspNetCore.Mvc;
using System.Collections.Generic;

namespace MyApp.API.Controllers
{
    [Route("api/products")]
    [ApiController]
    public class ProductsController : ControllerBase
    {
        [HttpGet]
        public IActionResult GetProducts()
        {
            var products = new List<object>
            {
                new { Id = 1, Name = "Laptop", Price = 1200 },
                new { Id = 2, Name = "Mouse", Price = 30 }
            };

            return Ok(products);
        }
    }
}
📌 Bu API endpoint'ini React Native uygulaman HTTP isteğiyle çağırabilir.

Test için:
Postman veya tarayıcıdan şu URL'yi açabilirsin:

sh
Kopyala
Düzenle
http://localhost:5000/api/products
Eğer çalışıyorsa şu gibi bir JSON yanıtı alırsın:

json
Kopyala
Düzenle
[
    { "Id": 1, "Name": "Laptop", "Price": 1200 },
    { "Id": 2, "Name": "Mouse", "Price": 30 }
]
✅ 2️⃣ React Native Mobil Uygulamadan ASP.NET Core API'ye Bağlanma
Artık mobil uygulama ile API arasında veri iletişimi sağlayabiliriz.
React Native içinde Axios veya Fetch API kullanarak bu API'ye istek atabilirsin.

📌 React Native API'ye Bağlanma Örneği
Öncelikle, React Native projesinde Axios'u yükleyelim:

sh
Kopyala
Düzenle
npm install axios
📌 Şimdi bir ürün listesi çekelim:

javascript
Kopyala
Düzenle
import React, { useEffect, useState } from 'react';
import { View, Text, FlatList } from 'react-native';
import axios from 'axios';

const ProductList = () => {
    const [products, setProducts] = useState([]);

    useEffect(() => {
        axios.get('http://localhost:5000/api/products')
            .then(response => setProducts(response.data))
            .catch(error => console.error("API Hatası: ", error));
    }, []);

    return (
        <View>
            <Text>Ürünler</Text>
            <FlatList
                data={products}
                keyExtractor={item => item.Id.toString()}
                renderItem={({ item }) => (
                    <Text>{item.Name} - {item.Price} TL</Text>
                )}
            />
        </View>
    );
};

export default ProductList;
📌 Bu kod ne yapıyor?

API'den ürün listesini çekiyor.
FlatList ile React Native içinde liste halinde gösteriyor.
Eğer API çalışıyorsa, mobil uygulamada şu gibi bir çıktı görmelisin:
diff
Kopyala
Düzenle
Ürünler
- Laptop - 1200 TL
- Mouse - 30 TL
✅ 3️⃣ Kullanıcı Girişi (JWT Authentication)
Eğer mobil uygulama kullanıcı girişi yapacaksa, JWT ile kimlik doğrulama yapmalısın.

📌 1. ASP.NET Core API'de JWT Desteğini Aktif Et
Öncelikle NuGet'ten JWT paketlerini yükleyelim:

sh
Kopyala
Düzenle
Install-Package Microsoft.AspNetCore.Authentication.JwtBearer
📌 Şimdi Program.cs içinde JWT doğrulamasını ekleyelim:

csharp
Kopyala
Düzenle
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.IdentityModel.Tokens;
using System.Text;

var builder = WebApplication.CreateBuilder(args);

var key = Encoding.UTF8.GetBytes("super_secret_key_123456");

builder.Services.AddAuthentication(JwtBearerDefaults.AuthenticationScheme)
    .AddJwtBearer(options =>
    {
        options.RequireHttpsMetadata = false;
        options.SaveToken = true;
        options.TokenValidationParameters = new TokenValidationParameters
        {
            ValidateIssuerSigningKey = true,
            IssuerSigningKey = new SymmetricSecurityKey(key),
            ValidateIssuer = false,
            ValidateAudience = false
        };
    });

var app = builder.Build();
app.UseAuthentication();
app.UseAuthorization();
app.Run();
📌 2. Kullanıcı Girişi İçin API Controller Yaz
csharp
Kopyala
Düzenle
[HttpPost("login")]
public IActionResult Login([FromBody] LoginRequest request)
{
    if (request.Username == "admin" && request.Password == "1234")
    {
        var tokenHandler = new JwtSecurityTokenHandler();
        var key = Encoding.UTF8.GetBytes("super_secret_key_123456");
        var tokenDescriptor = new SecurityTokenDescriptor
        {
            Expires = DateTime.UtcNow.AddHours(1),
            SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
        };

        var token = tokenHandler.CreateToken(tokenDescriptor);
        return Ok(new { token = tokenHandler.WriteToken(token) });
    }
    return Unauthorized();
}
📌 Bu API ile kullanıcı giriş yapınca JWT token alır.

✅ 4️⃣ React Native ile Kullanıcı Girişi Yap
Şimdi React Native'de kullanıcı girişi yapalım ve token alalım:

javascript
Kopyala
Düzenle
import axios from 'axios';

const login = async (username, password) => {
    try {
        const response = await axios.post('http://localhost:5000/api/login', {
            username,
            password
        });

        const token = response.data.token;
        console.log("Giriş başarılı, Token:", token);
        return token;
    } catch (error) {
        console.error("Giriş başarısız!", error);
        return null;
    }
};
📌 Eğer giriş başarılı olursa, sunucu bir JWT token döndürecek.

🚀 Sonuç ve Mimarinin Avantajları
✅ ASP.NET Core MVC ve React Native birlikte kullanılabilir.
✅ MVC projesinde API yazabilir, React Native uygulaması bu API'leri kullanabilir.
✅ Tek Backend (MVC API) ile hem Web hem Mobil uygulama çalışabilir.
✅ JWT Authentication ile güvenli giriş-çıkış yapılabilir.

🚀 Bu yapıyı kullanarak ASP.NET Core MVC ile güçlü bir Backend oluşturabilir, React Native ile hem iOS hem Android için modern bir mobil uygulama geliştirebilirsin! 🎯

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

builder.Services.AddControllers(); // program.cs'e bunu ekledik böylece api desteği sağlayabiliriz. 
api desteği sağlarken'de ilgili endpointelerin düzenlenmesi lazım.   
................. aşağıdaki yapı ile bunu sağlayabiliriz.  


app.UseEndpoints(endpoints =>
{
    endpoints.MapAreaControllerRoute(
        name: "Admin",
        areaName: "Admin",
        pattern: "Admin/{controller=Dashboard}/{action=Index}/{id?}"
    );

    endpoints.MapControllerRoute("default", "{controller=Home}/{action=Index}/{id?}");

    endpoints.MapRazorPages();

    endpoints.MapControllers();
});

bir api Controller yazarsak eğer bir sıkıntı yaşamdan .net projemizi hem mvc hemde api gibi kullanabilir şekilde kullanabiliriz. 

Program.cs yapılanması önemlidir ama.

bir classlib ekleyebiliriz solutina böylece bir sınıf kütüphanesi ekleyip onu api olarak kullandırabiliriz böyle bir durumda var.
classlibin içine dotnet add package Microsoft.AspNetCore.Mvc.Core; 

// Program.cs'e eklenmesi gereken yapı ve AssemblyReference.cs lazım 
builder.Services.AddControllers()
    .AddApplicationPart(typeof(Presentation.AssemblyReference).Assembly);

........... AssemblyReference.cs aşağıda. 
namespace Presentation
{
    public class AssemblyReference
    {

    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


[HttpPost]
[ValidateAntiForgeryToken] // hangi tarayıcı ile iletişim kuruluyor doğrula demektir bu sistemi kötü niyetlilere karşı korur.
public IActionResult Apply([FromForm]Candidate model){ // model binding yani verilrti doldurma sayfa içerisinde @model Candidate dedik ve doldurulacak alanları form içerisinde belirledik böyle oldu. Candidate bir parametre gelen verinin nereden geldiğini belirtebiliriz. [FromForm] ile mesela başka bir şekilde de gelebilir ama biz Form'dan geldiği için Form olarak belirledik.

    return View();
    


}
// buda client'ten veri gönderir servera. Post ile göndeririz. ve bize bir nesne gelecek gelen sayfadan orada @model Candidate diye belirttik onu biz Candidate model parametresi ile yakalarız ve metot içerisine alırız.
// [HttpPost] ile giden veriyi biz bu metotta yakalayabiliriz.
// Candidate model ile gelen verileri istersek eğer alır ve database'ye kaydedebiliriz.

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

[HttpPost]
[ValidateAntiForgeryToken] // hangi tarayıcı ile iletişim kuruluyor doğrula demektir bu sistemi kötü niyetlilere karşı korur.
public IActionResult Apply([FromForm]Candidate model){

 Repository.Add(model); // kullanıcı kaydetme işlemi yaptık. 

    return Redirect("/"); // köke yönlendirme yaptık home index kök olduğu için program.cs'te oaraya gidecek.
    
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
MVC GENEL BAKIŞ...





Yine klasorde sağ tık terminalde aç dedik ve
cd btkakademi diyerek klasörümüzün içine gireriz. sonra code . ile vs code'u açabiliriz proje ile.

dotnet new gitignore ile .gitignore dosyası oluşturabiliriz.

model hem view hemde controllerden bağımsız olarak oluşturulur.

Models klasöründe Candidate oluşturduk...

        namespace BtkAkademi.Models
        {

        public class Candidate{

        public String? Email{get;set;} = String.Empty; // Null değer olabilir ? demektir. String.Empty ile ise direkt olarak Empty olucak.

        public String? FirstName{get;set;} = String.Empty;

        public String? LastName{get;set;} = String.Empty;

        public String? FullName => $"{FirstName} {LastName?.ToUpper()}";  // LastName?.ToUpper()   Bunun anlamı LastName Null değilse Empty değilse büyüt yoksa atla demektir. 

        public int? Age{get;set;}

        public String? SelectedCourse{get;set;}

        public DateTime ApplyAt {get;set;}


        public Candidate()
        {

            ApplyAt = DateTime.Now;

        }

....Bir Controller oluşturursak eğer o zaman Views altında o Controllerın acitonlarının sayfaları için views altında o controllera ait bir klasör oluştururuz ve ona sayfaları ekleriz.


    <p>
        <a class="btn btn-primary"  href="/course">APPLY</a>
    </p>
    @*bu etiket ile biz Course üzerine yönlendiricez kullanıcıyı. href bizi bulunduğumuz yerden /course ekleyerek oraya götürecek...*@ 


...........
bir alanı imlece alırsak seçili alan yaparsak ve shift + alt + yukarı ok tuşu ile aynısını kopyalayabiliriz.

...........................................................................................................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

builder.Services.AddControllers(); // program.cs'e bunu ekledik böylece api desteği sağlayabiliriz. 
api desteği sağlarken'de ilgili endpointelerin düzenlenmesi lazım.   
................. aşağıdaki yapı ile bunu sağlayabiliriz.  


app.UseEndpoints(endpoints =>
{
    endpoints.MapAreaControllerRoute(
        name: "Admin",
        areaName: "Admin",
        pattern: "Admin/{controller=Dashboard}/{action=Index}/{id?}"
    );

    endpoints.MapControllerRoute("default", "{controller=Home}/{action=Index}/{id?}");

    endpoints.MapRazorPages();

    endpoints.MapControllers();
});

bir api Controller yazarsak eğer bir sıkıntı yaşamdan .net projemizi hem mvc hemde api gibi kullanabilir şekilde kullanabiliriz. 

Program.cs yapılanması önemlidir ama.

bir classlib ekleyebiliriz solutina böylece bir sınıf kütüphanesi ekleyip onu api olarak kullandırabiliriz böyle bir durumda var. 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

elimiz alt tuşuna basılı şekilde iken birden fazla imleç çıkarabiliriz ve istediğimiz kadar aynı yazıdan istediğimiz yere üretebiliriz.
mesela imleç bir yerde yanıp sönüyor alt'a basılı tuttum yazmak istediğim yazının aynısını başka nereye yazmak istersem bunu belirtebilirim.


.......CourseController oluşturduk. sonra içierisine Index IActionResult'ı ekledik onunda sayfası olsun diye Views altına Course diye bir klasör oluşturduk onun içine ise Index.cshtml ekledik böylece o metotun bir sayfası oldu.     

    
    @model Candidate
    @*hangi yapı ile çalışacağız bunu belirledik.*@


    @*en baştaki yazı bir öenmi yok çok fazla.*@
    <div class="display-6">
    APPLY
    </div>


@*post ifadesi kullanırız veriler buraya gidecek. post ile bir veri gönderimi sağlayacağız yani. *@
@*action ile ise gideceği yeri belirledik.*@
<form method="post" action="/course/apply">
        

        @*isim soyisim email gibi verileri bu yapı ile aldık. ve gidecekleri Model Candidate ile belirlediğimiz Candidate nesnesinin hangi propuna gidecek bu veriler bunu belirledik.*@
        <div class="form-group  my-2">
        <label>Email</label>
        <input name = "Email" class="form-control" />
        </div>

        <div class="form-group my-2">
        <label>FirstName</label>
        <input name = "FirstName" class="form-control" />
        </div>
        @*Hangi veri hangi prop'a yerleşecek belirledik. @model Candidate ile belirledik aslında.*@    
        <div class="form-group my-2">
        <label>LastName</label>
        <input name = "LastName" class="form-control" />
        </div>
        
    <div class="form-group my-2">
        <label>Age</label>
        <select class = "form-control" name="Age">

            <option value="18">18</option>
            <option value="19">19</option>
            <option value="20">20</option>
            <option value="21">21</option>
            <option value="22">22</option>
            <option value="23">23</option>

        </select>
        </div>


    @*radio button*@
    <fieldset>
    <legend>Select one course</legend>
        <p> 
            <input id="mvc" type="radio" name="SelectedCourse" value="ASP.NET core MVC">
            <label>ASP.NET core MVC</label>
        </p>
            <p> 
            <input id="api" type="radio" name="SelectedCourse" value="ASP.NET core API">
            <label>ASP.NET core API</label>
        </p>
            <p> 
            <input id="blazor" type="radio" name="SelectedCourse" value="Blazor">
            <label>Blazor</label>
        </p>

    </fieldset>


        <div>
            <button class ="btn btn-primary" type="submit">Apply</button>
            <a class="btn btn-warning" href="/">HOME</a>
            @*anasayfaya götüren buton buda*@
            </div>
            @*Butona basınca kaydetme gibi işlemleri yapacak.*@

    </form>

........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
Client sunucuya get isteği gönderirse server mesela sayfayı bize getirir. bizde doldurur post ile yollarız servera oda bu bilgileri database'ye yükler. bu işlemler http protoklü ile olur.
server post ile Client'ten gelen veriyi alır işler gerekli görürse database'ye yükler. ve isterse Client'ı bilgilendiren bir mesaj gönderebilir.

public IActionResult Apply(){


    return View();
    
} // bu get metotu çünkü default olarak [HttpGet] olarka belirler Controller.
// bu metot serverden client'e sayfayı getirecektir.



[HttpPost]
[ValidateAntiForgeryToken] // hangi tarayıcı ile iletişim kuruluyor doğrula demektir bu sistemi kötü niyetlilere karşı korur.
public IActionResult Apply([FromForm]Candidate model){ // model binding yani verilrti doldurma sayfa içerisinde @model Candidate dedik ve doldurulacak alanları form içerisinde belirledik böyle oldu. Candidate bir parametre gelen verinin nereden geldiğini belirtebiliriz. [FromForm] ile mesela başka bir şekilde de gelebilir ama biz Form'dan geldiği için Form olarak belirledik.

    return View();
    


}
// buda client'ten veri gönderir servera. Post ile göndeririz. ve bize bir nesne gelecek gelen sayfadan orada @model Candidate diye belirttik onu biz Candidate model parametresi ile yakalarız ve metot içerisine alırız.
// [HttpPost] ile giden veriyi biz bu metotta yakalayabiliriz.
// Candidate model ile gelen verileri istersek eğer alır ve database'ye kaydedebiliriz.


TAG HELPERS:
_ViewImports.cshtml dosyası razor pagelerde kullanılacak olan sınıfların, veri tiplerinin tanımlandığı yapıdır .

        <a class="btn btn-primary"  asp-controller="Course" asp-action="Apply">APPLY</a>
        @*hANGİ controllere ve hangi metotuna gidip onu çalıştıracağız bunu belirleyebiliriz.*@ 

action="/course/apply" yerine .. asp-action="apply" dedik. eğer sayfa get ile geliyorsa zaten o contrıoller ile gelir asp-controller belirtmemize gerek yok.

....tag helperlar kullanarak Course'nin apply sayfasını modifiye ettik.
        @model Candidate
        @*hangi yapı ile çalışacağız bunu belirledik.*@


        <div class="display-6">
        APPLY
        </div>


        <form method="post" asp-action="apply">

            <div class="form-group  my-2">
            <label asp-for="Email">E-Mail</label>
            <input asp-for="Email" class="form-control" />
            </div>

            <div class="form-group my-2">
            <label asp-for="FirstName"></label>
            <input asp-for="FirstName" class="form-control" />
            </div>
            @*Hangi veri hangi prop'a yerleşecek belirledik. @model Candidate ile belirledik aslında.*@    
            <div class="form-group my-2">
            <label asp-for="LastName"></label>
            <input asp-for = "LastName" class="form-control" />
            </div>
            
        <div class="form-group my-2">
            <label asp-for="Age"></label>
            <select class = "form-control" asp-for ="Age">

                <option value="18">18</option>
                <option value="19">19</option>
                <option value="20">20</option>
                <option value="21">21</option>
                <option value="22">22</option>
                <option value="23">23</option>

            </select>
            </div>


        @*radio button*@
        <fieldset>
        <legend>Select one course</legend>
            <p> 
                <input id="mvc" type="radio" asp-for ="SelectedCourse" value="ASP.NET core MVC">
                <label>ASP.NET core MVC</label>
            </p>
                <p> 
                <input id="api" type="radio"  asp-for ="SelectedCourse" value="ASP.NET core API">
                <label>ASP.NET core API</label>
            </p>
                <p> 
                <input id="blazor" type="radio"  asp-for ="SelectedCourse" value="Blazor">
                <label>Blazor</label>
            </p>

        </fieldset>



            <div>
                <button class ="btn btn-primary" type="submit">Apply</button>
                <a class="btn btn-warning" asp-action="Index" asp-controller="Home">HOME</a>
                @*anasayfaya götüren buton buda*@
                </div>
                @*Butona basınca kaydetme gibi işlemleri yapacak.*@

        </form>

.............
@{
    Layout = "_Layout";
}
@*bunun anlamı kullanılan ana şablonu belirtir. shared içerisinde tanımlanır*@

Repository tanımı.

    namespace Basics.Models
    {

    public static class Repository{ // static olan direkt olarak bellekte var olur program çalıştığı anda bellekte hazır olarak var olur.
        
        private static List<Candidate> applications = new List<Candidate>();  // Liste oluşturduk içerisinde Candidate nesneleri olacak.
        
        public static IEnumerable<Candidate> Applications => applications; // static ve bize listeyi dönen bir interface üzerinde dönme vs yapabiliriz böyle.
        // => ile ne dönecek belirledik...
        

        public static void Add(Candidate candidate){
            applications.Add(candidate);
        }
        // static class'ın metotları static olur... 


    }

    }

.................
[HttpPost]
[ValidateAntiForgeryToken] // hangi tarayıcı ile iletişim kuruluyor doğrula demektir bu sistemi kötü niyetlilere karşı korur.
public IActionResult Apply([FromForm]Candidate model){

 Repository.Add(model); // kullanıcı kaydetme işlemi yaptık. 


    return Redirect("/"); // köke yönlendirme yaptık home index kök olduğu için program.cs'te oaraya gidecek.
    
}


sayfa bir actiona bağlı olmayacak şimdi. bir view olacak ve model'e bağlı olacak.
views course klasorunde Feedback.cshtml oluşturduk.

@model Candidate

<div>

<h3 class="display-4">Congratulations @Model.FullName</h3>
<p class="lead">Your application has been  <mark>Accepted</mark> </p>
<p class="lead">Many thanks for your interest.</p>
<hr/>

<blockquote class="blockquote">
You have enrolled to @Model.SelectedCourse course.
</blockquote>

<p class="text-muted">You applied at @Model.ApplyAt</p>

<div class="btn-group">
    <a class="btn btn-outline-success" href="#" >APPLICATIONS</a>
    <a class="btn btn-success" asp-action="Index" asp-controller="Home" >HOME</a>

</div>

............Bu sayfayı oluşturduktan sonra ise CourseController'daki Apply(post olan clientten giden veriyi yakalayan metot.) metotunu değiştiririz. 

[HttpPost]
[ValidateAntiForgeryToken] // hangi tarayıcı ile iletişim kuruluyor doğrula demektir bu sistemi kötü niyetlilere karşı korur.
public IActionResult Apply([FromForm]Candidate model){

 Repository.Add(model); // kullanıcı kaydetme işlemi yaptık. 


    return View("Feedback",model); // Course view klasöründeki Feedback'e yollayacağız ve paramatre olarka ise model yollayacağiz Feedback.cshtml içeriisnde ise @model Candidate olarka gelen veriyi karşılayacağız...
    // "~/Views/Course/Feedback.cshtml"    buda olabilir çalışmazsa...    
}

// BİLGİLENDİRME SAYFALARI İÇİN HARİKA BİR YAPIDIR...
post yapılı metota parametreye gelen nesneyi View ile göndeririz bir view'e ve @model class ile karşılarız ve kullanırız.
........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
Receiving data:

using static Basics.Models.Repository; // static metotu kullanabilmek için gereken using kullanımı.

public IActionResult Index(){
    

    var model = Repository.Applications;
    return View(model);
    
}
.........Şimdi ise index.cshtml'i yapacağız. 
@*gelen veriyi @model ile karşıladık veri var mı yopk mu kontrol ettik. *@

        @model IEnumerable<Candidate>

        @if(Model.Count() > 0){

        <h6 class="display-6"> 
        APPLICATIONS
        </h6>

        <table class="table table-hover table table-striped">

        <thead>
        <tr>

                <th>EMAIL</th>
                <th>FULL NAME</th>
                <th>APPLY AT</th>
                <th>COURSE</th>
                    
            </tr>



        </thead>


        <tbody>

        @foreach(Candidate candidate in Model){

        <tr>

            <td>@candidate.Email</td>
            <td>@candidate.FullName</td>
            <td>@candidate.ApplyAt</td>
            <td>@candidate.SelectedCourse</td>
                    
            </tr>


        
        }

        </tbody>



        </table> 


        }else{

        <div class="alert alert-info">

        There is no information. Please click here to 

            <a class="alert-link" asp-action="Apply" asp-controller="Course" >APPLY</a>

        </div>


        }


........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
Model Validation..

_Layout içerisindeki  @RenderBody aslında yazdığımız sayfa kodlarıdır.   
<div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

........Boş başvuru vs olmaması için yapılması gerekenler. veri tutarlığı için...

using System.ComponentModel.DataAnnotations;

namespace Basics.Models
{

public class Candidate{


[Required(ErrorMessage = "Email is required")]
public String? Email{get;set;} = String.Empty; // Null değer olabilir ? demektir. String.Empty ile ise direkt olarak Empty olucak.
[Required(ErrorMessage = "FirstName is required")]
public String? FirstName{get;set;} = String.Empty;
[Required(ErrorMessage = "LastName is required")]
public String? LastName{get;set;} = String.Empty;

public String? FullName => $"{FirstName} {LastName?.ToUpper()}";  // LastName?.ToUpper()   Bunun anlamı LastName Null değilse Empty değilse büyüt yoksa atla demektir. 

public int? Age{get;set;}

public String? SelectedCourse{get;set;} = String.Empty;

public DateTime ApplyAt {get;set;}


 public Candidate()
{

    ApplyAt = DateTime.Now;

}



}

    
}

.......Mesajları göstermesi için.


    <div class="text-danger" asp-validation-summary="All"></div>
    @*bunu ekledik Apply.cshtml'e*@

.....IsValid mi değil mi kontrol ederiz...

[HttpPost]
[ValidateAntiForgeryToken] // hangi tarayıcı ile iletişim kuruluyor doğrula demektir bu sistemi kötü niyetlilere karşı korur.
public IActionResult Apply([FromForm]Candidate model){


    if(Repository.Applications.Any(c => c.Email.Equals(model.Email))){
ModelState.AddModelError("","There is already an application for you");
    } // eğer bu email varsa o zaman ModelState'ye bir hata yükle o hatanında ismini ekle.


    if(ModelState.IsValid){
 Repository.Add(model); // kullanıcı kaydetme işlemi yaptık. 


    return View("~/Views/Course/Feedback.cshtml",model); // Course view klasöründeki Feedback'e yollayacağız ve paramatre olarka ise model yollayacağiz Feedback.cshtml içeriisnde ise @model Candidate olarka gelen veriyi karşılayacağız...

    } 
    return View();

}


........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................





////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

IPython.display modülü içinde bulunan Image sınıfını kullanarak Jupyter Notebook içinde resim gösterimi yapabilirsiniz. İşte basit bir örnek:

python
Copy code
from IPython.display import Image

# Resmin dosya yolu veya URL'si
resim_dosya_yolu = 'dosya_adı.png'

# Image sınıfını kullanarak resmi gösterme
Image(filename=resim_dosya_yolu)
Yukarıdaki örnekte, dosya_adı.png kısmını kendi resminizin dosya adı veya URL'si ile değiştirmelisiniz.

Eğer resminizi bir URL üzerinden göstermek istiyorsanız, Image sınıfını şu şekilde de kullanabilirsiniz:

python
Copy code
from IPython.display import Image

# Resmin URL'si
resim_url = 'https://example.com/resim.png'

# Image sınıfını kullanarak resmi gösterme
Image(url=resim_url)
Bu örneklerde Image sınıfını kullanarak resmi direkt olarak gösterirsiniz. Ancak eğer resmi bir HTML sayfasında daha fazla kontrol sağlamak istiyorsanız, HTML sınıfını ve img etiketini kullanabilirsiniz:

python
Copy code
from IPython.display import HTML

# Resmin URL'si
resim_url = 'https://example.com/resim.png'

# HTML kodu ile resmi gösterme
HTML(f'<img src="{resim_url}">')
Bu örnekte, HTML sınıfını ve img etiketini kullanarak resmi HTML sayfasında gösteriyoruz. İhtiyacınıza bağlı olarak, bu yöntemleri kullanarak resimleri Jupyter Notebook içinde farklı şekillerde gösterebilirsiniz.





###############################################################################################################################################################################################################################################################################################################################################################
pip list ile her yüklü olan kütüphaneleri görebiliriz...
###############################################################################################################################################################################################################################################################################################################################################################
mesela bir python dosyamız var bunu nasıl exe yapabiliriz.
ChatGPT
Python dosyasını bir "exe" (yürütülebilir) dosyaya dönüştürmek için genellikle "PyInstaller" veya "cx_Freeze" gibi üçüncü taraf araçları kullanılır. Bu araçlar, Python kodunuzu çalıştırabilir bir dosyaya derleyerek, Python yüklü olmayan bilgisayarlarda da çalışmasını sağlar.

İşte PyInstaller kullanarak bir Python dosyasını exe'ye dönüştürme adımları:

PyInstaller'ı Yükleyin:
Terminal veya komut istemcisine şu komutu yazarak PyInstaller'ı yükleyin:

bash
Copy code
pip install pyinstaller
Exe Oluşturma:
Python dosyanızın bulunduğu dizine gidin ve şu komutu çalıştırarak exe dosyanızı oluşturun:

bash
Copy code
pyinstaller --onefile dosya_adı.py
Burada "dosya_adı.py" yerine kendi Python dosyanızın adını yazmalısınız.

--onefile parametresi, tüm bağımlılıkları tek bir exe dosyasında birleştirir.

Exe Dosyasını Bulma:
PyInstaller işlemi tamamlandığında, "dist" adlı bir klasör oluşturulur ve bu klasörde exe dosyanız bulunur.

İsteğe Bağlı Ayarlar:
PyInstaller birçok ayara sahiptir. Örneğin, ikon eklemek için --icon=ikon.ico gibi ek parametreler ekleyebilirsiniz.

Bu adımları takip ederek Python dosyanızı exe'ye dönüştürebilirsiniz. Unutmayın ki dönüştürülen exe dosyası, dönüştürüldüğü bilgisayar mimarisine uygun olacaktır. Yani, 32-bit bir Python yüklü ise 32-bit exe, 64-bit ise 64-bit exe üretilecektir.
###############################################################################################################################################################################################################################################################################################################################################################

cmd'ye winsat formal yaz... bekle sonra... C: diski windows klasörü sonra performance klasörü oradan winsat klasörü en son oluşanı aç ve   winspr  altında puanlama var ve 10 üzerinden puanlamış değerleri...

WinSPR>
<SystemScore>8.2</SystemScore>
<MemoryScore>9.3</MemoryScore>
<CpuScore>9.3</CpuScore>
<CPUSubAggScore>8.7</CPUSubAggScore>
<VideoEncodeScore>9.9</VideoEncodeScore>
<GraphicsScore>8.2</GraphicsScore>
<Dx9SubScore>9.9</Dx9SubScore>
<Dx10SubScore>9.9</Dx10SubScore>
<GamingScore>9.9</GamingScore>
<DiskScore>8.95</DiskScore> 


                // bir ifade readonly olursa eğer değeri ya constructor'da ya da direkt olduğu yerde atama olabilir başka yerde olamaz. 





###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################







###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################
###############################################################################################################################################################################################################################################################################################################################################################












