Install-Package System.Data.SQLite   console manager kısmına yazarak SQLite kullanabiliriz... masaüstü uygulamaları için harika entity framework'te kullanabiliriz orm olarak destekler...
        SQLite NuGet Paketini Yükleme:
        Projenize SQLite ile çalışmak için System.Data.SQLite NuGet paketini ekleyin. Visual Studio kullanıyorsanız, "NuGet Package Manager Console" penceresini açıp aşağıdaki komutu kullanarak paketi yükleyebilirsiniz:

        bash
        Copy code
        Install-Package System.Data.SQLite
******************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************
Form1 ff = new Form1();
         ff.ShowDialog();


          Console.WriteLine("merhababaaaaaa");
c# dilinde showDialog ile form açılıyor ama ben açıldıktan sonra alltaki yazıyıda yazdırsın istiyorum yani programın okuması orada takılı kalıyor ne yapmam lazım
ChatGPT
ShowDialog metodu, ilgili form kapatılana kadar kontrolü ele geçirir. Bu nedenle, ShowDialog metodundan sonra gelen kodlar, form kapandığında çalışır. Eğer formun üzerindeki işlemler tamamlandıktan sonra bir şeyler yapmak istiyorsanız, Form1 sınıfınızda bir olay (event) tanımlayarak bu olayı uygun bir durumda tetikleyebilirsiniz. Örneğin, formunuz kapatıldığında bir olay tetikleyerek ardından gelen kodları çalıştırabilirsiniz.

c#'da from uygulaması showDialog ile açıldıktan sonra o panel açık olduğu sürece alt satıra geçmez programın okuma imleci orada takılı kalır taki kapanana kadar...


C# dilini daha ileri seviyede öğrenmek için aşağıdaki konulara odaklanabilirsiniz. Bu konular, C# programlamadaki ileri seviye konseptlere ve geliştirme tekniklerine odaklanmaktadır:

Nesne Yönelimli Programlama (OOP):
    C#'da nesne yönelimli programlama temel bir konsepttir. Sınıflar, nesneler, miras, soyut sınıflar, arayüzler, çoklu kalıtım gibi OOP konularını öğrenmek önemlidir.

İleri Seviye Dil Özellikleri:
    C#'daki en yeni dil özelliklerini anlamak ve kullanmak için çalışın. Örneğin, C# 8 ve sonraki sürümlerdeki özellikler arasında nullable reference types, pattern matching, switch expressions gibi konular bulunmaktadır.

LINQ (Language Integrated Query):
    LINQ, veri sorgulama ve manipülasyonu için kullanılan güçlü bir dil entegre sorgu aracıdır. LINQ kullanarak veri tabanlarına, koleksiyonlara ve diğer veri kaynaklarına sorgular yazmayı öğrenmek önemlidir.
Asenkron ve Paralel Programlama:
    Modern uygulamalar genellikle asenkron ve paralel programlama tekniklerini kullanır. async ve await anahtar kelimelerini kullanarak asenkron programlamayı, paralel programlamayı da inceleyerek çoklu iş parçacığı (multithreading) konularını anlamak önemlidir.

Exception Handling (İstisna Yönetimi):
    Hata işleme konusunu daha iyi anlamak için try, catch, finally bloklarını kullanma becerisi geliştirmek önemlidir.
Veri Tabanı Programlaması:
    Entity Framework veya Dapper gibi C# ile entegre veri tabanı erişim araçlarını öğrenmek ve kullanmak.
    
ASP.NET MVC veya ASP.NET Core:
    Web uygulamaları geliştirmek için ASP.NET MVC veya ASP.NET Core framework'ünü öğrenmek. MVC tasarım deseni, routing, middleware kavramlarına hakim olmak önemlidir.

Unit Testing (Birim Testleri):
    NUnit, xUnit veya MSTest gibi birim testi çerçeveleri kullanarak uygulamalarınızı test etmeyi öğrenmek. Test yazma, test odaklı geliştirme ve test otomasyonu konularına hakim olmak önemlidir.
Dependency Injection ve IoC (Inversion of Control):
    Uygulama bağımlılıklarını yönetmek için Dependency Injection (Bağımlılık Enjeksiyonu) ve IoC konularını anlamak ve uygulamak.

Git ve Source Control Sistemleri:

Git gibi versiyon kontrol sistemlerini kullanarak kodunuzu yönetmeyi öğrenmek.
Bu konuları öğrenmek ve uygulamak, C# dilindeki yeteneklerinizi daha da geliştirmenize yardımcı olacaktır. Ayrıca, projeler üzerinde çalışmak ve gerçek dünya uygulamaları geliştirmek de öğrenme sürecinizi hızlandıracaktır.

......................................................................................................................................................................................................................................................................................................................................................................................................

C# programlama dilinde, bellek yönetimi iki temel alanı içerir: stack (yığın) ve heap (örtü). Bu iki alan, programın çalışma zamanında verileri depolamak için kullanılır, ancak farklı özelliklere sahiptir.

Stack (Yığın):
Stack, programın çalışma zamanında yönetilen bir bellek alanıdır. Bu alanda veriler, sıralı bir şekilde depolanır ve bu verilere hızlı erişim sağlanır. Stack'te veri depolamak için kullanılan bellek alanı, genellikle yönetilen (managed) veri tipleri ve değer tipleri içindir. İşte stack'te tutulan bazı veri tipleri:

Değer Tipleri:

int, char, float, double, bool gibi temel veri tipleri.
struct tarafından tanımlanan yapılar.
Yerel Değişkenler:

Metot içerisinde tanımlanan değişkenler.
Metot Çağrıları:

Metot çağrıları ve metot çağrılarına ait yerel değişkenler.
Stack'te depolanan veriler, programın akışı içinde meydana gelen işlemlerle birlikte otomatik olarak tahsis edilir ve serbest bırakılır. Stack, veri tipleri için hızlı erişim sağlar, ancak boyutları genellikle sınırlıdır ve yaşam süreleri kısa olduğu için otomatik olarak serbest bırakılır.

Heap (Örtü):
Heap, programın çalışma zamanında yönetilen bir diğer bellek alanıdır. Heap'te depolanan veriler, daha uzun ömürlüdür ve belirli bir yaşam süresine sahiptir. Genellikle heap, dinamik olarak tahsis edilen ve serbest bırakılan bellek alanıdır. Heap'te tutulan bazı veri tipleri şunlardır:

Referans Tipleri:

class tarafından tanımlanan nesneler.
string gibi dinamik bellek tahsisi gerektiren türler.
Dinamik Bellek Tahsisi:

new anahtar kelimesi ile oluşturulan nesneler.
Heap'te depolanan veriler, programcı tarafından elle serbest bırakılmalıdır (örneğin, Dispose veya Close gibi yöntemler kullanılarak), aksi takdirde bu bellek sızıntılarına neden olabilir.

İki bellek alanı arasındaki temel farklar şunlardır:

Hız ve Erişim Süresi: Stack, hızlı bir erişim sağlar çünkü bellek alanı sıralıdır. Heap ise daha fazla işlem gerektirir ve dolayısıyla daha yavaş erişim sağlar.

Ömür ve Kapsam: Stack'te depolanan veriler genellikle kısa ömürlüdür ve otomatik olarak serbest bırakılır. Heap'te depolanan veriler daha uzun ömürlüdür ve programcı tarafından serbest bırakılmalıdır.

......................................................................................................................................................................................................................................................................................................................................................................................................


// blank solution boş bir çözüm ekranı açar...
// existing project ile projelerin benzer kısımlarını çekebiliriz...
// bazen framework sürüm farklılığından dolayı projeler çalışmayabilir buna dikkat etmek lazım...
// Sürümlerde üst olan hepsini kapsar ama 4.7.2   4.8 ile yazılmış olanı desteklemeyebilir. ama 4.8 kendinden alt olanları destekler.  
// nuget ile biz istersek dependies ekleyebiliriz entity framework gibi...
// c#da her veri wrapper classtır yani her ver bir nesnedir. bu yüzden her verinin metotlarını kullanabiliriz. mesela int a = 8; deriz a.equals vs kullanabiliriz...  eğer bir metotta yollayıp değerinin değişmesini falan istersek o zaman ref ile yollarız...
// static metot static main içinde çalışabilir static olmayan değer static içinde çalışmaz... static-static veya non-static - non-static olmalı...
// mesela bir class'ın oluşması için önce onun superclass'ı oluşmalı oluşurken default constructor çalışır....
degistir(ref a)
public void degisttir(ref int b) gibi...

c#da ilkel yapılar yoktur. her şey nesnedir... wrapper classtır aslında veriler.
            Console.WriteLine(int.MinValue);   // mesela direkt olarak int class'ının içindeki static MinValue değerini çağırabiliriz...  static olan değerleri ve metotları direkt olarak class ile kullanabiliriz...
            Console.WriteLine(int.MaxValue);

Console.WriteLine(int.MinValue + " EMRE"+ byte.MinValue+" FORD"+byte.MaxValue);
     + demek String'de ekleme yap demektir. böylece tüm değerler string'e döner ve işlem yapabiliriz...



            double say11 = 12.2;
            Console.WriteLine(say11);
            float say12 = (float)12.33;  // her noktalı değer aslında double'dir bizim atama yaparken float'a tip dönüşümü yapmamız lazım uppercasting yapmamız gerekiyor...
            Console.WriteLine(say12);




c#tada diğer dillerde olduğu gibi tüm veriler tanımlanır bir metot eğer bir değer dönderiyorsa o zaman tipinde karşılanır int sayi1 = sayigetir(); gibi.

Tam Sayı Veri Tipleri:

int: 32 bitlik işaretli tam sayı.
long: 64 bitlik işaretli tam sayı.
short: 16 bitlik işaretli tam sayı.
byte: 8 bitlik işaretli tam sayı.
sbyte: 8 bitlik işaretli tam sayı.

Ondalıklı Sayı Veri Tipleri:

float: 32 bitlik ondalıklı sayı.
double: 64 bitlik ondalıklı sayı.
decimal: 128 bitlik ondalıklı sayı.

Karakter Veri Tipleri:

char: 16 bitlik Unicode karakter.

Boolean Veri Tipi:

bool: Mantıksal (true veya false) değeri temsil eder.

Metinsel Veri Tipleri:

string: Metin verilerini tutan veri tipi...  
        Console.WriteLine(String.Format("{0} {1}",str1,str2));   böylede kullanabiliriz...
        .Length ile uzunluk alabiliriz...
        string aa = bb.Clone(); ile ise biz bb'nin içeriğini aa'ya atayabiliriz. 
        string.IsNullOrWhiteSpace(str1)   true false çevirir... boş değilse false çevirir mail adresi için falan kullanılır.

Object Veri Tipi:

object: Tüm diğer türlerin temel türüdür. Her türden bir nesneyi temsil edebilir.
Diziler:

int[], string[], vb.: Belirli bir türdeki elemanları içeren diziler.
Nullable Veri Tipleri:

int?, bool?, vb.: Nullable türler, değerlerin null olabileceği anlamına gelir.
Enumerations (Enum):

enum: Belirli bir türdeki sabit değerlerin adlarını içeren bir türdür.
Yapılar (Structures):

struct: Değer türleri olan, ancak sınıflar gibi davranabilen türler.
Sınıflar (Classes):

class: Referans türleri olan ve nesne tabanlı programlamanın temelini oluşturan türler.
Interface ve Arayüzler:

interface: Bir sınıfın uygulamasını zorlayan bir sözleşme sağlayan tür.

// oop demek encapsulation,polymorphism and inheritance demektir aslında...
// interfaceler aslında birer sözleşmelerdir böylece içerisindeki metotları override etmek zorunlu olur implement eden class tarafından...

################################################################################################################################################################################################################################################


            Console.WriteLine(Byte.MaxValue); // 255    256 vermeye çalışırsan Byte değere o zaman hata verir...
            Console.WriteLine(Byte.MinValue); // 0
            Console.WriteLine(long.MinValue); // -9223372036854775808
            Console.WriteLine(long.MaxValue); //   9223372036854775807
            Console.WriteLine(int.MaxValue); // 2147483647    32 bit 4 byte 2^^32 değer alır.
            Console.WriteLine(int.MinValue); // - 2147483648
            Console.WriteLine(long.MaxValue / int.MaxValue); // 4294967298
            Console.WriteLine(double.MinValue); //-1,79769313486232E+308
            Console.WriteLine(double.MaxValue); // 1,79769313486232E+308
            Console.WriteLine(ulong.MaxValue); // 18446744073709551615
            Console.WriteLine(ulong.MinValue); // 0
            Console.WriteLine(sbyte.MaxValue); // 127
            Console.WriteLine(sbyte.MinValue); // - 128
            Console.WriteLine(short.MaxValue); // 32767
            Console.WriteLine(short.MinValue); //-32768
            Console.WriteLine(ushort.MaxValue); //65535
            Console.WriteLine(ushort.MinValue); //0
            Console.WriteLine(uint.MaxValue); // 4294967295
            Console.WriteLine(uint.MinValue); // 0
            Console.WriteLine(decimal.MaxValue); // 79228162514264337593543950335     // 12 byte'dır noktadan sonra 28-29 basamak duyarı vardır...  doublede 15 16 basamak iken decimalde 28 29 böylece hassaslık çok artar...
            Console.WriteLine(decimal.MinValue); // -79228162514264337593543950335  
            Console.WriteLine(char.MinValue); // nulldan başlar
            Console.WriteLine(char.MaxValue); // ?'e kadar gider çok fazla karakterleri tutabilir. tüm dillerin alfabelerindeki harfleri tutabilir. 2 bytedir 16 bit...

bool true veya false alır mantıksal veridir... a == b demek (a == b)   bize true veya false döndürecek demektir    return a == b diyebiliriz a == b 'de true veya false dönecek zaten...

internal bir erişim belirleyicisidir ve C# dilinde bir sınıfın veya bir üyenin, yalnızca bulunduğu proje içinde erişilebilir olmasını sağlar. internal olarak işaretlenen bir sınıf veya üye, aynı derleme içindeki diğer sınıflar tarafından erişilebilir, ancak başka bir derleme tarafından erişilemez.

    "Aynı derleme" ifadesi, bir C# projesinde bir araya getirilen tüm kodun toplandığı ve derlendiği yapıyı ifade eder. Bir C# projesi, bir veya birden fazla sınıf ve dosyanın bir araya getirildiği bir "derleme" üretir. Bu derleme genellikle bir .dll (dinamik bağlantı kitaplığı) veya .exe (yürütülebilir dosya) uzantısına sahiptir.

    Bir C# projesindeki tüm sınıflar, yapılar, enum'lar, metotlar ve diğer üyeler, projenin derlenmiş çıktısı içinde bir araya getirilir. Bu çıktıya "derleme" denir. Eğer tüm bu kodlar aynı proje içinde yer alıyorsa, bu kodlar aynı derleme içindedir.

    Eğer bir sınıf veya üye internal olarak işaretlenmişse, bu, bu sınıfın veya üyenin sadece aynı derleme içindeki diğer kodlar tarafından erişilebileceği anlamına gelir. Yani, internal olarak işaretlenen bir sınıf veya üyenin erişilebilir olması için, bu sınıf veya üyenin bulunduğu proje içinde olması gerekmektedir.

    Aynı derleme içinde olmak, bir C# projesinin sınıflarının, üyelerinin ve diğer yapılarının bir araya getirildiği ve derlendiği fiziksel sınırları ifade eder. Eğer farklı projeler arasında kod paylaşımı yapmak istiyorsanız, bu durumu public veya başka bir erişim belirleyici ile yönetmeniz gerekir.


// her kesirli sayı doubledir float vs yapmak istersek o zaman tip dönüşümü yapmak lazım (float) 5.6   veya 5.6f  olarak
double sayi1 = 5/4;  1.0 olur   5 int 4 int spnuç int 1 olur double olunca 1.0 olur....    (double) 5 / 4 olsa 5.0 / 4 olur  o zaman 1.25 çıkar direkt olarak...

bölümde falan kesirli sayılarda kayıplar olabilir bunun için decimal kullanılır... hassas hesaplar için decimal kullanırız. bunu e ticaret sitelerinde vs kullanabiliriz...
     tip dönüşümlerinde kayıplar vs olabilir kesirlerden kaynaklı kayıplar olabilir bunun için decimal kullanırız hassas hesaplarda...

karakterler '' içeriisnde stringler ise "" içerisinde belirtilmelidir. pythona böyle bir fark yoktur mesela...
'' içerisinde tek bir karakter belirtilebilir.
"" olursa karakter dizisi içerebilir.

\ demek benden sonra gelecek olan bilgisayarın program komutu değil demektir.
          ana \n alt satır \t ise bir tab boşluk demektir.

c# büyük harf küçük harf ayrımı yapar int sayi1,Sayi1; yapabiliriz... yani farklı olacaktir ikiside...

*******CASTİNG büyük alandaki veri küçük alana geçemez geçecek olursa kayıplar olur ancak casting ile kayıplarla beraber yapmak mümkün. küçük veriyi büyük veri tipine sorunsuz dönüştürebiliriz. 
  mesela floatı doubleye sorunsuz atabiliriz.  ama doubleyi dönüşüm yapmadan atamayız atarsakta kayıplar olur veri kaybı olur.
  long inti sorunsuz alır veri kaybı olmadan ama tam tersi zor.
  intin long'a atanması implicit(istemsiz) dönüşümdür bir hata vermez.     
  longun int olması ise explicit döünüşümdür dönüşümü belirtmek lazım downcasting yapmak gerekir. 
  longu int yapmak için derleyiciyi ikna etmemiz lazım....
  c#da java gibi önce derlenir sonra yorumlanır.
  explicit yaparsak manuel yapmalıyız  double sayi1 = 18.8;    int sayi2 = (int)sayi1; gibi...


            Console.WriteLine(Convert.ToString(3.43));
            Console.WriteLine(Convert.ToInt64(3.43));
            int sayi12 = Convert.ToInt32("12");
            long sayi13 = Convert.ToInt64("1221");

Convert.ToTip   ile biz içerisine attığımız değeri istenen değere çeviririz. ve bu yapı isteneni return eder... int'e atama yapacaksak Convert.ToInt32(); kullanmamız lazım 
Convert.ToInt32() bu bize değer return edecek ve kullanacağız.



################################################################################################################################################################################################################################################

dizilerde veri tipleri aynı olur;
Array bir sınıftır

            int[] array = { 1, 2, 3, 4, 5, }; // burada direkt atama yapabiliriz... 
            int[] array2 = new int[10]; // burada ise 10 tane int değer alacak yer ayırırız ve otomatik olarak hepsi sıfır olur sayılarda ilk atama otomatik sıfırdır string ve class'larda ise nulldır.

Arraylerde referancelerla çalışır yani 
        public static void degistir(int[] a)
        {

            a[0] = 11;


        }   // buraya bir array gelirse ilk değeri 11 olacak kalıcı şekilde...  bunun nedeni arrayler aslında referancedir.

int[][] ab = new int[10][];  // burada 10 tane int dizisi olacak diyoruz... ikinci [] atamaya gerek yok ama atarsak sabit olarak onlarda o sayı kadar değer taşıyan int arrayler olacak... 
yani ab 10 tane int array taşıyan bir array'dir.  ab.length dersek 10 alırız...
int[][] ab = new int[10][6]; dersek eğer 10 tane 6 tane int değer taşıyan aarray vardır 6,6,6,6,6,6,6,6,6,6,6 olacak şekilde...

            int[][] ab = new int[10][];
            for (int i = 0; i < ab.Length; i++)
            {
                ab[i] = new int[9];
            }
            // bu şekilde ise 10 kere çalışır for ve her arraye bellekte yer ayırır her arrya 9 tane değer alabilir hale gelir.  bu yapı ile kapasiteleri farklı arraylerden oluşan matrisler kurabiliriz.

ab[1][1] = 100; diyerek direkt atama yapabiliriz...

mesela 10 kapasiteli bir array var 11.ciye atama yapmak istersek hata alırız.

string[] ise string değer taşıyan bir arraydir bu bir referancedir.

array[index]  ile istenen elemana ulaşırız. indexin arrayin boyutuna göre olması gerekir bu önemlidir.  yoksa hata verebilir.

int[,] demekte 2 boyutlu bir dizidir.
int[,,] ise 3 boyutlu demektir...

..........................................................................................

            int[][] aa = new int[10][];
            for (int i = 0; i < aa.Length; i++) {
                aa[i] = new int[9];
            }

            for (int i = 0;i < aa.Length; i++) { 
            for (int j = 0; j < aa[i].Length; j++)
                {
                    Console.Write(aa[i][j]);  // aa[i,j] de olabilir fark etmez... 

                }
                Console.WriteLine();

            }

int[,] aa = new int[2,3] yapabiliriz  3,3 eleman taşıyan bir matris olur böylece.
veya aa = {{1,1,1},{1,1,1}} yapabiliriz.

..................................................................................................

% kalan bulma... a += b ;  a'ya b eklenir -= çıkarır *= çarpar.    ++ tek arrttırma -- tek çıkarma     solda veya sağda olması önemli solda olursa önce değeri değişir sonra işleme dahil olur sağda olursa önce işleme dahil olur sonra değeri değişir.

(float) a / b    ile (float) a / (float) b arasında fark olabilir dikkat etmek lazım...

        C# dilinde, operatörler matematiksel işlemlerden mantıksal kontrol işlemlerine kadar birçok farklı kategoride bulunmaktadır. Ayrıca, operatörlerin öncelik sıralaması da önemlidir, çünkü bu sıralama ifadeyi değerlendirirken kullanılır.

        İşte C# dilinde kullanılan bazı temel operatörler ve öncelik sıralaması:

        Matematik Operatörleri:

        + (toplama)
        - (çıkarma)
        * (çarpma)
        / (bölme)
        % (mod alma)
        Artırma ve Azaltma Operatörleri:

        ++ (artırma)
        -- (azaltma)
        Atama Operatörleri:

        = (atama)
        +=, -=, *=, /=, %= (toplama, çıkarma, çarpma, bölme, mod ile atama)
        Mantıksal Operatörler:
        a /= 10; demek a'yı 10 böl çıkan değeri a'ya ata demek %= içinde aynısı geçerli diğerleri içinde geçerliler...


        && (ve - AND)
        || (veya - OR)
        ! (değil - NOT)
        () parantezlerin içinin önceliği var... buna dikkat etmek lazım.
        (a > b) && (b  < c)  önce sağ sol parantez sonuç return eder sonra && çalışır...
        Karşılaştırma Operatörleri:  True veta False ile çalışırlar.

        == (eşit)
        != (eşit değil)
        < (küçük)
        > (büyük)
        <= (küçük veya eşit)
        >= (büyük veya eşit)
        Bitwise Operatörler:

        & (ve)
        | (veya)
        ^ (XOR - özel veya)
        ~ (bütünleyen)
        << (sol kaydırma)
        >> (sağ kaydırma)
        Koşullu Operatör:

        ? : (koşullu ifade)   (koşul <= mesela) ? True halde return edilecek: False halde return edilecek;


            int a = 0, b = 1;
            string sonuc = (a == b) ? "esit" : "degil"; // True ise soldakini atar False ise sağdakini atar...
            Console.WriteLine(sonuc); // degil...

        Tip Dönüşüm Operatörleri:

        (tip) (dönüşüm operatörü)
        as (as operatörü)
        is (is operatörü)
        Operatörlerin öncelik sıralaması, bir ifadenin hangi operatörün önce değerlendirileceğini belirler. Öncelik sıralaması, matematiksel operatörlerin öncelikli olması, ardından karşılaştırma, mantıksal ve diğer operatörleri içerir. Ancak, ifadeyi açıklığa kavuşturmak için parantezler kullanılabilir. Örneğin, parantez içindeki ifadeler her zaman önceliklidir.


bir if else if else bloğunda sadece bir tanesi çalışır...  sırası ile okur ilk sağlanan koşula girer hiçbirisi çalışmazsa else çalışır. else olmasada olur...
int a = -10;
if(a > 0){

+

}else if(a == 0){

0

}else{

-

}


################################################################################################################################################################################################################################################

    internal class Program
    {
        static void Main(string[] args)
        {
            int sayi1 = 0;
            atamayap(ref sayi1);
            Console.WriteLine(sayi1);





        }

        public static void atamayap(ref int a)
        {

            a = Convert.ToInt32(Console.ReadLine());
        
        }


    } // sayıya atama yapan bir program...


static ile class'a bağlarız bir değeri veya metotu... static metot içerisinde static olmayan metot nesnesiz şekilde çalışamaz...
void geriye değer döndermez. bir metot kullanacaksak return yapacaksa ne türden yapacak belirlememiz lazım.

static int kucukharfsayisi(string s){

int aa = 0;

foreach(var i in s){    // foreach ile karakter karakter string üzerinde dönebiliriz...

if(char.IsLower(i)) aa++; 

}
return aa;
}



......................................................................................................................................................................................

        static void Main(string[] args)
        {

            yazdir(a: "TT",c:"YY",b:"GHGH");   // bu şekilde bir metota gönderilecek değerlerin hangisi tarafından karşılanmasını istediğimizi belirtebiliriz...

        }




        public static void yazdir(string a , string b, string c)
        {

            Console.WriteLine(a + " " + b + " " + c);

        }

        public static void yazdir(string a , string b)  // burada ise aynı tipte aynı isimde farklı parametreli metotlar ile metot overloading yapaarız ve program verilen değişkenlere göre kendisini en az yoran ve en uygun olanı çağırır...
        {

            Console.WriteLine(a + " " + b);

        }

......................................................................................................................................................................................

C# programlama dilinde metotlar, kodunuzu modülerleştirmenin ve tekrar kullanılabilirliği artırmanın önemli bir yolu olarak karşımıza çıkar. Metotlar, belirli bir görevi yerine getiren ve genellikle bir isimle çağrılabilen kod bloklarıdır. Bu yazıda, C# dilinde metotların nasıl tanımlandığı, kullanıldığı ve özelleştirildiği konularına detaylı bir şekilde odaklanacağız.

Metot Tanımı:
C# programlama dilinde bir metot, aşağıdaki gibi bir yapıda tanımlanır:

erişim_belirleyici dönüş_türü MetotAdı(parametre_listesi)
{
    // Metotun içeriği
}
Erişim Belirleyici (Access Modifier): Metodun ne kadar görünür olduğunu belirler. Örneğin, public, private, protected, internal gibi.

Dönüş Türü (Return Type): Metodun geri döndüğü değerin türünü belirtir. Eğer metot bir değer döndürmüyorsa void kullanılır.

Metot Adı: Metodu çağırırken kullanılacak ismi belirtir.

Parametre Listesi: Metotun içinde kullanılacak değerleri almak için kullanılır. Parametreler opsiyonel olabilir.

Örnek Bir Metot Tanımı:

public int Topla(int sayi1, int sayi2)
{
    int toplam = sayi1 + sayi2;
    return toplam;
}
Bu metot, iki tane int tipinde parametre alır (sayi1 ve sayi2), bu sayıları toplar ve sonucu int türünde geri döner.

Metot Kullanımı:
Bir metodu kullanmak için, öncelikle sınıfın bir örneğini oluşturmalı veya metot static olarak tanımlanmışsa sınıf adı üzerinden çağrılmalıdır.


// Metot çağrısı
int sonuc = Topla(5, 7);
Console.WriteLine("Toplam: " + sonuc);
Parametre Türleri ve Seçenekler:
Metotlara parametreler ile veri iletimi yapılır. Parametreler, değer türleri (int, float, char, vb.) veya referans türleri (class, array, interface, vb.) olabilir. Ayrıca, parametreler opsiyonel olabilir, varsayılan değerler atanabilir.


public void Yazdir(string metin, int tekrarSayisi = 1)
{
    for (int i = 0; i < tekrarSayisi; i++)
    {
        Console.WriteLine(metin);
    }
}
Bu metot, bir metni belirli bir sayıda ekrana yazdırmak için kullanılır. tekrarSayisi parametresi varsayılan olarak 1'e ayarlanmıştır, ancak metot çağrısı sırasında farklı bir değer atanabilir.

Overloading (Aşırı Yükleme):
Bir sınıf içinde aynı isme sahip fakat farklı parametre listelerine sahip birden fazla metot tanımlamak mümkündür. Bu duruma "overloading" denir.


public int Topla(int sayi1, int sayi2)
{
    return sayi1 + sayi2;
}

public double Topla(double sayi1, double sayi2)
{
    return sayi1 + sayi2;
}
Bu örnekte, Topla isimli iki farklı metot tanımlanmıştır. İlk metot int türünde, ikinci metot ise double türünde çalışır.




ref ve out Parametreleri:
ref ve out parametreleri, metotların değerleri dışarıdan değiştirmesine izin verir.


public void Arttir(ref int sayi)
{
    sayi++;
}

public void Bol(ref int bolen, int bolunen, out int bolum)
{
    bolum = bolen / bolunen;
}



params Parametresi:
params anahtar kelimesi, değişken sayıda parametre alabilen bir metot tanımlamak için kullanılır.


public int Topla(params int[] sayilar)
{
    int toplam = 0;
    foreach (int sayi in sayilar)
    {
        toplam += sayi;
    }
    return toplam;
}



static Metotlar:
Bir metot static olarak tanımlandığında, sınıf adı üzerinden çağrılabilir ve sınıfın bir örneği oluşturulmasına gerek yoktur.


public class Matematik
{
    public static int KareAl(int sayi)
    {
        return sayi * sayi;
    }
}

// Kullanım
int sonuc = Matematik.KareAl(4);
Bu örnekte, KareAl metodu static olarak tanımlanmış ve Matematik sınıfı üzerinden çağrılmıştır.

Lambda İfadeleri ile Kısa Metotlar:
C# 3.0 ve sonrasında lambda ifadeleri kullanarak kısa metotlar tanımlamak mümkündür.


Func<int, int, int> topla = (x, y) => x + y;
Console.WriteLine(topla(3, 4));
Bu örnekte, topla adında bir lambda ifadesi kullanılarak kısa bir toplama metodu tanımlanmıştır.




################################################################################################################################################################################################################################################

        namespace appConsole
        {


            public class MyName
            {
                




            }


            internal class Program
            {
                static void Main(string[] args)
                {
                    int sayi1 = 0;
                    atamayap(ref sayi1);
                    Console.WriteLine(sayi1);





                }

                public static void atamayap(ref int a)
                {

                    a = Convert.ToInt32(Console.ReadLine());
                
                }


            }
        }




################################################################################################################################################################################################################################################
    ref Anahtar Kelimesi:
    ref anahtar kelimesi, bir metoda argüman olarak geçirilen bir değişkenin, metot içinde değiştirilebileceğini belirtir. Bu, metot içinde değişen değerin, çağrıldığı yerdeki orijinal değişkeni etkileyebileceği anlamına gelir.

    
    public void Arttir(ref int sayi)
    {
        sayi++;
    }

    // Kullanım
    int sayi = 5;
    Arttir(ref sayi);
    Console.WriteLine(sayi); // 6
    Bu örnekte, Arttir metodu bir ref parametre alır ve bu parametre üzerinde yapılan değişiklikler, orijinal değişkeni etkiler.

    out Anahtar Kelimesi:
    out anahtar kelimesi, bir metot tarafından bir değer döndürülmesini sağlar. Ancak, out ile belirtilen bir parametre, metot çağrısı yapmadan önce başlatılmasına rağmen, metot içinde değer atanması gerekmez. out parametreleri, metottan birden fazla değeri döndürmek amacıyla da kullanılabilir.

  
    public void Bol(int bolen, int bolunen, out int bolum)
    {
        bolum = bolen / bolunen;
    }

    // Kullanım
    int bolum;
    Bol(8, 2, out bolum);
    Console.WriteLine(bolum); // 4
    Bu örnekte, Bol metodu out parametre kullanarak bir değeri döndürüyor. out parametreler, metottan değeri döndürmek için kullanıldıklarında, metotun içinde değer atanması zorunlu değildir.

    ref ve out Kullanımına İlişkin Noktalar:
    ref ve out parametreleri, metot çağrısı yapmadan önce başlatılmalıdır. out parametreleri özellikle metot içinde değer atanmasa bile başlatılmalıdır.

    ref ve out kullanımı, genellikle bir metotun birden fazla değeri değiştirmesi veya döndürmesi gerektiğinde tercih edilir.

    ref kullanımında, değer atanmış bir değişkenin referansı geçilir ve metot içinde değiştirilen değer, orijinal değişkeni etkiler.

    out kullanımında, metotun değeri döndürmesi gerektiğinde veya metotun içinde değer atanması gerektiğinde tercih edilir.

    Hem ref hem de out parametreleri, metotun başlığında belirtilen türde olmalıdır.

    Bu anahtar kelimeler, programlamada değerleri metotlar arasında aktarırken ve metotlardan değer alırken kullanılır ve C# dilinde esnek bir parametre geçirme ve döndürme mekanizması sağlar.
################################################################################################################################################################################################################################################

constructor yapıcı metotdur. çok önemlidir... constructor overloading yapabiliriz. istediğimiz parametreler ile çalışır hale getirebiliriz...

public olursa her yerden erişebilir... public'te erişim kısıtı yoktur.
protected ait olduğu sınıftan ve o sınıftan türetilen yerlerden erişilebilir.




            C# programlama dilinde, erişim belirleyicileri (access modifiers), bir sınıfın, üyenin (örneğin, bir alan, bir metot veya bir özellik) veya bir derlemenin başka kod bloklarından ne kadar görünür ve erişilebilir olduğunu belirten özel anahtar kelimelerdir. Erişim belirleyicileri, sınıfın, üyenin veya derlemenin erişilebilirliğini kontrol etmek için kullanılır ve bu sayede programın modülerliğini ve güvenliğini sağlar.
            C# dilinde beş temel erişim belirleyici bulunmaktadır:

            public:

            Herkes tarafından erişilebilir.
            Örneğin: public class Example { }


            private:

            Sadece tanımlandığı sınıf içerisinden erişilebilir.
            Örneğin: private int count;


            protected:

            Tanımlandığı sınıf ve bu sınıftan türetilmiş sınıflar tarafından erişilebilir. yani kalıtım almış sınıflar ve kendi sınıfı erişebilir bu metotlara ve değişkenlere... 
            Örneğin: protected void DoSomething() { }


            internal:

            Bulunduğu derleme içerisindeki herhangi bir sınıf tarafından erişilebilir.
            Örneğin: internal class InternalClass { }


            protected internal:
             
            Tanımlandığı sınıf, türetilmiş sınıflar ve bulunduğu derleme içerisindeki herhangi bir sınıf tarafından erişilebilir.
            Örneğin: protected internal string Name { get; set; }
               mesela bir class içinde protected bir değişken var kendi içeriisnde ve kalıtım alanların içerisinde çalışır bu protected metotlar ve değişkenler. başka bir class'ta nesne oluşturup'ta erişemeyiz. 
               private olursa eğer super kullanmadan erişemeyiz kalıtım devreye girerse. 

                                class class1
                                {

                                    protected string name = "emre";

                                }

                                class Program
                                {

                                    static void Main(string[] args)
                                    {

                                        Console.WriteLine();
                                        Console.WriteLine(aa.name); // hata verir. erişemeyiz...

                                    }

                                }


            Bu erişim belirleyicileri, sınıfların, üyelerin ve derlemelerin ne kadar görünür olduğunu kontrol etmek için kullanılır. Bu, bir kod tabanının iyi bir şekilde organize edilmesini, sınıfların ve üyelerin sadece gerekli yerlerden erişilebilir olmasını ve kodun güvenliğini sağlamak açısından önemlidir.

################################################################################################################################################################################################################################################

namespace appConsole
{
    class TTT
    {

        private int skor;
        public int Skor
        {
            
            get { return skor; } // get bloğu skor okunmak istediği zaman çalışır.
            set {  skor = value; } // set ise atama yapılmak istendiği zaman çalışır.

        }

    }
    class Program
    {

        static void Main(string[] args)
        {

            TTT aaa = new TTT();
            aaa.Skor = 1; // set çalışır. private değişkene atama yapar.
            Console.WriteLine(aaa.Skor); // get çalışır burada.  private skorun değerini döndürür...

        }


    }
}


.........................................................................................................................

    class Kisi
    {
        private int yas;
        private string dogumyeri;
        private string meslek;

        public int Yas { 

        get { return yas; }
            set { 
            

                if (value < 0)
                {

                    yas = 0;
                }
                else
                {
                    yas = value;
                }
            
            }
        
        }

        public string Dogumyeri
        {

             get { return dogumyeri; }
            set { dogumyeri = value;}

        }

        public string Meslek
        {

            get { return meslek; }
            set { meslek = value; }
        
        }



        public Kisi(int yas, string dogumyeri, string meslek)
        {
            this.yas = yas;
            this.dogumyeri = dogumyeri;
            this.meslek = meslek;
        }



    }


################################################################################################################################################################################################################################################

// properity olayı...


namespace appConsole
{
    class Kisi
    {
        public int yas {  get; set; }
        public string dogumyeri { get; set; } 
        public string meslek {  get; set; }

        public Kisi(int yas, string dogumyeri, string meslek)
        {
            this.yas = yas;
            this.dogumyeri = dogumyeri;
            this.meslek = meslek;
        }
    }


    class Program
    {

        static void Main(string[] args)
        {
            Kisi kisi1 = new Kisi(1,"b",meslek:"c");
            kisi1.yas++; kisi1.dogumyeri = "ist"; kisi1.meslek = "otomasyon";
            Console.WriteLine(kisi1.meslek);
            Console.WriteLine(kisi1.dogumyeri+" "+kisi1.yas);

        }


    }
}

################################################################################################################################################################################################################################################

            C# programlama dilinde, bellek yönetimi iki temel alanı içerir: stack (yığın) ve heap (örtü). Bu iki alan, programın çalışma zamanında verileri depolamak için kullanılır, ancak farklı özelliklere sahiptir.

            Stack (Yığın):
            Stack, programın çalışma zamanında yönetilen bir bellek alanıdır. Bu alanda veriler, sıralı bir şekilde depolanır ve bu verilere hızlı erişim sağlanır. Stack'te veri depolamak için kullanılan bellek alanı, genellikle yönetilen (managed) veri tipleri ve değer tipleri içindir. İşte stack'te tutulan bazı veri tipleri:

            Değer Tipleri:

            int, char, float, double, bool gibi temel veri tipleri.
            struct tarafından tanımlanan yapılar.
            Yerel Değişkenler:

            Metot içerisinde tanımlanan değişkenler.
            Metot Çağrıları:

            Metot çağrıları ve metot çağrılarına ait yerel değişkenler.
            Stack'te depolanan veriler, programın akışı içinde meydana gelen işlemlerle birlikte otomatik olarak tahsis edilir ve serbest bırakılır. Stack, veri tipleri için hızlı erişim sağlar, ancak boyutları genellikle sınırlıdır ve yaşam süreleri kısa olduğu için otomatik olarak serbest bırakılır.

            Heap (Örtü):
            Heap, programın çalışma zamanında yönetilen bir diğer bellek alanıdır. Heap'te depolanan veriler, daha uzun ömürlüdür ve belirli bir yaşam süresine sahiptir. Genellikle heap, dinamik olarak tahsis edilen ve serbest bırakılan bellek alanıdır. Heap'te tutulan bazı veri tipleri şunlardır:

            Referans Tipleri:

            class tarafından tanımlanan nesneler.
            string gibi dinamik bellek tahsisi gerektiren türler.
            Dinamik Bellek Tahsisi:

            new anahtar kelimesi ile oluşturulan nesneler.
            Heap'te depolanan veriler, programcı tarafından elle serbest bırakılmalıdır (örneğin, Dispose veya Close gibi yöntemler kullanılarak), aksi takdirde bu bellek sızıntılarına neden olabilir.

            İki bellek alanı arasındaki temel farklar şunlardır:

            Hız ve Erişim Süresi: Stack, hızlı bir erişim sağlar çünkü bellek alanı sıralıdır. Heap ise daha fazla işlem gerektirir ve dolayısıyla daha yavaş erişim sağlar.

            Ömür ve Kapsam: Stack'te depolanan veriler genellikle kısa ömürlüdür ve otomatik olarak serbest bırakılır. Heap'te depolanan veriler daha uzun ömürlüdür ve programcı tarafından serbest bırakılmalıdır.


// struct tanımlama ve kullanımı

struct node // struct demek yapı ismi node ise kullanılacak isim.   class'lara benzerler... classların nesneleri heap alanında tutulur referancelidir.  structlarınki ise stack alanında tutulur ilkel veriler gibi.
{ // metottda tanımlayabiliriz...

    public int deger;
    public String name;
    public void yazdir(){

Console.WriteLine("AAAAA"); // WriteLine alt satıra geçirir Write alt satıra geçirmez...

    }
}

public static void Main(String[] args){
            node node1 = new node();

            node1.name = "emre";
            node1.deger = 15;
}



################################################################################################################################################################################################################################################

c#da her şey class'lar içerisinde yer alır global değişken vs gibi bir şey yoktur...
string sınıf referance ile çalışır. bir metot onu değiştirebilsin istersek eğer o zaman ref ile göndermemiz gerekir ref ile karşılamamız gerekir.
string name; yaparsak name otomatik null olur... null ise "" dir...  ascii'daki 0...
string sınıfı System kütüphanesinin altında yer alır System.string olarak kullanabiliriz...
string s;  s.Length ile uzunluk alabiliriz...  s[0] s[1] ... ile istenen indexteki elemana ulaşabiliriz...


            foreach (var item in kisi1.meslek)
            {
                Console.Write(item + " ");
            } // foreach ile string üzerinde dönebiliriz...


string s = "emre";
string b = s.Clone(); // böylece içerik kopyalama yapabiliriz Clone() ile...
s == b True verir... içerik kıyaslaması yapar c# eğer referance karşılaştırması yapmak istersek o zaman string.ReferenceEquals(a,b); kullanırız.

Endswith(); ve StarsWtih() ile nasıl başayıp nasıl bittiğini görebiliriz...
.Indexof() ise arar yoksa -1 verir varsa başlangıç indexini verir...
LastIndexOf() ise sondan aramaya başlar...
Insert(index,"istenen"); ile ekleme yapabiliriz. return eder yeni metni... araya eklersek isteneni diğerleri sağa kayar... sağında kalanlar istenen araya girer yani...
SubString(index,index2); index dahil index2 dahil değil arada kalan metni return et demektir...
.Replace(eski,yeni); return eder kalıcı değişim değildir. eski ile yeniyi değiştirir...
.Remove(index,index2); return eder istenen aralıktaki şeyleri siler...

kullanılmayan değerler garbage collector tarafından silinir...

###ENUM#############################################################################################################################################################################################################################################

nesneleri numaralandırmak için kullanılırlar...


namespace appConsole
{
    class Kisi
    {
        public int yas {  get; set; }
        public string dogumyeri { get; set; } 
        public string meslek {  get; set; }

        public Kisi(int yas, string dogumyeri, string meslek)
        {
            this.yas = yas;
            this.dogumyeri = dogumyeri;
            this.meslek = meslek;
        }
    }





    class Program
    {

        enum Aylar  // veritabanınıda yer almasını istemediğimiz verileri static olarak tutar programda. public statictir.
        {
           Ocak,Şubat,Mart,Nisan,Mayıs,Haziran,Temmuz,Ağustos,Eylül,Ekim,Kasım,Aralık
        }

        enum SiparisDurumu : byte // byte ile sıralandır demektir...
        {

            Hazırlanıyor,Hazırlandı,Kargolandı

        }

        enum Meyveler : int  
        {
            Elma = 1,muz = 2,Çilek = 3

        }

        static void Main(string[] args)
        {

            byte a = (byte)Meyveler.muz;
            byte b = (byte)Meyveler.Elma;
            byte c = (byte)Meyveler.Çilek;
            Console.WriteLine("{0} {1} {2}",a , b , c);
            
            Console.Read();


        }


    }
}



################################################################################################################################################################################################################################################

            namespace appConsole
            {
            
                class Person
                {

                    public Person() // constructor....
                    {

                        Console.WriteLine(1 + " ");
                    }

                }

                class Person2 : Person // Person2 Persondan kalıtım almış oldu... Person superclass Person2 ise Subclass olur...
                {

                    public Person2() // constructor....
                    {

                        Console.WriteLine(2);
                    }

                }

                class Program { 

                    static void Main(string[] args)
                    {

                        Person2 person = new Person2();  // 1 2 yazdırır çünkü bir subclass'ın oluşabilmesi için superclass'ın default constructor'unun çalışması lazım... ve hatta önce değişkenler oluşur bir class'ta sonra metotlar. class'lar değişkenler ve metotlardan oluşurlar...
                        // superclass'un default constructoru(boş olan) çalışmadan bitmeden subclass oluşmaz...
                    }


                }
            }

...................................................................................................................................

    class Person3
    {
        string name;

        public void yazdir(string name)
        {
            Console.WriteLine(name); // metota gelen name'yi yazdırır... eğer metota gelenle nesnenin namesi farklı isimle tanımlanmış olsa name1,name2 olarak o zaman this. vs kullanmaya gerek kalmazdır... hangisi nesnenin hangisi metotun belirtmeye gerek olmazdı...
            Console.WriteLine(this.name); // nesnenin namesini yazdırır... 

        }
        
    }

...................................................................................................................................

        using System;

        // Birinci sınıf (kalıtım alınan sınıf)
        public class Animal
        {
            public void Eat()
            {
                Console.WriteLine("The animal is eating.");
            }
        }

        // Birinci arayüz
        public interface IMove
        {
            void Move();
        }

        // İkinci arayüz
        public interface ISound
        {
            void MakeSound();
        }

        // Sınıf, hem Animal sınıfından kalıtım alıyor hem de IMove ve ISound arayüzlerini uyguluyor.
        public class Dog : Animal, IMove, ISound // yani : karşısına kalıtım alınacak nesne ve interfaceler yazılırsa iş tamamlanmış oluyor...
        {
            public void Bark()
            {
                Console.WriteLine("Woof woof!");
            }

            public void Move()
            {
                Console.WriteLine("The dog is moving.");
            }

            public void MakeSound()
            {
                Console.WriteLine("Barking sound");
            }
        }

        class Program
        {
            static void Main()
            {
                // Dog sınıfından bir örnek oluşturup kullanım
                Dog myDog = new Dog();
                myDog.Eat();        // Animal sınıfından kalıtım alınan metodu kullanma
                myDog.Bark();       // Dog sınıfının kendi metodunu kullanma
                myDog.Move();       // IMove arayüzünden gelen metodu kullanma
                myDog.MakeSound();  // ISound arayüzünden gelen metodu kullanma
            }
        }

...................................................................................................................................

mesela bir class'ın birden fazla interfacesi var ve bunların metotlarını override etmedi o zaman o class abstract olur... abstract class'tan nesne üretilemez... eğer abstract class'tan türetilen bir sınıf override edilmemiş şeyleri yani hepsini override etmezse abstract olur... nesne oluşturulması için bir o yapıda en kötü ihtimalle abstract olmayan class'ta hepsinin(geriye doğru toplam) override edilmesi lazım

...................................................................................................................................

Polimorfizm, bir nesnenin farklı türlerde davranabilme yeteneğidir. C# dilinde polimorfizm, genellikle iki şekilde gerçekleştirilir: method overriding (metot ezme) ve arayüzler.

1. Method Overriding (Metot Ezme):
Polimorfizmin temel özelliklerinden biri method overriding'dir. Bu özellik, bir alt sınıfta, üst sınıfta tanımlanan bir metodun aynı imza (signature) ile tekrar tanımlanmasını ifade eder. Bu, üst sınıftan türetilen nesnelerin aynı ad ve parametrelerle farklı davranışlar sergilemesini sağlar.


        public class Animal
        {
            public virtual void MakeSound()  // virtual olması lazım eğer bir metot'un override edilebilir olması için...
            {
                Console.WriteLine("Animal makes a sound");
            }
        }

        public class Dog : Animal
        {
            public override void MakeSound() // override ile ise override ettiğimizi belirtiriz... böylece subclass'ın nesnesine özgü olacak metot...
            {
                Console.WriteLine("Dog barks");
            }
        }

        public class Cat : Animal
        {
            public override void MakeSound()
            {
                Console.WriteLine("Cat meows");
            }
        }

        class Program
        {
            static void Main()
            {
                Animal animal1 = new Dog();
                Animal animal2 = new Cat();

                animal1.MakeSound(); // Dog barks
                animal2.MakeSound(); // Cat meows
            }
        }

superclass subclass'larına referance olabilir mesela buradan köpekten golden türetelim o zaman Animal ona referance olabilirdi...

...................................................................................................................................

namespace appConsole
{

    public class Animal
    {
        public virtual void MakeSound()
        {
            Console.WriteLine("Animal makes a sound");
        }
    }

    public class Dog : Animal
    {
        public override void MakeSound()
        {
            
            Console.WriteLine("Dog barks");

        }

        public void sesyaphele()
        {
        
            Console.WriteLine("SES");

        }

    }

    public class Cat : Animal
    {
        public override void MakeSound()
        {
            Console.WriteLine("Cat meows");
        }
    }

    class Program { 

        static void Main(string[] args)
        {


            Dog aa = new Dog();
         aa.sesyaphele();
             Animal bb = new Dog();
            // bb.MakeSound(); // hata veriyor bunun nedeni şudur = çünkü çalışan değişkenler ve metotlar Referance'ın içindekilerine erişebiliyor. Yani Referans ne ise onu kullanabilir c# onun kod bloğu içerisini görebiliriz...

            if(bb is Dog) // is ile bir nesne new Dog()'tan mı oluşturulmuş bunu görebiliriz... 
            {
                Dog cc = (Dog)bb; // ama bunun çözümü belli şunu yapabiliriz... Tip dönüşümü ile bu sorunu çözebiliriz.
                cc.sesyaphele();
            }


        }


    }
}

################################################################################################################################################################################################################################################

encapsulation demek verinin veya metotun class içerisinde örtülmesi demektir. private ile yapabiliriz. verielrin veya metotların korunması içindir. kaliteli program yazmak içindir.
  ortak olan yzılımcıdan ve kendimizden kontrolsüz erişimi engellemek için kullanırız....

                    Encapsulation, sınıfın içindeki verilerin ve metodların sınıf dışından gelen erişimlere karşı korunmasıdır. Bu, sınıfın iç detaylarının saklanarak, sadece belirlenen metodlar aracılığıyla dış dünyaya erişilebilmesini sağlar.

                    using System;

                    public class BankAccount
                    {
                        private string accountNumber;
                        private decimal balance;

                        public BankAccount(string accountNumber, decimal initialBalance)
                        {
                            this.accountNumber = accountNumber;
                            this.balance = initialBalance;
                        }

                        // Getter ve setter metotları aracılığıyla private alanlara erişim
                        public string AccountNumber
                        {
                            get { return accountNumber; }
                            set { accountNumber = value; }
                        }

                        public decimal Balance
                        {
                            get { return balance; }
                            private set { balance = value; }
                        }

                        // Para çekme işlemi
                        public void Withdraw(decimal amount)
                        {
                            if (amount > 0 && amount <= balance)
                            {
                                balance -= amount;
                                Console.WriteLine($"{amount:C} withdrawn. New balance: {balance:C}");
                            }
                            else
                            {
                                Console.WriteLine("Invalid withdrawal amount or insufficient funds.");
                            }
                        }

                        // Para yatırma işlemi
                        public void Deposit(decimal amount)
                        {
                            if (amount > 0)
                            {
                                balance += amount;
                                Console.WriteLine($"{amount:C} deposited. New balance: {balance:C}");
                            }
                            else
                            {
                                Console.WriteLine("Invalid deposit amount.");
                            }
                        }
                    }

                    class Program
                    {
                        static void Main()
                        {
                            // Encapsulation örneği
                            BankAccount myAccount = new BankAccount("123456789", 1000.00m);

                            // Getter ve setter kullanımı
                            Console.WriteLine($"Account Number: {myAccount.AccountNumber}");
                            myAccount.AccountNumber = "987654321";
                            Console.WriteLine($"New Account Number: {myAccount.AccountNumber}");

                            // Getter kullanımı
                            Console.WriteLine($"Balance: {myAccount.Balance:C}");

                            // Para çekme ve yatırma işlemleri
                            myAccount.Withdraw(500.00m);
                            myAccount.Deposit(200.00m);
                        }
                    }

...................................................................................................................................


    // property ile kapsülleme... 
    public class Bolum
    {

        private String bolumadi;

        public String GetBolumAdi()
        {

            return this.bolumadi;

        }

        public void SetBolumadi(string bolumadi)
        {

            if (bolumadi != null ) // buradaki bolumadi fonksiyona gelen bolumadi...
            {
                this.bolumadi = bolumadi;

            }
            else
            {
                this.bolumadi="null";
            }
          
        }

    }




...................................................................................................................................

   
    public class Bolum
    {

        private String bolumadi;

          public string Bolumdi
        {
            get { return bolumadi; } 
            set { 

                if (value.Equals("Programlama"))
                {

                    this.bolumadi = "boyle bir bolum yok..";

                }
                else
                {

                      bolumadi = value;
                }
            
            }
        } 


    }

    
...................................................................................................................................
            namespace appConsole
            {

                class Program {

                    static int deger = 0; // static olursa bir değer veya metot class'a özgü olur...
                    private string isim {  get; set; } // getter setterarı böyle kullanabiliriz...
                    private string id;
                    public string Id
                    {
                        get { return this.id; }
                        set { 

                            if (value == null) { 
                            this.id = "null";

                            }
                            else
                            {
                                this.id = value;
                            }

                                
                                ; }
                    }

                    public void yazdir() 
                    {
                        if (Program.deger == 3)
                        {

                            return; // return void bir metotu bitirmek içinde kullanılabilir...
                            
                        }

                        Program.deger++; // static değer değişimini class üzerinden yapıyoruz...
                        Console.WriteLine("\\"); // \ demek benden sonra gelen komut karakteri değil demek \\ ile biz \yazdırırız.. tek \ olursa " olarak kalır hata verir çünkü diğerine komut değilsin der ama o komut...
                        Program aa = new Program(); //  her seferinde yeni nesne oluşuyor...
                        aa.yazdir(); // recursive olarak çalışır...


                    }

                    public override string ToString()
                    {
                        return "SELAM KAHPE";
                    }

                    static void Main(string[] args)
                    {
                        Program aa = new Program(); // bir class içeriisnde kendi türünde nesne oluşturabiliriz... ve metotlarını değişkenlerini kullanabiliriz...
                        aa.isim = "aa";// burada set çalışır 
                        Console.WriteLine(aa.isim); // aa yazdırır... ve get çalışır... {get; set;} ile otomatik olarak getter setter ekleyebiliriz... 
                        Console.WriteLine(aa); // SELAM KAHPE
                        aa.yazdir();



                    }


                }
            }

..................................................................................................................................................................................................................................................


            using System;

            // Üst sınıf (superclass)
            public class Animal
            {
                // Üst sınıfa ait iki değişken
                protected string name;
                protected int age;

                // Üst sınıfın constructor'ı
                public Animal(string name, int age)
                {
                    this.name = name;
                    this.age = age;
                }

                // Üst sınıfa ait bir metot
                public void DisplayInfo()
                {
                    Console.WriteLine($"Name: {name}, Age: {age}");
                }
            }

            // Alt sınıf (subclass)
            public class Dog : Animal
            {
                // Alt sınıfa ait üçüncü değişken
                private string breed;

                // Alt sınıfın constructor'ı
                public Dog(string name, int age, string breed) 
                    : base(name, age) // Üst sınıfın constructor'ını çağırma super yerine :base(...) yapısı vardır... nnormalde super olur ve en üstte tanımlanır burada ise :base() ile en üstte olup olmama durumu ortadan kalkmış direkt olarak çalışır super() yani base()...
                {
                    this.breed = breed;
                }

                // Alt sınıfa ait kendi metodu
                public void DisplayBreed()
                {
                    Console.WriteLine($"Breed: {breed}");
                }

                // Alt sınıfa ait bir metot, üst sınıftan gelen metodu çağırma
                public new void DisplayInfo()
                {
                    base.DisplayInfo(); // Üst sınıfın metodu
                    Console.WriteLine($"Breed: {breed}");
                }
            }

            class Program
            {
                static void Main()
                {
                    // Alt sınıfın nesnesini oluşturma
                    Dog myDog = new Dog("Buddy", 3, "Golden Retriever");

                    // Alt sınıfın metotlarını çağırma
                    myDog.DisplayInfo();   // Üst sınıftan gelen metodu çağırma
                    myDog.DisplayBreed();  // Alt sınıfa ait metodu çağırma
                }
            }



################################################################################################################################################################################################################################################

interface sözleşme gibidir... metotları override edilmelidir.
interfaceler property barındılarabilir metotların tipini çalışma biçimini barındırabilirler...  int sayi{get;set;} gibi sonradan özelleştirmemiz lazım ama...
gövdeli metot olamaz. değişken tanımlanamaz.
constructor olamaz.
interface ile nesne üretilemez. ancak referance olabilir ama kendi metotlarına(tam emin değilim öyle herhalde)....
interfaceler kendisi arasında türetilebilir subinterface superinterface olayı vardır.
interfaceler genel olarak I ile başlarlar...
çoklu kalıtım interfaceler ile yarım yamalak sağlanırlar...
interfaceler erişim belirleyici almaz daima public'tir... public olmayan bir şey alamaz interface...
interface içerisinde static bir yapı kuramayız...
interfaceler parametreli metot imzası alabilir... void yazdir(string a, int 5); ...



............................................................................................................................................................................................................................................................................................
                C# dilinde, bir arayüz (interface), bir veya birden fazla sınıfın veya struct'ın belirli metotları, özellikleri ve olayları uygulamasını sağlayan bir türdür. İnterfaceler, çok sayıda türü ortak bir davranışa sahip olacak şekilde birleştirmek ve kodun daha esnek, modüler ve okunabilir olmasını sağlamak için kullanılır.

                Temel Arayüz Tanımı:
                Bir arayüz tanımı şu şekildedir:

        
                public interface ILogger
                {
                    // Metot tanımı
                    void Log(string message);

                    // Özellik tanımı
                    string LogName { get; set; }  // get ve setleri belirlememiz lazım ama...
                    
                    // Olay tanımı
                    event EventHandler LogEvent;
                }
                Bu örnekte, ILogger adında bir arayüz tanımlanmıştır. Bu arayüz, bir logger'ın (günlük kaydedici) temel davranışını tanımlar: Log metodu ile bir mesajı kaydetmek, LogName özelliği ile log adını almak ve LogEvent olayını kullanarak bir log olayını bildirmek.

                Arayüzü Uygulayan Bir Sınıf:
                Bir sınıf, bir arayüzü implements (uygular) anahtar kelimesiyle uygular. Örneğin:

            
                public class ConsoleLogger : ILogger
                {
                    // ILogger arayüzünden gelen metot
                    public void Log(string message)
                    {
                        Console.WriteLine($"Log: {message}");
                    }

                    // ILogger arayüzünden gelen özellik
                    public string LogName
                    {
                        get { return "ConsoleLogger"; }
                        set { /* Setter içeriği, gerektiğine göre uygulanabilir */ }
                    }

                    // ILogger arayüzünden gelen olay
                    public event EventHandler LogEvent;

                    // Başka metotlar, özellikler ve olaylar da eklenebilir.
                }
                Bu örnekte, ConsoleLogger sınıfı, ILogger arayüzünü uygular. Arayüzden gelen metot, özellik ve olaylar bu sınıf içinde gerçekleştirilir.


                Arayüz Kullanımı:
               
                class Program
                {
                    static void Main()
                    {
                        // ILogger arayüzü üzerinden nesne oluşturma
                        ILogger logger = new ConsoleLogger();

                        // Arayüz metotları kullanımı
                        logger.Log("Hello, Interface!");
                        Console.WriteLine($"LogName: {logger.LogName}");

                        // Arayüz olayına abone olma
                        logger.LogEvent += (sender, e) =>
                        {
                            Console.WriteLine("Log event triggered!");
                        };

                        // Arayüz olayını tetikleme (örnek amaçlı)
                        logger.LogEvent?.Invoke(null, EventArgs.Empty);
                    }
                }
                Bu örnekte, ILogger arayüzünü kullanarak bir ConsoleLogger nesnesi oluşturulmuş ve ardından arayüzün metotları, özellikleri ve olayları kullanılmıştır.

                Arayüzler, bir sınıfın birden fazla arayüzü uygulayabilmesine olanak tanır. Bu da çoklu kalıtımın sağladığı esneklik avantajlarını sunar. Ayrıca, interfaceler, kodun daha modüler olmasına ve kodun test edilebilirliğini artırmaya katkıda bulunur.
............................................................................................................................................................................................................................................................................................

    interface Idemo
    {
        void goster();

    }

    interface Iicerikler : Idemo
    {

        int sayi1 { get; set; }


    }

    class AA : Iicerikler
    {
        public int sayi1 { get { return sayi1; } set {sayi1 = value; } }

        public void goster()
        {
            Console.WriteLine("LETS GO...");

        }
    }

    // interfaceler kendi aralarında subinterface superinterface İlişkisi kurabilir. subinterface'i implement eden class superinterface'ide implement etmiş olur...



################################################################################################################################################################################################################################################

abstract olan bir metot subclass'ta override edilmeli edilmezse o classta abstract olur... çünkü gövdesiz metot vardır...
abstract metot varsa class'ta abstract'tır... kullanılma amacı override zorunluluğudur...

public abstract void Add();
public abstract void Delete(); 
public abstract void Update(); 
public abstract void Get(); 

gibi... bunun yerine interfacede kullanabilirdik...
eğer bir class abstract metot içeriyorsa ve interface implement edip tüm metotları override etmediyse abstract olur class...
static metot abstract olamaz...
abstract classlar private olamaz. public protected olabilir.
abstract classlar sealed anahtar kelimesi ile ifade edilemez...


                namespace appConsole
                {


                    abstract class Database
                    {
                        public abstract void Add();
                        public abstract void Delete();
                        public abstract void Update();
                        public abstract void Get();

                    }


                    class SQLserver : Database // extends edenler tüm metotları doldurur ve biz böylece override zorunluluğu sağlamış oluruz...
                    {
                        public override void Add()
                        {
                        }

                        public override void Delete()
                        {
                            
                        }

                        public override void Get()
                        {
                            
                        }

                        public override void Update()
                        {
                            
                        }
                    }

                    class MySql : Database
                    {
                        public override void Add()
                        {
                        }

                        public override void Delete()
                        {

                        }

                        public override void Get()
                        {

                        }

                        public override void Update()
                        {

                        }
                    }


                    class Program {

                        static void Main(string[] args)
                        {


                            MySql mySql = new MySql();
                            mySql.Add();
                            

                                
                        }

                    }

                }


##collectionS##############################################################################################################################################################################################################################################

                C# dilinde, bir sınıfın alanlarına erişimi kontrol etmek ve bu alanlara değer atamak için genellikle property'ler kullanılır. Property'ler, sınıfın dışındaki kodun sınıf içindeki verilere güvenli ve kontrol edilmiş bir şekilde erişmesini sağlar. Property'ler, genellikle sınıfın dışındaki kodun sınıfın içindeki verilere okuma ve yazma işlemleri gerçekleştirmesine izin verir.

                Temel Property Tanımı:
                Property, genellikle bir alanın okunması ve yazılmasını kontrol eden bir çift metottur. Aşağıda basit bir property tanımı örneği bulunmaktadır:

                public class Person
                {
                    // Private bir alan (field)
                    private string _name;

                    // Public bir property
                    public string Name
                    {
                        get { return _name; } // Okuma işlemi
                        set
                        {
                            if (!string.IsNullOrEmpty(value))
                            {
                                _name = value; // Yazma işlemi
                            }
                            else
                            {
                                Console.WriteLine("Name cannot be null or empty.");
                            }
                        }
                    }
                }
                Bu örnekte, Person sınıfında _name adında bir private alan ve Name adında bir public property bulunmaktadır. Name property'si hem okuma (get) hem de yazma (set) işlemlerini kontrol etmektedir.

                Property Kullanımı:
                Ardından, bu property'yi kullanmak için şu şekilde bir örnek yapabiliriz:


                class Program
                {
                    static void Main()
                    {
                        Person person = new Person();

                        // Property'yi kullanma
                        person.Name = "John"; // Yazma işlemi
                        Console.WriteLine($"Name: {person.Name}"); // Okuma işlemi
                    }
                }
                Bu örnekte, Person sınıfından bir nesne oluşturulmuş ve Name property'si hem yazılmış (set), hem de okunmuş (get). Property içinde yapılan kontrol, adın boş veya null olmamasını sağlar.

                Property'ler, nesne yönelimli programlamada sıkça kullanılır ve sınıfın dışındaki kodun sınıfın içindeki verilere güvenli bir şekilde erişmesine olanak tanır. Ayrıca, bir property'nin altındaki gerçek işlevselliği saklamak için metotlar içerebilirler.

                User
                c#da collectionsları detaylı şekilde anlatabilir misin
                ChatGPT
                Evet, tabii ki! C# dilinde, Collections (Koleksiyonlar) genel olarak gruplandırılmış verileri yönetmek için kullanılan veri yapılarıdır. .NET Framework içerisinde birçok farklı koleksiyon sınıfı bulunmaktadır. Bu koleksiyon sınıfları, verileri depolamak, sıralamak, filtrelemek ve genel olarak işlemek için kullanılır. İşte C# dilinde sıkça kullanılan bazı koleksiyon türleri:

                1. List<T>:
                List<T> sınıfı, dinamik bir dizi olarak düşünülebilir ve belirli bir türdeki öğeleri içerir.


                using System;
                using System.Collections.Generic;

                class Program
                {
                    static void Main()
                    {
                        // List<T> kullanımı
                        List<string> names = new List<string>();
                        
                        // Öğe ekleme
                        names.Add("Alice");
                        names.Add("Bob");
                        names.Add("Charlie");

                        // Öğeleri gezme
                        foreach (var name in names)
                        {
                            Console.WriteLine(name);
                        }
                    }
                }


                2. Dictionary<TKey, TValue>:
                Dictionary<TKey, TValue> sınıfı, anahtar-değer çiftleri içeren bir koleksiyondur.


                using System;
                using System.Collections.Generic;

                class Program
                {
                    static void Main()
                    {
                        // Dictionary<TKey, TValue> kullanımı
                        Dictionary<int, string> students = new Dictionary<int, string>();
                        
                        // Öğe ekleme
                        students.Add(1, "Alice");
                        students.Add(2, "Bob");
                        students.Add(3, "Charlie");

                        // Öğeleri gezme
                        foreach (var student in students)
                        {
                            Console.WriteLine($"Student ID: {student.Key}, Name: {student.Value}");
                        }
                    }
                }



                3. Queue<T>:
                Queue<T> sınıfı, birinci giren, birinci çıkan (First In First Out - FIFO) prensibiyle çalışan bir kuyruk yapısını temsil eder.


                using System;
                using System.Collections.Generic;

                class Program
                {
                    static void Main()
                    {
                        // Queue<T> kullanımı
                        Queue<string> queue = new Queue<string>();
                        
                        // Öğe ekleme
                        queue.Enqueue("Apple");
                        queue.Enqueue("Banana");
                        queue.Enqueue("Cherry");

                        // Öğeleri çıkarma
                        while (queue.Count > 0)
                        {
                            Console.WriteLine(queue.Dequeue());
                        }
                    }
                }



                4. Stack<T>:
                Stack<T> sınıfı, son giren, ilk çıkan (Last In First Out - LIFO) prensibiyle çalışan bir yığın yapısını temsil eder.


                using System;
                using System.Collections.Generic;

                class Program
                {
                    static void Main()
                    {
                        // Stack<T> kullanımı
                        Stack<string> stack = new Stack<string>();
                        
                        // Öğe ekleme
                        stack.Push("Apple");
                        stack.Push("Banana");
                        stack.Push("Cherry");

                        // Öğeleri çıkarma
                        while (stack.Count > 0)
                        {
                            Console.WriteLine(stack.Pop());
                        }
                    }
                }


..............................................................................................................................................................................................................................................................................................................................................................


        namespace appConsole
        { 

            class Program {

                static void Main(string[] args)
                {

                    ArrayList arraylist = new ArrayList();


                    referancemi(arraylist);
                    foreach(var item in arraylist)
                    {
                        Console.Write(item); // eeee  aaaa... yazdırdı...
                    }
                        
                }

                public static void referancemi(ArrayList a)
                {
                    a.Add("eeee");
                    a.Add("aaaa...");

                }


            }

        }

        // yani tıpkı diziler gibi System.collections ile çalışanlarda referanceler ile çalışırlar... bir metota ben onu yolladığımda onu karşılayanda referans ve yolladığımın referanceını karşılıyor böylece değişim olursa kalıcı değişim oluyor... 
        // arraylistler nesne alırlar... sayı vs gönderebiliriz ama c#da sayılar vs her şey zaten nesne mantığı ile çalışır. 
        // hem string hem int vss istenen nesneleri yollayabiliriz karmaşık şekilde tutabiliriz... yeterki nesne yolla... ama c#da zaten her veri nesne olarak geçiyor... her şey class'tan türüyor. ama heapta ve stack'te tutulanlar olarak ayrılıyorlar...



..............................................................................................................................................................................................................................................................................................................................................................
c#da string'de int gibi davranır... bir tek java ile fark odur...
..............................................................................................................................................................................................................................................................................................................................................................


            using System;
            using System.Collections.Generic;
            using System.Linq;
            using System.Text;
            using System.Threading.Tasks;
            using System.Data.SQLite;
            using System.Collections;
            using System.Collections.Specialized;


            namespace appConsole
            { 

                class Program
                {
                    static void Main(string[] args)
                    {
                        
                        ArrayList arraylist = new ArrayList();
                        arraylist.Add(1);arraylist.Add(2);arraylist.Add(3);
                        foreach (int i in arraylist) {
                            Console.WriteLine(i);
                        }

                        Console.WriteLine(arraylist[1]); // 2. veriyi görebiliriz... arraylist[index] ile istenen veriyi get edebiliriz...
                        Console.WriteLine(arraylist.Capacity); // 3 eleman ekledik mesela kapasitesini 4 yaptı. yeni bir elemana yer bırakıyor hepp
                        Console.WriteLine(arraylist.Count); // 3 eleman var diyorr...



                        ArrayList arr = TTT(); // metot içerisinde bir arraylist referansı oluşur metot biter return eder ama referansı bellekte tutulduğu için garbage collector onu silmez...
                        
                        foreach (var item in arr)
                        {
                            Console.WriteLine(item);

                        }
                        arraylist.Add(11);
                        arraylist.Add((int) 1);
                        arraylist.Add((int) 2);
                        arraylist.Add((int) 3);
                        arraylist.Add(4);
                        arraylist.Sort(); // kalıcı değişim yapar önce küçükten büyüğe sıralayıp sonra return etmez..
                        arraylist.Reverse(); // terse çevirir...  kalıcı değişim yapar...


                        foreach(var i in arraylist)
                        {
                            Console.WriteLine(i);
                        }


                        Console.WriteLine("........");

                        StringCollection aaaa = ORN4();
                        foreach(var item in aaaa)
                        {
                            Console.WriteLine(item);
                        }


                        ORN5();
                        ORN6();
                        ORN7();
                        ORN8();
                        ORN9();





                    }

                    public static ArrayList TTT()
                    {


                        ArrayList arraylist = new ArrayList();
                        arraylist.Add((int)1);
                        arraylist.Add((int)2);
                            arraylist.Add((int)3);
                            arraylist.Add((int)4);
                            arraylist.Add((int)5);
                        return arraylist;
                    }


                    public static StringCollection ORN4()
                    {
                        StringCollection sc = new StringCollection(); // sadece string değerlerden oluşacaksa collection sadece string taşıyacaksa kullanmak mantılıdır...
                        // neden kullanırız çünkü  daha performanslıdır eğer hepsi String olacaksa veriler...

                        sc.Add("a");sc.Add("b");sc.Add("c");sc.Add("d");



                        return sc;


                    
                    }

                    static void ORN5()
                    {

                        StringDictionary stringDictionary = new StringDictionary(); // String değerler taşıyan bir yapı kurabiliriz... key ve value ilişkisi olur dict yapısı kurabiliriz böylecek...
                        stringDictionary.Add("a", "b");
                        stringDictionary.Add("c", "d");
                            stringDictionary.Add("e", "f");
                        
                        foreach(var item in stringDictionary.Keys) // a c e
                        {
                            Console.WriteLine(item);
                        }
                        foreach(var item in stringDictionary.Values) // b d f 
                        {
                            Console.WriteLine(item); 
                        }
                        Console.WriteLine(stringDictionary["a"]); // b
                        Console.WriteLine(stringDictionary["c"]); // d


                    }

                    public static void ORN6() // lifo... last int first out... yığın çamaşır yığını gibi...
                    {

                        Stack stack = new Stack();  
                        stack.Push("a");
                        stack.Push("b");
                            stack.Push("c");
                        while(stack.Count > 0)
                        {
                            Console.WriteLine(stack.Pop()); // c b a yazdırır...

                        }

                    }

                    public static void ORN7()
                    {

                        Queue queue = new Queue();
                        queue.Enqueue("a");
                            queue.Enqueue("b");
                            queue.Enqueue("c");
                        queue.Enqueue("d");

                        while (queue.Count > 0)
                        {

                            Console.WriteLine(queue.Dequeue()); // a b c d


                        }
                    }


                    public static void ORN8()
                    {
                        Hashtable hashtable = new Hashtable(); // object tiplerin hızla depolanmasını ve hızla çekilmesini sağlayan yapıdır... hız konusunda iyidir... dict mantığı kullanır...
                        hashtable.Add("a", "b");
                        hashtable.Add("c", "d");
                        hashtable["e"] = true;

                        foreach (var item in hashtable.Keys)
                        {
                            Console.WriteLine(item);


                        }
                        foreach (var item in hashtable.Values)
                        {
                            Console.WriteLine(item);


                        }

                        Console.WriteLine(hashtable["a"]);
                        Console.WriteLine(hashtable["c"]);

                    }


                    public static void ORN9()
                    {
                        Console.WriteLine("...................");
                        Dictionary<int,string> dictionary = new Dictionary<int,string>(); // int keyler ve string keyler olacak demektir... dict yapısı ve generic değildir tipi kendimiz belirleriz...
                        dictionary.Add(1, "emre");
                        dictionary.Add(2, "ford");
                        dictionary.Add(3, "bmw");

                        foreach (var item in dictionary)  // hem keyi hem value'yi elde edebiliriz...
                        {
                            Console.WriteLine(item.Key);
                            Console.WriteLine(item.Value);

                        }
                        Console.WriteLine(dictionary[1]); // keyi verir valueyi alabiliriz...
                        dictionary[1] = "MAX"; // kalıcı değişim sağlama yapabiliriz...
                        Console.WriteLine(dictionary[1]); // key ile valueyi aldık...
                        Console.WriteLine(dictionary.ContainsKey(45)); // yani 45 anahtarı var mı yok mu arama yapabiliriz true veya false döner burada false dönecek..
                        Console.WriteLine(dictionary.ContainsValue("bmw")); // bmw olan value var mı bakar ve vardır true döner tüm valueleri tarar aranan valueye göre true false döner...




                    }


                    class User
                    {            public int Id { get; set; }
                        public string FirstName { get; set; }
                        public string LastName { get; set; }

                        public override string ToString()
                        {
                            return Id + " " + FirstName + " " + LastName; // eğer bir Console.WriteLine() içerisine girerse bu class'tan türemiş nesne bu değeri return edecek yapı...
                        }
                    }

                    public static void ORN10()
                    {
                        
                        List<User> users = new List<User>();
                        users.Add(new User { Id = 1, FirstName = "emre", LastName = "aytas"}); // Property ile tanımlanmış ise class'ın değerleri new class{} gibi bir yapı ile atama yapabiliriz... 
                        users.Add(new User { Id = 2, FirstName = "TTT", LastName = "YYY" });
                        users.Add(new User { Id = 3, FirstName = "Ford",LastName = "Focus" });
                        Console.WriteLine(users.Contains(users[0])); // eğer içeriyorsa True verir yoksa false verir...
                        Console.WriteLine(users[0].ToString()); // böylede ToString kullanabiliriz...
                        Console.WriteLine(users[1]); // ToString metotu içeriğini return edecek...
                        


                        foreach (var item in users)
                        {

                            Console.WriteLine(item.Id + " "+ item.FirstName + " " + item.LastName);


                        }

                        List<User> users1 = new List<User>()
                        {
                        new User { Id = 1, FirstName = "emre", LastName = "aytas"},
                        new User { Id = 2,FirstName = "TTT", LastName = "YYY"},
                        new User { Id = 3, FirstName = "Ford",LastName = "Focus" }

                        }; // direkt olarak atama almış hali ile başlatabiliriz...
                        // buda gayet geçerli bir kullanım...

                        var yenikullanici = new User();
                        yenikullanici.Id = 1;
                        yenikullanici.FirstName = "memo";
                        yenikullanici.LastName = "awp";
                        users1.Add(yenikullanici);
                        users1.AddRange(users); // başka bir aynı tip değerler taşıyan list ekleyebiliriz...
                        Console.WriteLine(users1.Contains(yenikullanici)); // eğer varsa True yoksa False return eder...
                        Console.WriteLine(users1.Count); // buradan kaç eleman olduğunu görebiliriz...
                        var index = users1.IndexOf(yenikullanici); // hangi indexte ise getirir.. yoksa -1 verir...
                        var index1 = users.LastIndexOf(yenikullanici); // sondan okumaya başlar ve indexi getirir yoksa -1 getirir...
                        
                        users1.Insert(1, new User { Id = 5,FirstName = "emre",LastName = "Ford"}); // istediğimiz indexe ekleme yapabiliriz .Insert() ile kalıcı değişim yapar... 
                        Console.WriteLine($" users1 de yenikullanici {index}. indexte idi....");  // $"{AA} {BB}"   gibi bir şekilde kullanım yapabiliriz...



                    }


                }

            }

########################################################################################################################################################################################################################################################################################################################################################################################################################################################################################

hatanın en kötü ihtimalle Main içine düşmeden yakalanması gerekir... ve hiyerarşik şekilde dizilmeliidr hatalar... finally her zaman çalışır hata olsa da olmasa da... mesele try catch finally bir while içinde olsun tryde break görsün ona rağmen çalışır finally...
Exception ve error farklıdır... sistem hatalarının ve açıklarının yüzde 80i Exceptionlar yüüzden çöker...
finally genel olarak açık dosya ve veritabanı kapatmak için kullanılır...


                using System;
                using System.Collections.Generic;
                using System.Linq;
                using System.Text;
                using System.Threading.Tasks;

                namespace appConsole
                {
                    class class1
                    {

                        static void Main(string[] args)
                        {

                            while
                                (true)
                            {

                                try
                                {
                                    break;
                                }
                                catch (Exception ex)
                                {


                                }
                                finally // döngü break görse bile finally çalışır... ve sonra döngüden çıkılır...
                                {
                                    Console.WriteLine("aaaa");
                                }


                            } 

                            try
                            {
                                aaaa();
                            }catch (Exception ex)
                            {
                                Console.WriteLine(ex);
                            }
                            finally // 
                            {
                                Console.WriteLine("aaaa");
                            }




                        }


                        public static void aaaa()
                        {

                            throw new Exception("HELLO"); // throw new HataTürü(mesaj); yapısı ile hata fırlatabiliriz... 

                        }


                    }
                }


####multithreading############################################################################################################################################################################################################################################

                    using System;
                    using System.Collections.Generic;
                    using System.Linq;
                    using System.Text;
                    using System.Threading.Tasks;
                    using System.Data.SQLite;
                    using System.Collections;
                    using System.Threading; // bunu çağırmak lazım... hem thread üretmek hemde sleep için...

                    namespace appConsole
                    { 

                        class Program {

                            static void Main(string[] args)
                            {

                                Thread mainThread = Thread.CurrentThread;
                                mainThread.Name = "Main Thread";
                                Console.WriteLine(mainThread.Name);

                                /*
                                CountDown();
                                CountUp();
                                
                                Main Thread
                    Time #1:10 Seconds
                    Time #1:9 Seconds
                    Time #1:8 Seconds
                    Time #1:7 Seconds
                    Time #1:6 Seconds
                    Time #1:5 Seconds
                    Time #1:4 Seconds
                    Time #1:3 Seconds
                    Time #1:2 Seconds
                    Time #1:1 Seconds
                    Time #1:0 Seconds
                    timer #1 is complete...
                    Time 21:0 Seconds
                    Time 21:1 Seconds
                    Time 21:2 Seconds
                    Time 21:3 Seconds
                    Time 21:4 Seconds
                    Time 21:5 Seconds
                    Time 21:6 Seconds
                    Time 21:7 Seconds
                    Time 21:8 Seconds
                    Time 21:9 Seconds
                    Time 21:10 Seconds
                    timer #2 is complete...


                                */ // Threadsiz kullanım bu şekilde sırası ile çalışır Thread kullanırsak eğer o zaman iş değişir.

                                Thread thread1 = new Thread(CountUp);
                                Thread thread2 = new Thread(CountDown);

                                thread1.Start(); // başlatır ve aşağı satıra geçirir kodu bu yüzden thread1 çalışırken thread2'de çalışmaya başlayabilir...
                                thread2.Start();

                                /*
                                Main Thread
                    Time 21:0 Seconds
                    Time #1:10 Seconds
                    Time #1:9 Seconds
                    Time 21:1 Seconds
                    Time #1:8 Seconds
                    Time 21:2 Seconds
                    Time #1:7 Seconds
                    Time 21:3 Seconds
                    Time #1:6 Seconds
                    Time 21:4 Seconds
                    Time 21:5 Seconds
                    Time #1:5 Seconds
                    Time 21:6 Seconds
                    Time #1:4 Seconds
                    Time #1:3 Seconds
                    Time 21:7 Seconds
                    Time #1:2 Seconds
                    Time 21:8 Seconds
                    Time 21:9 Seconds
                    Time #1:1 Seconds
                    Time 21:10 Seconds
                    Time #1:0 Seconds
                    timer #2 is complete...
                    timer #1 is complete...

                                
                                */






                                Console.ReadKey();


                            }

                            public static void CountDown()
                            {

                                for (int i = 10; i >= 0; i--)
                                {

                                    Console.WriteLine("Time #1:" + i + " Seconds");
                                    Thread.Sleep(1000); // 1000 milisaniye...

                                }
                                Console.WriteLine("timer #1 is complete...");
                            }

                            public static void CountUp()
                            {

                                for (int i = 0; i <= 10; i++)
                                {

                                    Console.WriteLine("Time 21:" + i + " Seconds");
                                    Thread.Sleep(1000); // 1000 milisaniye...

                                }
                                Console.WriteLine("timer #2 is complete...");
                            }


                        }


                        

                    }

// yani işleri metotlara bölerek biz threadlere metotları vererek işleri bölebiliriz. thread başlarsa direkt olarak çalışır ve program aşağı satırları okumaya başlar... o anda o thread'da çalışır halde kalır...



################################################################################################################################################################################################################################################

// Main sadece bir tane olur ve programın çalışması için gerekli olan o metottur ana metottur...
// C# dilinde bir uygulama sadece bir tane Main metodu içerebilir. Bu metot, programın başlangıç noktasını temsil eder ve programın çalışmasına başladığı yerdir. Main metodu, static olarak işaretlenmiş ve genellikle bir sınıf içinde yer alır.
// String ile string arasında bir fark yoktur... ikiside aynıdır referans bilmem ne vs vs... 

            bool dogrumu = false;

            while (dogrumu)
            {





            }
            if (dogrumu)
            {

                    
            }else if (dogrumu) { 
            
            
            }else { Console.WriteLine("FORD ");
            }

// değişkenler verileri tutan yapılardır. her sınıf bir blok içerisindedir.
// bir class içerisinde tanımlananlar aslında o class'a özgüdür...
// c#da değişkenler rakamla vs başlayamaz... metinsel ifadeler falan mantıklıdır. ve dikkat etmemiz gerekn bir nokta  class isimleri büyükle başlar fonkisyonlar vve değişkenler ise küçükle başlar yeni kelimede o kelimenin baş harfi büyür.
class: EmreAraba   metot: gitAraba() değişken: arabaMotor = 12; gibi...
// değişken bir class içerisinde kullanıldı ise tüm class ona erişebilir.

// stack ve heap dene iki bölge var bellekte ana bölgede ramle bellek arasında fark var stack ve heap olarak. değer tipliler stackte tutulur referance tipliler ise heap alanında tutulur sınıflara ait nesneler heapte tutulur.
// string dışındakiler stack'te tutulur. string ise heapte.

// sabit ve değişken farkı nedir... const mesela değişmez ve değeri tanımlanırken atanmalı.
          const int deger2 = 11;  gibi.
          int deger1 = 11; 
          deger1 = 12; // sabit değildir değişkendir const değilse... porgramda zamanla değişebilir.

// c# dilinde bir veriye double int float vs değer verilmediyse eğer o zaman 0 olur string ise null olur vs vs mesela class ürettik emre diye emre emre1; dedik emre1 nulldır. default olarak 0 veya null ataması yapılır...
//             int[] matris1 = new int[100]; dizi oluşturma böyle yapılır.

// string bir referans türüdür, yani değer tipleri gibi doğrudan değeri saklamaz. Bunun yerine bellekte bir referans saklar ve bu referans, metni içeren bellek bölgesini gösterir.
     

        public static int toplama(int a)
        {
            return a;
        }
        public static int toplama(int a,int b)
        {
            
            return a + b; 
        }
        // ikisinide aynı anda kullanabiliriz gönderilen verilere göre hangi metotun çalışacağını ise c# belirler buna method overloading denir...
        mesela toplama(5) dersem en üstteki çalışır toplama(10,8) dersen alttaki çalışır...



class isimler
{


    private int deger;
    private String name;
    private isimler isimlersonraki = null;  // burada mesela her nesne oluştuğunda otomatik olarak null olacak...

    
    public isimler(int deger, string name)
    {   
        this.deger = deger;
        this.name = name;
    }
         public isimler() // default constructor'dur bu mesela...   iki tane constructor var bunada constructor overloading denir... parametrelere göre hangisi çlaışacak c# belirler bunu
    {   
        
    }
     

}


// c# dilinde veri tipleri ilkel değildir. hepsi bir nesnedir.
// her sınıf soyut bir veri yapısıdır.
// /**/  buda uzun veri sistemi.
// common type sistem = ortak veri modeli.
// import yerine using kullanırız...

/*
            Console.Write("Kullanici adi giriniz: ");
            string isim = Console.ReadLine();
            Console.WriteLine(isim);

*/ consoldan veri alma böyle yapılır string için... 

// c# dilinde global değişken yoktur her veri bir class'a özgü olmalıdır. her metot her değişken bir class'a bağlı olmalıdır.
// değişkenler rakamlarla başlamaz arada boşluk olamaz para simgeleri olabilir ! & vs gibi karakterler olmaz.
// değişkenlerde iki tip vardır değer ve referance tipleri.  stack ve heap bölgeleri vardır bellekte.   ramda stack ve heap vardır.  referance tipleri heapte tutulur.   classla başlayan yapılar heapte tutulur string dışı değerler stackte tutulut değer tiplidir çünkü...
// charda aslında sayısal olarak tutar ama biz onu karakterlere çeviririz dil ile.

            Console.Write("");  // yazar ve alt satıra geçirmez...
            Console.WriteLine(""); // yazar ve alt satıra geçirir otomatik olarak \n eklenir...

            Console.Write( 14 + " " +  4); demek aslında append demek...  tüm değerleri string yapar eğer +'nın içerisinde string varsa ve sırası ile hepsini append eder...

string yazi1 = "emre" + 15; hata vermez... 15 string'e çevrilir ve + ile append edilir..
string yazi2 = 15; hata verir...   

// encapsulation demek nesnenin vcerilerine nesne.  şeklinde ulaşmayı private ile kısıtlamak demektir...     nesnenin verilerine nesnenin metotları ile ulaşmak kontrollü şekilde... getter setter kullanırız genel olarak. 



ctrl + class'ın üstüne tık ile içerisine gidebilir bilgileri görebiliriz...

..............................................................................................................................................................................................................................................................................................................................................................
            C# dilinde, bir sınıfın alanlarına erişimi kontrol etmek ve bu alanlara değer atamak için genellikle property'ler kullanılır. Property'ler, sınıfın dışındaki kodun sınıf içindeki verilere güvenli ve kontrol edilmiş bir şekilde erişmesini sağlar. Property'ler, genellikle sınıfın dışındaki kodun sınıfın içindeki verilere okuma ve yazma işlemleri gerçekleştirmesine izin verir.

            Temel Property Tanımı:
            Property, genellikle bir alanın okunması ve yazılmasını kontrol eden bir çift metottur. Aşağıda basit bir property tanımı örneği bulunmaktadır:

         
            public class Person
            {
                // Private bir alan (field)
                private string _name;

                // Public bir property
                public string Name
                {
                    get { return _name; } // Okuma işlemi
                    set
                    {
                        if (!string.IsNullOrEmpty(value))
                        {
                            _name = value; // Yazma işlemi
                        }
                        else
                        {
                            Console.WriteLine("Name cannot be null or empty.");
                        }
                    }
                }
            }
            Bu örnekte, Person sınıfında _name adında bir private alan ve Name adında bir public property bulunmaktadır. Name property'si hem okuma (get) hem de yazma (set) işlemlerini kontrol etmektedir.

            Property Kullanımı:
            Ardından, bu property'yi kullanmak için şu şekilde bir örnek yapabiliriz:

        
            class Program
            {
                static void Main()
                {
                    Person person = new Person();

                    // Property'yi kullanma
                    person.Name = "John"; // Yazma işlemi
                    Console.WriteLine($"Name: {person.Name}"); // Okuma işlemi
                }
            }
            Bu örnekte, Person sınıfından bir nesne oluşturulmuş ve Name property'si hem yazılmış (set), hem de okunmuş (get). Property içinde yapılan kontrol, adın boş veya null olmamasını sağlar.

            Property'ler, nesne yönelimli programlamada sıkça kullanılır ve sınıfın dışındaki kodun sınıfın içindeki verilere güvenli bir şekilde erişmesine olanak tanır. Ayrıca, bir property'nin altındaki gerçek işlevselliği saklamak için metotlar içerebilirler.

..............................................................................................................................................................................................................................................................................................................................................................

        C# dilinde iki stringin aynı referansı taşıyıp taşımadığını kontrol etmek için == operatörü değer karşılaştırması yapar, yani iki string'in içeriğini kontrol eder, referans karşılaştırması yapmaz. Yani == operatörü, stringlerin içeriğini kontrol eder.

        Örneğin:

        string isim1 = "emre";
        string isim2 = "emre";

        if (isim1 == isim2)
        {
            Console.WriteLine("İsimler eşittir.");
        }
        else
        {
            Console.WriteLine("İsimler eşit değildir.");
        }
        Yukarıdaki örnekte, isim1 ve isim2 string'leri aynı değeri taşıdığı için == operatörü true dönecektir.

        Ancak, C# dilinde referans karşılaştırması yapmak istiyorsanız object.ReferenceEquals metodunu kullanabilirsiniz:


        if (object.ReferenceEquals(isim1, isim2))
        {
            Console.WriteLine("İsimler aynı referansı taşıyor.");
        }
        else
        {
            Console.WriteLine("İsimler aynı referansı taşımıyor.");
        }
        Bu durumda, object.ReferenceEquals metodu, iki string'in aynı referansı taşıyıp taşımadığını kontrol eder. Ancak, genellikle string karşılaştırmalarında == operatörü daha yaygın olarak kullanılır.

..............................................................................................................................................................................................................................................................................................................................................................

string isim = "emre";
string isim2 = isim;  // buda emre olur ama referance yüüzden değil değer ataması yapılır burada. javadaki gibi değil..

        Araba araba1 = new Araba { Model = "Toyota" };
        Araba araba2 = araba1;

        araba1.Model = "Ford";

        Console.WriteLine(araba2.Model);  // Bu, "Ford" yazdırır çünkü class'lardan oluşan nesneler referancelerle çalışırlar...

..............................................................................................................................................................................................................................................................................................................................................................

    internal class Program
    {
        static void Main(string[] args)
        {

            class1 cs1 = new class1("aaa", "bbb", 111);

            degistir(cs1);
            Console.WriteLine(cs1.age); // bir yazdırdı...



        }

        public static void degistir(class1 b)
        {
            b.age = 1;
          
        }

    }

class'lar kendi oluşturduklarımız vs onlardan oluşan nesneler referanceleri ile çalışırlar... bu yüzden void metotta değişim oldu gönderdiğimiz nesnenin değeri kalıcı olarak değişti... bunun sebebi pointer mantığıdır. nesneler heap ve stack olacak şekilde referanslı veya referancesiz olarak saklanırlar. bizim oluşturduklarımız ile oluşanlarda referance mantığı işler...
classlar(kendimizin) ve arraylar referance mantığı ile çalışır diğerleri çalışsın istersek o zaman ref yapısını kullanırız...


..............................................................................................................................................................................................................................................................................................................................................................

break ve continue bağlı oldukları döngü için çalışırlar sadece bir döngü için çalışırlar...

for while do while hepsi için aynı neredeyse...

..............................................................................................................................................................................................................................................................................................................................................................

        static void Main(string[] args)
        {

            string[] isimler = new string[3];
            isimler[0] = "aaaa";
            isimler[1] = "bbbb";
            isimler[2] = "cccc";

            foreach (string i in isimler)   // önce tipi belirtiriz. sonra i deriz iterasyon yapacak yapıya. ve dönülecek yapı.
            {
                Console.WriteLine(i);
            }
        }

        // string yerine biz var yazabilirdik bir fark olmazdı ikiside çalışır...  
        // var = bu anahtar kelime ile değişken oluşturursak ve atamasını yaparsak var tarafından onun tipi belirlenir. pythondaki yapı ile aynı neredeyse...

C# programlama dilinde "var" bir değişkenin türünü belirlemeden önce, derleme zamanında türünün belirlenmesine izin veren bir anahtar kelimedir. "var" anahtar kelimesini kullanarak bir değişken tanımladığınızda, derleyici, değişkenin türünü sağlanan başlatma değerinden çıkarır.

Örneğin:

var sayi = 42; // sayi değişkeni int türünde bir değişkendir.
var metin = "Merhaba, Dünya!"; // metin değişkeni string türünde bir değişkendir.
Bu durumda, derleyici, sayi değişkenini int ve metin değişkenini string olarak anlar. Ancak, "var" kullanılarak tanımlanan değişkenlerin başlangıç değeri ile türü belli olmalıdır, çünkü derleyici, başlangıç değeri üzerinden türü çıkarır. Ayrıca, bir kez atanmış bir değişkenin türü değiştirilemez.
..............................................................................................................................................................................................................................................................................................................................................................


































################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################
################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################
################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################
################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################
################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################

FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM FORM

form uygulamalarında static değerler ve arraylistler ile çalışmak gerekir çünkü form static değerlere ulaşabiliyor...
windows form() c# items olanı seçeriz...
.net 4.7.2 kullanacağız genel olarak...
// events kısmından ne gibi durumlarda ne gibi işlemler yapılacak bunu belirleyebiliriz...
this.Close(); ile açık olan form kapatılır... ve böylece normalde bekleyen kod okuma formda bekleyen okuma devam eder...

.Show() ile .ShowDialog() arasında şu fark vardır. geri döndürme izni yoktur biri kapanmadan diğerine geçişe izin vermez... 
  // bir form kapatılmadan diğer form'a geri dönülmesin istersek ShowDialog() kullanabiliriz geçiş olabilsin istersen .Show() kullanırız ve biter...

this.Hide() ile ilgili pencereyi gizleyebiliriz... arka planda çalışmaya devam eder form kapanmaz... uygulama çalışmaya devam etsin ama gizlensin istersek... mesela keylogger için...

form1.ActiveForm.Close() demek ise aktif olan formu kapa demek...

Application.Exit() komple uygulamayı kapatır...

form1.Text = "sol üstteki isim değişti...";
  veya this.Text = ".....";   ile geçerli olanın ismini değiştirebiliriz...

formun events kkısmında yapılan işleme göre aksiyon belirleyebiliriz... şimşek ikonlu olan events kısmı...

form'un load eventi çok önemli...





C# Windows Forms uygulamalarında kullanılan birçok form olayı (event) bulunmaktadır. Her olay, belirli bir durumu, etkileşimi veya durumu işlemek üzere çağrılır. Aşağıda, yaygın olarak kullanılan bazı form olayları ve genel kullanım amaçları hakkında bilgi bulunmaktadır:

Load:

Form yüklendiğinde tetiklenir.
Form'un başlangıç durumuyla ilgili işlemler için kullanılır.

private void Form1_Load(object sender, EventArgs e)
{
    // Form yüklendiğinde yapılacak işlemler
}
Closing:

Form kapatılmadan önce tetiklenir.
Form kapatma işlemi iptal edilebilir.

private void Form1_FormClosing(object sender, FormClosingEventArgs e)
{
    // Form kapatılmadan önce yapılacak işlemler
    // e.Cancel = true; // Form kapatma işlemi iptal edilir
}
Closed:

Form kapandığında tetiklenir.
Form kapandığında yapılacak işlemler için kullanılır.

private void Form1_FormClosed(object sender, FormClosedEventArgs e)
{
    // Form kapandığında yapılacak işlemler
}
Activated:

Form, aktif duruma geldiğinde tetiklenir.
Formun kullanıcı tarafından etkileşime hazır olduğu durumlar için kullanılır.

private void Form1_Activated(object sender, EventArgs e)
{
    // Form aktif duruma geldiğinde yapılacak işlemler
}
Deactivate:

Form, pasif duruma geldiğinde tetiklenir.
Formun kullanıcı tarafından etkileşime kapandığı durumlar için kullanılır.

private void Form1_Deactivate(object sender, EventArgs e)
{
    // Form pasif duruma geldiğinde yapılacak işlemler
}
Resize:

Form boyutu değiştiğinde tetiklenir.
Formun boyutu değiştiğinde yapılacak işlemler için kullanılır.

private void Form1_Resize(object sender, EventArgs e)
{
    // Form boyutu değiştiğinde yapılacak işlemler
}
KeyDown ve KeyUp:

Bir tuşa basıldığında (KeyDown) veya serbest bırakıldığında (KeyUp) tetiklenir.
Klavye olaylarını yakalamak için kullanılır.

private void Form1_KeyDown(object sender, KeyEventArgs e)
{
    // Bir tuşa basıldığında yapılacak işlemler
}

private void Form1_KeyUp(object sender, KeyEventArgs e)
{
    // Bir tuş serbest bırakıldığında yapılacak işlemler
}
Bu olaylar, bir formun yaşam döngüsü, boyut değişiklikleri, klavye etkileşimleri ve formun kapatılması gibi birçok senaryoda kullanılır. Projeye bağlı olarak, farklı olaylar da kullanılabilir ve bu olaylar formun davranışını özelleştirmek için güçlü araçlar sunar.



eğer from üzerine gelir çift ttıklarsak bu metot gelir kod kısmına. bu nedir form açılmadan önce çalışacak metottur mesela veritabanından verileri çekip listede yazdırmak için açılıdğında hazır olsun diye...
veya ekranda göstermek istediğimiz bir componenti gösterebilir veya gizleyebiliriz...

        private void Form1_Load(object sender, EventArgs e) // form yüklenirken çalışan metot mesela veritabanından ürünleri çekip açılıdığında gözüksün die hazır edebiliriz...
        {


        }   // form üstüne çift tıklayarak elde ederiz... veya form üzerinde sağtık + events kısmında önemli metotları işleyebiliriz...
        // events kısmında Load var oradan ne işlem yapılacağını belirleyebiliriz...  
        // events kısmı properties kısmında şimşek ikonu...

        // buda buton ekleyip üzerine çift tıklayınca ortaya çıkan detay... istediğimiz değerleri girebiliriz...

        private void button1_Click(object sender, EventArgs e)
        {


        }



        static void Main(string[] args)
        {
            Thread formThread = new Thread(() =>
            {
                // Formu başka bir thread üzerinde çalıştır
                new Form1().ShowDialog();
            });

            // Thread'i başlat
            formThread.Start();

            Console.WriteLine("LETS GOOO");





        }

// Thread ile form çalıştırma özelliği böylece form çalışır açık kalır ve sonrasında ise kod alt satıra geçer okumaya devam eder normalde c#da kod açık kalan form'da kapanana kadar kalır alt satıra geçebilir...



            comboBox1.Items.Add("a");

            foreach (var item in comboBox1.Items)
            {
                Console.WriteLine(item);
            }

comboBox1 eleman ekleme ve elemanlarını yazdırma...  comboadi.Items ile elemanlara ulaşabiliriz. ve comboadi.Items.Add() ile ekleme yapabiliriz. bu özellik ile biz istersek 



form'un events kısmında Form closed kısmındaki eventler ile form kapatılırken ne olacağını seçebiliriz...

            MessageBox.Show("EKRAN KAPATILDI...");
            // bu şekilde bir messagebox kullanabiliriz.

MessageBox() kod okumasını kendinde tutar bu yüzden tamam'a basmadan alt satıra geçirmeme yapabilir bunun için Thread kullanmak zorunda kalabiliriz...



toolbox kısmında timer var... interval kaç milisaniyede bir atacağını belirtir...

        using System;
        using System.Collections.Generic;
        using System.ComponentModel;
        using System.Data;
        using System.Drawing;
        using System.Linq;
        using System.Text;
        using System.Threading.Tasks;
        using System.Windows.Forms;

        namespace ConsoleApp2
        {
            public partial class Form3 : Form
            {
                public Form3()
                {
                    InitializeComponent();
                }

                private void Form3_Load(object sender, EventArgs e) // form başlarken işlem yapar...
                {
                    timer1.Enabled = true;
                    timer1.Interval = 500;


                }

                private void timer1_Tick(object sender, EventArgs e) // Enabled = true olursa sürekli olarak zamanlayıcısına göre çalışır...
                {

                    Random random = new Random(); // rastgele değer üretmemizi sağlar...
                    this.BackColor = Color.FromArgb(random.Next(0,255), random.Next(0, 255), random.Next(1, 255));

                }

                private void Form3_KeyDown(object sender, KeyEventArgs e) 
                {

                    if(e.KeyCode == Keys.F4) // eğer f4 tuşuna basılırsa kapanacak...
                    {
                        this.Close();
                    }
                
                }

                private void Form3_KeyUp(object sender, KeyEventArgs e)
                {

                    if (e.KeyCode == Keys.Escape) // eğer f4 tuşuna basılırsa kapanacak...
                    {
                        MessageBox.Show("FORM KAPATILACAK", "UYARI!"); // ilki mesaj diğeri ise başlık messagebox için...
        ;                this.Close();
                    }



                }

                private void button1_Click(object sender, EventArgs e)
                {
                    DialogResult sonuc;
                    sonuc = MessageBox.Show("ÇIKMAK İSTER MİSİN", "UYARI",MessageBoxButtons.OKCancel);

                    if(sonuc == DialogResult.OK)
                    {
                        this.Close();
                    }

                } // diyaloğa göre ok veya cancel dedik dönen sonuca göre işlem yapabiliriz. ok mu bastı cancel mi?
            }
        }




        private void button2_Click(object sender, EventArgs e)
        {

            if (MessageBox.Show("ÇIKMAK İSTER MİSİN", "UYARI", MessageBoxButtons.OKCancel,MessageBoxIcon.Error) == DialogResult.OK) 
            {
                this.Close();

            }


        }

// uyarı penceresi açar iconlu bir biçimce ve ok veya cancele basmaya göre işlem yapabiliriz...
// groupbox ile gruplama yapabiliriz...



namespace ConsoleApp2
{
    static class Program
    {

        public static ArrayList arrayList = new ArrayList();
        static void Main(string[] args)
        {

            Thread formThread = new Thread(() =>
            {
                // Formu başka bir thread üzerinde çalıştır
                new Form1().ShowDialog();
            });

            // Thread'i başlat
            formThread.Start();


        }
    }
}

// projenin başlayacağı class'ın staticc olması iyidir. ve şayet static değerler static arraylistler vs ile işlem yapmak önemlidir ki formlar bu verilere ulaşabilsin.




int x = 1;
int y = 2;
(y,x) = (x,y); //  arka planda üç değişkenle işlem yapar aslında ama burada üçüncü değişken kullanmayız...





        private void domainUpDown1_SelectedItemChanged(object sender, EventArgs e)
        {

            for (int i = 0; i < 50; i++)
            {
                domainUpDown1.Items.Add(FontFamily.Families[i].Name); // içerisine nesne vermek lazım... sistemdeki fontlardan 50 tanesini domainupdowna ekledik.
               
            }

            domainUpDown1.Wrap = true; // liste sonunda ilk veya son öğeye ilerle...


        }



tarih ve saat seçimi için datetimepicker kullanırız..
Textbox'ta multiline izni verirsek satır satır yazma yapabilir...

        private void dateTimePicker2_ValueChanged(object sender, EventArgs e)
        {
            textBox1.Text ="İki tarih arasındaki gün: " + (dateTimePicker2.Value - dateTimePicker1.Value).Days.ToString();


        }



        private void button1_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrWhiteSpace(textBox2.Text))
            {
                int sayi = (int)Convert.ToUInt32(textBox2.Text);
                progressBar1.Maximum = sayi;
                for (int i = 0; i < sayi; i++)
                {
                    progressBar1.Value = i;

                }


            }
            else MessageBox.Show("SAYİ GİRNİZ...", "UYARİ");


        }

progressbar aslında ne kadar yüklendi yükleniyor eventi için kullanılır...

menustrip ile biz istersek üst kısımdaki dosya vs vs işlemleri yapan barı ekleyebiliriz...
contextMenustrip sağ tık işlemleri için kullanılır sağ tık deriz ve istenen işlemleri yaptırabiliriz mesela kes kopyala yapıştır vs vs... contextMenustrip kısmından seçmemiz lazım ama bunun için... oreadan istenen menustrip'i seçeriz ve işlem yapabiliriz...
richtextBox ve metotları önemli...
toolstrip ekler üç noktaya sağ tıklar sonra insert standart items dersek sürekli kullanılan kısımları bize getirir...



    C# Windows Forms uygulamalarında TrackBar kontrolü, kullanıcının bir aralıktaki değeri seçmesine izin veren bir kontrol olarak kullanılır. İşte TrackBar kullanımına dair basit bir örnek:

    TrackBar Eklemek:

    Visual Studio'da bir form tasarımını açın.
    Araç Kutusu'nda "TrackBar" kontrolünü formunuza sürükleyip bırakarak ekleyin.
    TrackBar'ın özelliklerini (Name, Minimum, Maximum, Value vb.) tasarım zamanında veya kod içinde ayarlayabilirsiniz.
    Olay (Event) Eklemek:

    TrackBar'da değer değiştikçe bir olaya tepki verebilirsiniz. Bu genellikle Scroll veya ValueChanged olaylarıdır.
    Kod İle Olaya Tepki Verme:

    Aşağıda, bir TrackBar kontrolünün ValueChanged olayına tepki veren basit bir örnek bulunmaktadır.


    using System;
    using System.Windows.Forms;

    namespace TrackBarExample
    {
        public partial class Form1 : Form
        {
            public Form1()
            {
                InitializeComponent();
            }

            private void trackBar1_ValueChanged(object sender, EventArgs e)
            {
                // TrackBar'ın değeri değiştiğinde yapılacak işlemler
                int selectedValue = trackBar1.Value;
                label1.Text = "Selected Value: " + selectedValue.ToString();
            }
        }
    }
    Yukarıdaki örnekte, ValueChanged olayı kullanılarak TrackBar kontrolünün değeri her değiştiğinde label1 kontrolü güncellenir.

    Tasarım Zamanında Olay Ekleme:
    Visual Studio tasarım görünümünde, TrackBar kontrolüne sağ tıklayın.
    Özellikler penceresinden Events (Olaylar) sekmesine geçin.
    ValueChanged olayına çift tıklayarak olaya tepki verecek bir metot oluşturun.
    Oluşturulan metotun içine istediğiniz kodu ekleyebilirsiniz.
    Bu örnekte, ValueChanged olayına tepki vererek TrackBar'ın değerini bir Label kontrolüne yazdık. Bu temel bir örnek olup, TrackBar kontrolü kullanımını daha fazla özelleştirebilir ve ihtiyacınıza göre uyarlayabilirsiniz.

trackBar1.Minimum = 10;trackBar1.Maximum = 25;trackBar1.TickFrequency = 2;
 // min max artış belirleyebiliriz...
  
scroll diye bir eventi vardır... aktif etmek için dizayn modunda üzerine çift tıklarız ve işlem yapar böylece...

bir ekran üzerinde birden fazla ekran kullanabilelim istersek eğer o zaman tabcontrol kullanabiliriz... işimizi kolaylaştırır...
             tabControl1.SelectedTab = tabPage2; // ikinci taba geçer burada...



        private void button2_Click(object sender, EventArgs e)
        {
            OpenFileDialog.Title = "RESİM SECİNİZ...";
            // OpenFileDialog.ShowDialog();
            openFileDialog1.Filter = "(*.jpg)|*.jpg|(*.png)|*.png"; // sadece png ve jpg olanlar gelecek... sadece resim seçimi yapabilmek için kullanırız...
            OpenFileDialog1.FilterIndex = 1; 
            if (OpenFileDialog.ShowDialog() == DialogResult.OK)
            {
                pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
                pictureBox1.Image = Image.FromFile(OpenFileDialog.FilaName);
               

            }



        }

butona basınca resim seçeceğiz ve resmi göstereceğiz...













################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################
################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################
################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################
################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################
################################################################################################################################################################################################################################################################################################################################################################################################################################################################################################

SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL SQL
sql server microsoftun veritabanı sistemi... çok fazla kullanılır...
azure bir bulut sistemidir. buluta sql server koyarız ve global olarak herkes kullanabilir...
express web üzerinde ve küçük sunucularda çalışan ve uygulamaları geliştirmek ve üretmek için ideal olan bir sürümdür...
   devoloper ile express arasında kapasite farkı var ama çok önemli değil...

tools-> options -> all languages -> general-> word wrap ve line numbers önemli aktifleştir... word wrap taşarsa alt satıra geçirir komutta sorguda kopma olmaz... 

Visual studioda iş yükleri kısmında veri depolama ve işleme seçersek visual studio sql server kurar bize... sistemimize kurar bunu...

server type database engine ise veritabanı motoru yöneteceğiz demektir...

mesela sql server'ı pythonda javada vs kullanmak istersek bağlayıcı kullanmamız gerekebilir...

servername kısmına . veya (localhost) yazarak local veya tam sürüme bağlanabiliriz...
canlı bir sunucudaki veritabanına erişeceksek eğr o zaman server name kısmına ip adresi gireriz...
authentication kısmında sql server authentication yazarsak eğer login işlemlerini yapmmaız gerekir canlı sunucuya bağlanmak içindir...

server name kısmına (localhost) yazarak biz local sunucuya bağlanabiliriz.
log dosyası üzerinde yapılan tüm işlemler kaydedilir...

new database kısmında veritabanı max mb olduğunda ne yapılsın bunu belirleyebiliriz... mesela 64 mb olduğunda 64 mb 64 mb büyüt veya in percent ile yüzde kaç kaç büyüyeceğini belirleyebiliriz..
    Maximum file size belirlersek eğer mesela 100 mb dedik 100 mb olursa database o zaman daha fazla büyüme deriz databaseye...

database diagram demek ilişkisel tablolar arasındaki ilişkileri gösterir...

sql'de ingilizce karakter kullanamaya dikkat edin...

execute demek işlemleri uygula demek mesela insert vs değişim yaparsak lazım olur.

column demek kolon demek...
    bigint büyük değer alabilen int... 
    text metin dosyası var string yerine.
    bit demek 0 1 
    char veri tipi char array yapısı kurabiliriz char(10) ile mesela Unicode desteği yok.  char(10) dersek sürekli bellekte 10luk yer kaplar...
    nchar(10) başında n harfi olan veriler Unicode(tüm alfabeler çince arapça japonca vs vs) desteklidir. uluslararası tüm alfabeleri destekler demektir...
    varchar(50)  verinin boyutu kadar yer kaplar. 8000 maks karakter tutar... mesela isim yaparsak bazıları 5 harfli bazıları 8 kalan kısmı doldurma içindeki veri kadr alan kapla dersek.
    nvarchar(50) mesela varchar gibi ama Unicode desteği var...  dinamiktir varchar...
    text = belirtilenden az veri girilse bile girilen kadar yer tutar ne kadat gönderirseniz o kadar alan alır ama tabiki üst sınırı var ama yüksek...
    ntext = text ile aynı ama Unicode destekli...
    varchar(MAX) dersek (MAX demek alan sınırı yok istediğin kadar veri verebilirsin demektir...)

    başında n olan veriler Unicode destekli...

allow nulls tikli olursa null olabilir demektir id tiksiz olmalı...
bir tablonun üzerine gelir sağtık design dersek dizayn edebiliriz kolon ekleyip çıkarabiliriz vs vs...

table sağtık add table ile tablo ekleme yapabiliriz...
tablonun üzerinde sağtık edit top 200 rows dersek kendimiz eleman ekleyebiliriz...
tablo sağtık Select 1000 ilk 1000 satırı getir demek... bize sql kodunu otomatik verir...


bir sql dosyasına yükleme ekleme falan yaparsak eğer ne olur = tıpkı bir txtde tutulduğu gibi harddiskte yani bellekte kalıcı olarak tutulur böylece pc kapansa sistem kapansada veriler o .sql dosyasında .db dosyasında tutulur... fiziksel olarak saklanmaya başlar.

identity column olursa eğer otomatik artan olur mesela id...

............................................................................................................................................................................................................................................................................................................................................................................................................................................

PRIMARY key olan sutunların kombinasyonu aynı olamaz  unique olursa bir kolon o kolonda her değer farklı olmaz zorundadır...
PRIMARY key olan bir sutunda hiçbir değer null olamaz. unique null olabilir ama sadece bir tane null olabilir o sutunda.

    Primary Key (Birincil Anahtar):

    Birincil anahtar, bir tablodaki kayıtları benzersiz bir şekilde tanımlayan bir sütundur.
    Her birincil anahtar değeri eşsiz olmalıdır ve NULL değer içeremez.
    Bir tabloda sadece bir tane birincil anahtar tanımlanabilir.
    Birincil anahtar, veritabanındaki diğer tablolarla ilişkilendirilerek referans alınabilir.
    Örnek bir birincil anahtar tanımı:

    CREATE TABLE Customers (
        CustomerID INT PRIMARY KEY,
        FirstName VARCHAR(50),
        LastName VARCHAR(50)
    );
    Yukarıdaki örnekte CustomerID sütunu birincil anahtardır.

    Unique Key (Benzersiz Anahtar):

    Benzersiz anahtar, bir tablodaki kayıtları benzersiz bir şekilde tanımlayan bir sütundur.
    Bir benzersiz anahtar değeri eşsiz olmalıdır, ancak birincil anahtarın aksine NULL değer içerebilir.
    Bir tabloda birden fazla benzersiz anahtar tanımlanabilir.
    Bir benzersiz anahtar, birincil anahtara alternatif olarak kullanılabilir, ancak birden fazla benzersiz anahtar tanımlanabilir.
    Örnek bir benzersiz anahtar tanımı:


    CREATE TABLE Products (
        ProductID INT PRIMARY KEY,
        ProductCode VARCHAR(20) UNIQUE,
        ProductName VARCHAR(100)
    );
    Yukarıdaki örnekte ProductCode sütunu benzersiz bir anahtar olarak tanımlanmıştır.

    Her iki anahtar türü de veritabanı tasarımında veri bütünlüğünü sağlamak ve veri tekrarını önlemek için kullanılır. Birincil anahtar genellikle bir tablonun ana tanımlayıcısı olarak kullanılırken, benzersiz anahtarlar ise belirli bir sütunu benzersiz bir hale getirmek için kullanılır.

............................................................................................................................................................................................................................................................................................................................................................................................................................................

SQL'de VARCHAR ve TEXT veri tipleri, metin tabanlı verileri depolamak için kullanılır, ancak bazı farklılıkları vardır. İşte bu iki veri tipi arasındaki temel farklar:

Depolama Boyutu:

VARCHAR: Sabit bir maksimum karakter uzunluğunu belirtir, ancak gerçek veri uzunluğuna göre boyut alır. Örneğin, VARCHAR(255) ifadesi en fazla 255 karakterlik bir metni depolar, ancak gerçek metin boyutuna göre değişir.
TEXT: TEXT veri tipi, değişken karakter uzunluğu olan büyük miktardaki metin verisini depolamak için kullanılır. Genellikle çok büyük metin verilerini depolamak için kullanılır ve bir sınırlama olmadan büyük miktarda metni destekler.
Endeksleme:

VARCHAR: İndeksleme için kullanılabilir ve genellikle daha etkili bir arama performansı sunabilir.
TEXT: Eskiden beri bu tip alanlar üzerinde indeksleme sınırlıydı, ancak modern SQL Server sürümleri (örneğin SQL Server 2005 ve sonrası) bu konuda daha fazla esneklik sunar.
Karakter Seti ve Kollasyon:

VARCHAR: Karakter seti ve kollasyon belirtilerek oluşturulabilir, bu da metin sıralama ve karşılaştırma kurallarını belirlemenizi sağlar.
TEXT: Genellikle, bu tip bir alanın üzerinde karakter seti ve kollasyon belirtilmez. Ancak, modern veritabanı sistemlerinde bu belirtilmesi mümkün olabilir.
Veri Uzunluğu ve Performans:

VARCHAR: Uzunluğu belirtilmiş bir VARCHAR alanı, depolanan verinin gerçek uzunluğu kadar yer kaplar. Bu, bellek kullanımını optimize edebilir.
TEXT: Genellikle, çok büyük metin verilerini depolamak için kullanılır, ancak VARCHAR'a kıyasla daha fazla bellek kullanabilir.
Veri Manipülasyonu ve Fonksiyonlar:

VARCHAR: Metin manipülasyonu ve fonksiyonları daha esnek bir şekilde destekler.
TEXT: Bazı durumlarda, TEXT alanlarında çalışırken bazı metin manipülasyon fonksiyonları veya işlemleri VARCHAR alanlara göre daha karmaşık olabilir.
Özetle, VARCHAR ve TEXT veri tipleri arasındaki temel farklar, depolama boyutu, endeksleme, karakter seti ve kollasyon belirleme, veri uzunluğu ve performansla ilgilidir. Hangi veri tipini kullanacağınız, projenizin ihtiyaçlarına ve veri kullanım senaryolarına bağlı olacaktır. Çoğu durumda, VARCHAR tercih edilir, ancak büyük metin verileri için TEXT de uygun bir seçenektir.




    Microsoft SQL Server, farklı işletim sistemleri üzerinde çalışabilen bir veritabanı yönetim sistemidir. SQL Server, şu işletim sistemlerinde desteklenir:

    Windows İşletim Sistemleri:

    Microsoft SQL Server, öncelikle Windows işletim sistemleri üzerinde çalışmak üzere tasarlanmıştır. Bu işletim sistemleri arasında Windows Server ve Windows Desktop sürümleri bulunmaktadır.
    Örneğin, Windows Server 2019, Windows Server 2016, Windows 10, Windows 8.1 gibi işletim sistemleri desteklenir.
    Linux İşletim Sistemi:

    SQL Server 2017 sürümü ve sonrası, Linux işletim sistemlerini de desteklemektedir. Bu, Linux tabanlı sistemlerde SQL Server kullanma imkanı sağlar.
    Örneğin, Ubuntu, Red Hat Enterprise Linux (RHEL), SUSE Linux Enterprise Server (SLES) gibi Linux dağıtımları desteklenir.
    Docker Üzerinde Çalışma:

    SQL Server, Docker konteyner teknolojisi üzerinde de çalışabilir. Bu, SQL Server'ı çeşitli ortamlarda hızlı bir şekilde dağıtmak ve yönetmek için kullanışlıdır.
    Bu çeşitlilik, SQL Server'ın farklı ortamlarda ve altyapılarda kullanılabilmesini sağlar. Ancak, her SQL Server sürümü her işletim sistemini desteklemez. Bu nedenle, kullanmak istediğiniz SQL Server sürümünün belirli bir işletim sistemini destekleyip desteklemediğini kontrol etmek önemlidir. SQL Server'ın resmi belgeleri ve Microsoft'un web sitesi, desteklenen işletim sistemleri hakkında güncel bilgi sağlar.




        T-SQL (Transact-SQL), Microsoft SQL Server veritabanı yönetim sistemleri için özel olarak tasarlanmış bir sorgu ve programlama dilidir. T-SQL, SQL (Structured Query Language) dilini temel alır, ancak SQL diline ek olarak bir dizi Microsoft özelliği ve genişletmesi içerir. SQL Server üzerinde veritabanı işlemlerini yönetmek, sorguları çalıştırmak, depolamak ve iş mantığı uygulamak için kullanılır.

        T-SQL, aşağıdaki gibi temel özelliklere sahiptir:

        Sorgu Dili:

        T-SQL, SQL dilinin bir genişletmesi olarak kullanılır. Temel SQL sorguları ile birlikte T-SQL, veritabanı üzerinde çeşitli işlemleri gerçekleştirmek için kullanılır.
        Saklı Prosedürler ve Fonksiyonlar:

        T-SQL, saklı prosedürler ve fonksiyonlar oluşturmak ve bu nesneleri veritabanında depolamak için kullanılır. Bu, daha karmaşık işlemleri gerçekleştirmek ve tekrar kullanılabilir kod blokları oluşturmak için önemlidir.
        Veritabanı Yönetimi:

        T-SQL, veritabanı yönetimi için kullanılır. Veritabanı, tablo oluşturma, indeksleme, güncelleme, silme gibi işlemleri gerçekleştirmek ve veritabanı nesnelerini yönetmek için T-SQL sorguları kullanılır.
        Triggers (Tetikleyiciler):

        T-SQL, veritabanında belirli olaylar gerçekleştiğinde otomatik olarak çalışan tetikleyiciler oluşturmak için kullanılır. Bu, belirli bir tablo üzerinde yapılan işlemlere tepki verme yeteneği sağlar.
        Transact-SQL İfadeleri:

        T-SQL, transaktions (işlemler) yönetimi için ifadeler içerir. İşlemleri başlatma, kaydetme, geri alma ve işlemleri yönetme yeteneği sunar.
        T-SQL, özellikle Microsoft SQL Server üzerinde kullanıldığı için, SQL Server özelliklerini ve fonksiyonlarını destekler. Ancak, standart SQL sorgularının çoğunu da içerir. T-SQL, SQL Server veritabanı yönetim sistemi içinde kullanılmak üzere tasarlanmış olmasına rağmen, başka veritabanı yönetim sistemlerinde (örneğin, Azure SQL Database, Azure Synapse Analytics, SQL Server on Linux) sınırlı bir şekilde desteklenebilir.

1. Veritabanı Oluşturma:

CREATE DATABASE MyDatabase;
2. Kullanılacak Veritabanını Seçme:

USE MyDatabase;
3. Tablo Oluşturma:

CREATE TABLE Employees (
    EmployeeID INT PRIMARY KEY,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Department VARCHAR(50)
);
4. Veri Eklemek:

INSERT INTO Employees (EmployeeID, FirstName, LastName, Department)
VALUES (1, 'John', 'Doe', 'IT');
5. Veri Sorgulama:

SELECT * FROM Employees;
6. Koşullu Sorgulama:

SELECT * FROM Employees WHERE Department = 'IT';
7. Veri Güncelleme:

UPDATE Employees SET Department = 'HR' WHERE EmployeeID = 1;
8. Veri Silme:


DELETE FROM Employees WHERE EmployeeID = 1;
9. Düzenlenmiş Sorgu:

SELECT FirstName, LastName FROM Employees WHERE Department = 'HR' ORDER BY LastName DESC;
10. Toplam veya Ortalama Alma:

SELECT COUNT(*) AS TotalEmployees FROM Employees;
SELECT AVG(EmployeeID) AS AvgEmployeeID FROM Employees;
Bu temel SQL sorguları, bir veritabanı oluşturmak, tablo eklemek, veri eklemek, sorgulamak, güncellemek, silmek ve çeşitli analitik işlemleri gerçekleştirmek için kullanılabilir. Gerçek projelerde, sorgular daha karmaşık olabilir ve JOIN, GROUP BY gibi daha gelişmiş SQL özellikleri kullanılabilir. SQL Server belgeleri ve kaynakları, daha fazla bilgi ve öğrenme kaynakları sağlayabilir.


    
    SELECT [id]
        ,[adi]
        ,[soyadi]
        ,[email]
        ,[telefon]
        ,[katildigiEgitim]
        ,[EvAdresi]
    FROM [emre].[dbo].[Ogrenciler];

    select kolonlar veya * from db.table;     * demek tüm demektir...

........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................

sql sorguları büyük küçük harfe duyarlı değildir.  select * from ogrenciler ile select * from OGRENCILER arasında fark yok inglizce karakterlre dikkat etmek lazım sadece.
tools -> options ->  word wrap ok dersek eğer ekranın dışına çıkarsa sorfu o zaman alt saıta geçirir.   line numbers ok dersek satır numaralarını görebiliriz.



/*

bu karakterler ile çoklu satır yapabiliriz. 
sql komutları kullanım amaçlarına göre 3 kategoriye ayrılırlar.
1- ddl(data definition language) -> temel olarak bir veritabanın  tablolalarının fonksiyonlarının vs vs oluştutulmasını sağlayan yapıdır.    create table drop table vs vs... tablo database silmek için drop ama veri silmek için delete kullanırız.

2- dml(data manipulation language) -> veri girmek silmek güncellemek için kullanılan yapı... CRUD   create read update delete işlemleri. yani
3- dcl(data control language) -> veritabanı kulanıcısı ile ilgili işlem yetkileri ayarı vs vs...
    mesela sadece select yapabilsin insert yapamasın gibi...
*/

-- ile /**/ yorum satırlarıdır sqlde.
... pythonda #   ile """  """  ''' ''' vardır... 


            Veritabanı işlemleri sırasında kullanılan komutlar farklı kategorilere ayrılabilir. En yaygın üç kategori Data Definition Language (DDL), Data Manipulation Language (DML) ve Data Control Language (DCL) olarak bilinir. İşte bu kategorilerin açıklamaları:

            Data Definition Language (DDL):

            DDL, veritabanı yapısını tanımlamak ve değiştirmek için kullanılan komutları içerir.
            DDL komutları, tablo oluşturma, değiştirme ve silme gibi veritabanı nesnelerini tanımlamak için kullanılır.
            DDL komutları, veritabanı şemasını (schema) oluşturmak ve değiştirmek için kullanılır.
            Örnek DDL komutları:

            CREATE TABLE: Yeni bir tablo oluşturur.
            ALTER TABLE: Mevcut bir tabloyu değiştirir.
            DROP TABLE: Bir tabloyu siler.
            Data Manipulation Language (DML):

            DML, veritabanında saklanan verileri sorgulamak, eklemek, güncellemek ve silmek için kullanılan komutları içerir.
            DML komutları, veri manipülasyonunu gerçekleştirmek için kullanılır ve veritabanındaki kayıtları etkiler.
            Örnek DML komutları:

            SELECT: Veri sorgulama ve getirme işlemleri için kullanılır.
            INSERT: Yeni veri eklemek için kullanılır.
            UPDATE: Mevcut veriyi güncellemek için kullanılır.
            DELETE: Veriyi silmek için kullanılır.
            Data Control Language (DCL):

            DCL, veritabanı kullanıcılarının erişim haklarını kontrol etmek için kullanılan komutları içerir.
            DCL komutları, kullanıcıların veritabanı nesnelerine (tablo, görünüm, prosedür vb.) erişimini kontrol etmek için kullanılır.
            Örnek DCL komutları:

            GRANT: Kullanıcılara belirli erişim hakları verir.
            REVOKE: Kullanıcılardan belirli erişim haklarını kaldırır.
            Bu kategoriler, veritabanı yönetimi ve güvenliği için temel yapı taşlarını oluşturur. DDL, veritabanı nesnelerini tanımlar; DML, veritabanındaki verileri işler; ve DCL, veritabanı güvenliğini yönetir.

mesela sqlserver ile uygulama ile işlem yapsakta arka planda sql komutları çalışıyor veritabanı ile otomasyon olarka sql ile haberleşiyor.



create database OrnekDb;  // veritaban oluşturmak için kullanırız iki kere üst üste kullanırsak verir. çünkü oluşturulmuşun üstüne aynısı oluşmaz.

IF NOT EXISTS (SELECT name FROM sys.databases WHERE name = 'OrnekDb')
BEGIN
    EXEC('CREATE DATABASE OrnekDb;');
END;

-- database oluştur eğer varsa bu isimde atla demektir...


alter database ornekdb modify name = ornekdatabase;    -- veritabanının ismini değiştirmek için kullanırız alter demek db ve table üzerinde güncelleme yap demektir... modify kelimesi şarttır.

drop database ismi;  -- ile biz table veya db silebilir ve bağlantıdan silebiliriz...

use dbismi;
create table tablename(verismi veritürü, verisimi veritürü...);    -- önce verinin ismi sonra türü kullanılır... 

create database ornekdb
go 
use ornekdb1 
go 
create table Personel(id int, adi varchar(50), soyadi varchar(50)); -- bu duurumda veriler null olabilir demek bunun önüne geçmek için not null deriz.

-- go ile bir sonraki satıra geç diyebiliriz...   create database ornekdb ile oluşturduk db go ile bir sonraki işleme geç dedik use ornekdb dedik seçili db o olsun dmeek... go dedik sonra diğer işleme geç demek tablo oluşturduk... önce verinin ismi soonra türü programlamalardan farklı bir yapısı var.


create database ornekdb
go  -- benden önceki işlemi bitir sonra diğer işleme geç demek
use ornekdb1 
go 
create table Personel(id int not null, adi varchar(50) not null, soyadi varchar(50) not null, Email nvarchar(50) null); -- null demesek bile otomatik olarak null olabilir ibaresi koyacak allow nulls izni verecek...

-- null dedik diye veriler null olmaz... istersek null olabilir boş bırakılabilir satırda...
-- Email için nvarchar(50) kullan...

....SONRADAN TABLODA DEĞİŞİKLİ

use ornekdatabase;
go
alter table Personel add Email nvarchar(50); 

-- bir kolon ekledik...


use ornekdatabase;
go
alter table Personel alter column Email nvarchar(40);

-- alter ile tabloda değişim yapacağız dedik alter column ile kolonda güncelleme ypacağız dedik sonra ise değişecek halini girdik.


use ornekdatabase;
go
alter table Personel alter column id int not null;

-- kolonda değişiklik ve not null ekledik boş geçilemez hiçbir satırda dedik aslında.


use ornekdatabase;
go
alter table Personel drop column Email;
-- burada tablodaki kolonu silebiliriz... komple o kolon düşer.


use ornekdatabase;
go
insert into Personel(id,adi,soyadi) values(1,'merco','ford');
insert into Personel values(1,'merco','ford'); -- tüm sütünların değerlerini göndermemiz gerekir bu yapıda... null olmasını istediğimizin değerini null veerebiliriz. mesela soyadi null deriz.
go
insert into Personel(id,adi) values(1,'BMW');

select * from Personel;

-- burada şu olur insert into tablo(ekleme yapılacak kolonlar ) istediğimiz sıra ile ama values sırası ile aynı olur atama sırası 
-- insert into Personel values(1,'merco','ford') yaparsak tüm kolonları alır sırası ile ekleme yapar values ile... varsayılan kolonlar üzerinden işlem yapar.
-- insert into Personel(id,adi) values(1,'BMW');   burada ise sırası ile atama alacak olan kolonların ismini gireriz ve sonrasında alacak değerlerini ama şu var null olabilenleri yazmayabiliriz not null koşulu olanları girmemiz lazım...

insert into Personel(id,adi) values(1,'BMW');
-- burada soyadi null olur...



use ornekdatabase;
go
update Personel set adi = 'ferrari' where adi = 'emre'; --   update ile var olan veriler üzerinde işlem yaparız.
-- set demek neler değişecek değişince ne gelsin yeni olarak deriz. where kısmını yazmazsak hepsi ferrari olur true kabul eder.
-- where adi = 'emre' and soyadi = 'aytas' dersek adi emre soyadi aytas olan birisinin ismi ferrari olur...
-- where kısmı önemlidir yoksa hepsi aynı değeri alır set ne belirlediyse.


use ornekdatabase;
go
delete from Personel where id = 1;

-- delete from tablename where id = 1;    where olmadanda olabilir.
-- eğer where olmazsa true kabul eder her satırı siler..
-- delete silerken komple satırı siler.



use ornekdatabase;
go
--  backup yani yedek alma...

backup database ornekdatabase to disk = 'C:\\Users\emreaornekdbyedek.bak';
-- to disk demek diske al demek 
-- sonra = der ve bir dizin gireriz.
-- .bak yedek databasenin uzantısıdır.


use ornekdatabase;
go

Truncate table Personel; -- neden kullanılır çünkü silme işlemini çok hızlı gerçekleştirir ve veriler geri gelemez şekilde silinir...
select * from Personel;
-- Truncate table tabloismi demek tablodaki tüm verileri sil demektir...
drop table Personel;
-- drop table tabloismi demek tabloyu dbden sil dmektir.


    create database Bilisim;
    go
    use Bilisim;
    go
    create table Bolumler(bolumno int not null,bolumadi nvarchar(50) null, primary key(bolumno));
    -- en son primary key alanı oluşturduk ve içerisine pk olacak olan sutunların isimlerini girdik...
    go
    create table 
    Calisanlar
    (tcno nvarchar(11) not null,
    adi nvarchar(50) not null,
    bolumno int,
    cinsiyet nchar(1),
    primary key(tcno), -- primary key(....) içerisinde biz primary key olacak olan verileri belirleyebiliriz.
    foreign key(bolumno) references bolumler(bolumno)      -- foreign key demek yabancı anahtar demek ikincilde denebilir. başka bir tablodaki alanla bu tablodaki alanı ilişkilendiricez demektir.
    -- foreign keyler ile tabloların ortak noktalarını belirleriz... böylece aslında bellekte fazladan yer kaplamamasını ve daha kullanılabilir olmasını sağlarız.
    );

    go

    create table 
    Urunler(

    urunno int not null,
    urunadi nvarchar(50) not null,
    urunsayisi int null,
    urunfiyati decimal(18,2),-- decimal(18,2) 18 basamağa kadar ve 2 basamak küsürat alabilen demektir float vs yerine decimal kullanılır hassastır iyidir. 
    bolumno int not null,
    primary key(urunno),
    foreign key(bolumno) references bolumler(bolumno) -- foreign key(bağlantı alacak olan sutunadı) references referansverecektablo(referans alınacak sutunuismi)
    -- mesela burada bolumno'yu bolumlerdeki bolumno ile ilişkilendirdik... eğer bolumlerdeki bolum nosu olmayan bir bolumno gieresek urunlere hata verir ilişkili olması lazım...
    );

    go

    create table -- her veriyi , ile ayırırız  create table isim(, , , ); yapısı kullanırız
    Satislar(
    satisno int not null,
    urunno int not null,
    calisantcno nvarchar(11) null,
    miktar int null,
    fiyat decimal(18,2),
    tarih date null,
    primary key(satisno),
    foreign key(urunno) references Urunler(urunno),
    foreign key(calisantcno) references Calisanlar(tcno) -- foreign key tanımladık iki tane alt alta -- calisantcno eldeki tablo references Calisanlar(tcno) referenceseten sonrası başka tablodan gelecek demektir.

    );




/*
--T -SQL
sql dildir ama veritbanlarına göre değişim olmuştur. t-sql sqlserver için...
döngüler if else blokları vs vs aslında t-sql kısmına girer... bu t-sql'i biz oraclede kullanamayız onun için p-sql var...

--T-sqlde değişken kullanımı
   * değişkenler türkçe karakter ve boşlukla başlayamaz.
   * değişken isimleri harf ile başlayıp rakam ile bitebilir _ alabilir
   * select insert vs vs sql'in komutları değişken isimleri olamaz. 
   * değişken isimleri @ @@ ## # $ ile başlayamaz isimlendirmede...
   * değişken isimlerinde büyük küçük harf öenmsiz sql büyük küçük harf duyarlı değil.
   * değişken tanımlama declare komutu ile yapılır

*/

-- Değişken oluşturmab
declare @Bolumno int; -- değişkenler bu yapı ile tanımlanırlar...
declare @Bolumadi nvarchar(50);
-- Değişkenlere değer atama
set @Bolumno = 5;
set @Bolumadi = 'Veritabani programlama'; -- sqlde string değerleri '' içeriisnde tanımlarız  "" içeriisnde değil...
-- Değişkenleri Yazdırma
print @Bolumno;
print @Bolumadi;



use Bilisim;

declare @Bolumler2 table(
    bolumno int,
	bolumadi nvarchar(50)

);

insert into @bolumler2 values(1,'Veritabani'); -- Tsqldede insert into @tablename(kolonlar) values(....);
insert into @bolumler2 values(2,'Programlama');
insert into @bolumler2 values(3,'yazılım');

select * from @Bolumler2; -- select * veya kolon isimleri from table name istersek where ekleyebiliriz...

/*  ...TSQLDE İF ELSE İF ELSE YAPISI KULLANIMI...  */

declare @Urunsayisi varchar(50); -- değişken tanımladık...
select @Urunsayisi = COUNT(*) from urunler where (urunfiyati < 200); -- değişkene değer atanacak count(*) tüm satırlar aranacak nereden urunlerden where fiyatı 200den az olanları alacağız.
if (@Urunsayisi > 0) -- eğer ürün sayısı 0dan fazla ise yazdırma yapar..
print 'fiyati 200 tlden az + ' + @urunsayisi + ' urun vardır...'; -- string append mantığı var...
else 
print 'fiyati 200 tlden az urun yoktur...'

select * from urunler;



    use Bilisim;
    select adi,cinsiyet = case cinsiyet
    when 'e' then 'Erkek'
    when 'k' then 'Kadin'
    end 
    from calisanlar;

-- burada olan şu select adi,cinsiyet olarak almadık...  cinsiyet = case cinsiyet when e ise then yani sonra Erkek yaparak getir o kolondaki dğeri demek...



--tsqlde while yapısı...

use Bilisim;
declare @sayac int;
declare @toplam int;
set @sayac = 1; -- set ile atama yaparız bir değişkene...
set @toplam = 0;
while (@sayac <= 100)  --while içerisinde () koşul belirleriz.
begin -- {} mantığıdır... begin ve end  begin { olur } ise end

   set @toplam = @toplam + @sayac;
   set @sayac = @sayac + 1;
   if(@toplam > 300) break; -- eğer @toplam değişkeni büyükse 300denbu döngüyü kır demektir.
   else continue; -- eğer koşul sağlanmıyorsa devam et demektir.

end

print @sayac;
print @toplam;



-- GOTO KULLANIMI...
use Bilisim;

declare @sayac int; -- değişken tanımlama
declare @toplam int;
set @sayac = 1; -- set ile atama yaparız bir değişkene...
set @toplam = 0;
	basla:    -- : koyunca sql bunun bir komut olduğunu anlar basla adlı bir komut ürettik aslında.
		  set @toplam = @toplam + @sayac;
		  set @sayac = @sayac + 1;
		 if(@sayac <= 100)
		 goto basla;
print @sayac;
print @toplam;


-- HATA DENETİMİ...
use Bilisim;
select * from sys.messages; -- sistemdeki hataları görebiliriz. bunu yazdırınca hataların nedenlerini idlerini vs görebiliriz. sistem üzerindeki hataları görürüz.
@@error -- en son oluşan hatayı elde edebiliriz.

        İşte SQL Server'da hata yönetimi için kullanılan bazı araçlar:



        TRY-CATCH Blokları:

        TRY-CATCH blokları, SQL Server'da hata yönetimi için kullanılan temel yapıdır. Bir TRY bloğu içindeki kodu denersiniz ve herhangi bir hata olursa CATCH bloğu çalıştırılır.

        BEGIN TRY
            -- Potansiyel hata oluşturan kod
            SELECT 1 / 0;
        END TRY
        BEGIN CATCH
            -- Hata durumunda yapılacaklar
            PRINT 'Hata oluştu: ' + ERROR_MESSAGE();
        END CATCH;




        RAISERROR Fonksiyonu:

        RAISERROR fonksiyonu, belirli bir hata durumunu tetiklemek ve hata mesajını döndürmek için kullanılır.

        BEGIN TRY
            IF (1 = 1)
                RAISERROR('1 eşittir 1', 16, 1);
        END TRY
        BEGIN CATCH
            PRINT 'Hata oluştu: ' + ERROR_MESSAGE();
        END CATCH;




        THROW İfadesi (SQL Server 2012 ve sonrası):

        THROW ifadesi, bir hata durumunu tetiklemek için kullanılır ve RAISERROR fonksiyonuna benzer şekilde çalışır. SQL Server 2012 ve sonraki sürümlerde kullanılabilir.

        BEGIN TRY
            IF (1 = 1)
                THROW 50000, '1 eşittir 1', 1;
        END TRY
        BEGIN CATCH
            PRINT 'Hata oluştu: ' + ERROR_MESSAGE();
        END CATCH;



        @@ERROR ve @@ROWCOUNT Değişkenleri:

        @@ERROR ve @@ROWCOUNT sistem değişkenleri, en son sorguda oluşan hata kodunu ve etkilenen satır sayısını içerir. Bu değişkenler hata durumlarını kontrol etmek için kullanılabilir.

        SELECT 1 / 0;
        IF @@ERROR <> 0
            PRINT 'Hata oluştu: ' + CONVERT(VARCHAR, @@ERROR);
        Bu mekanizmalar, SQL Server'da hata yönetimi için kullanılabilir. Hata durumlarına uygun şekilde yanıt vererek, uygulamanın hatayı ele almasını ve gerektiğinde geri bildirim sağlamasını sağlayabilirsiniz

-- HATA DENETİMİ...
use Bilisim;
select * from sys.messages; -- sistemdeki hataları görebiliriz. bunu yazdırınca hataların nedenlerini idlerini vs görebiliriz. sistem üzerindeki hataları görürüz.
begin try -- try içerisinde hata çıkabilir kodları yazarız...
   select 4/0;  -- burada hata verecek catch kısmına gidecek sistem...
end try
begin catch
   select ERROR_NUMBER() as 'hata numarasi', -- select demek return demektir aslında getirir...
   ERROR_SEVERITY() as 'hata düzeyi',
   ERROR_STATE() as 'hata durumu',
   ERROR_LINE() as 'hatanın satırı',
   ERROR_MESSAGE() as 'Olusan hata'-- as ile isimlendirme yapabiliriz.
end catch


-- COMMİT VE ROLLBACK... tablolarda yapmış olduğumuz silme güncelleme başarısız olursa işlemi geri almak için kullanılır...
-- eğer hata olur try catch ile geri alma işlemi yapabiliriz...
use Bilisim;
-- standart başarılı işlemde kullanımı...
select * from calisanlar;
select * from bolumler;
begin
    
	begin try

		begin tran  -- transaction islemini baslat...
			update calisanlar set adi = 'ali riza' where tcno = '123456789';
			update  bilisim set bolumadi = 'Ev aletleri' where bolumno = 3;
		commit tran -- ve işlemleri işle tabloya... başlatılan tran'ı işle demek...

	end try


	begin catch
	 -- tran ya da transaction yazabiliriz.  
	  rollback transaction  -- yukarıdaki sql komutlarından herhangi birinde bir hata olursa eğer o zaman başlatılan işlemi ve işlenen değişiklikleri geri al demektir... eğer birinde bir hata olursa diğerlerinide geri al... ya hepsini işle ya da hiçbirini böylece veri bütünliğü sağlanır.
	    --bir işlemde hata olursa tran içerisndeki tüm değişiklikleri geri alır.

	  print 'HATA OLUŞTU VE TÜM İŞLEMLER GERİ ALINDI...'
	end catch 

end

-- transaction ile biz bir bölge belirleriz aslında begin ve end içerisinde böylece veri bütünlüğü sağlarız ya hepsi üzerinde işlem yapılır güncellenir veya silinir ya da hiçbir şey yapılmaz.



-- SQL CONSTRAİNTS(KISITLAYICILAR...)
-- veritabanının bütünlüğünü sağlamak için kullanılan mantıksal sınırlamalara kısıt denir.
-- veritabanına hatalı girişleri engellemek için kullanılır...  mesela boş geçilemez deriz bir sutuna sonradan ama boş olan vardır o zaman hata verir gibi bunlara dikkat etmek lazım. ya eski verileri sileceğiz veya kısıta uymayan yerleri güncelleyeceğiz... 
			  --check kontrol kısıtlayıcısı: tablodaki bir sutunun hangi tür verileri alabileceğini vs belirleriz sutun null alabilir mi alamaz mı belirleriz.
         --Kısıtlayıcı çeşitleri
		      --primary key: null olamaz. kombinasyonlar farklı olmalıdır.
			  --unique: null değer alabilir ama tüm değerler birbirinden farklı olmadılır tcno gibi değerler vs vss... satır bütünlüğü içi kullanılır. 

use Bilisim;

ALTER TABLE calisanlar ADD CONSTRAINT UQ_Email UNIQUE (tcno);  -- tcno kolonuna UQ_Email adında bir unique key ekledik...




    SQL Server'de CHECK kısıtlaması, bir sütunun değerlerini belirli bir koşula göre kontrol etmek için kullanılır. Bu koşul, belirli bir mantıksal ifade veya fonksiyon olabilir. CHECK kısıtlaması, belirtilen koşulu sağlayan değerlerin sütuna eklenmesine izin verirken, koşulu sağlamayan değerlerin eklenmesini engeller.

    İşte CHECK kısıtlamasının nasıl kullanılacağına dair bir örnek:
      -- tablodaki bir sutunun hangi tipten verileri alacağı hangi değerler aralığında olacak belirleyebiliriz.
    CREATE TABLE Ogrenciler (
        OgrenciID INT PRIMARY KEY,
        Ad NVARCHAR(50),
        Soyad NVARCHAR(50),
        DogumTarihi DATE,
        Cinsiyet CHAR(1),
        CONSTRAINT CHK_Cinsiyet CHECK (Cinsiyet IN ('E', 'K'))
    );
    Bu örnekte, Ogrenciler adında bir tablo oluşturduk. Tablonun Cinsiyet adlı sütunu için CHECK kısıtlaması ekledik. Bu kısıtlama, Cinsiyet sütununa sadece 'E' (Erkek) veya 'K' (Kadın) değerlerinin eklenmesine izin verir. Başka bir deyişle, sütuna 'E' veya 'K' dışında bir değer eklemeye çalışırsanız, bir hata alırsınız.

    CHECK kısıtlaması, tablo oluşturulurken veya tabloya bir sütun eklenirken tanımlanabilir. Ayrıca, mevcut bir tabloya ALTER TABLE ifadesi ile sütun eklendikten sonra da CHECK kısıtlaması eklenebilir.



    İşte mevcut bir tabloya sütun eklendikten sonra CHECK kısıtlamasının nasıl eklenileceğine dair bir örnek:

    ALTER TABLE Ogrenciler
    ADD CONSTRAINT CHK_Yas CHECK (DATEDIFF(YEAR, DogumTarihi, GETDATE()) >= 18);
    Bu örnekte, Ogrenciler tablosuna DogumTarihi adında bir sütun ekledikten sonra, CHECK kısıtlamasıyla bu sütuna sadece 18 yaşından büyük öğrencilerin eklenebilmesini sağladık. Bu kısıtlama, GETDATE() fonksiyonunu kullanarak mevcut tarihi alır ve DogumTarihi sütunundaki doğum tarihinden yıllara çevirir. Sonuç olarak, öğrencinin yaşını kontrol eder ve sadece 18 yaşından büyük öğrencilerin eklenebilmesine izin verir.

alter table Urunler add constraint CKtc check (urunfiyati > 0);   -- örnek olarak ekleme cktc check kısıtının ismi... o constraint'in ismi...
     -- bir hata fırlatır burada böylece...



    SQL Server'da tetikleyiciler (triggers), belirli bir olayın gerçekleştiği durumlarda otomatik olarak çalışan saklı prosedürlerdir. Genellikle bir tabloya yapılan ekleme (INSERT), güncelleme (UPDATE) veya silme (DELETE) gibi işlemler sonrasında tetiklenirler. Tetikleyiciler, bu olayları algıladıklarında belirli bir işlemi gerçekleştirmek için kullanılır.

    Tetikleyiciler, veritabanı tutarlılığını sağlamak, iş akışını otomatikleştirmek, veri denetimini yapmak veya işlem takibini gerçekleştirmek gibi çeşitli amaçlar için kullanılabilir.

    İşte bir örnek:


    CREATE TRIGGER trgAfterInsert
    ON TabloAdi
    AFTER INSERT
    AS
    BEGIN
        -- Eklenecek yeni kayıt bilgilerini al
        DECLARE @ID INT;
        SELECT @ID = inserted.ID FROM inserted;

        -- Yapılacak işlem (örneğin, bir log tablosuna ekleme yapma)
        INSERT INTO LogTablosu (Islem, Tarih) VALUES ('Yeni kayıt eklendi', GETDATE());
    END;
    Bu örnekte, TabloAdi adındaki bir tabloya yeni bir kayıt eklenmesinden sonra çalışacak bir tetikleyici oluşturduk. Tetikleyici, AFTER INSERT (ekleme işleminden sonra) olarak belirlendi. Tetikleyicinin içinde, yeni eklenen kaydın ID değeri alınıyor ve bu bilgi kullanılarak bir log tablosuna yeni bir kayıt ekleniyor. Bu şekilde, her yeni ekleme işlemi gerçekleştiğinde bir log kaydı oluşturulmuş olur.


-- TRİGGERS -- tetikleyici oluşturabilmek için veritabanının programcıya izin vermesi lazım izni olan işlem yapabilir diğer işlemlerde olduğu gibi.
         --Kısıtlayıcı çeşitleri
		      --primary key: null olamaz. kombinasyonlar farklı olmalıdır.
			  --unique: null değer alabilir ama tüm değerler birbirinden farklı olmadılır tcno gibi değerler vs vss... satır bütünlüğü içi kullanılır. 
			  --check kontrol kısıtlayıcısı: tablodaki bir sutunun hangi tür verileri alabileceğini vs belirleriz sutun null alabilir mi alamaz mı belirleriz.
			  --triggersler(tetikleyiciler) bir işlem yapıldıktan sonra başka işlemi tetiklemek için kullanılırlar...
			       --mssqlde iki çeşit triggers vardır.  1- ardı sıra tetikleyiciler. bir işlem bittikten sonra başka işlem tetikleme
				                                       --2- yerine tetikleyiciler. tetikleyiciyi çağıran eylem çağrılınca devreye girer... thread mantığı...
                                               -- insert tetikleyicisi: tabloya kayıt eklendiğinde tetiklenir.
											   -- delete tetikleyicisi: tablodan veri silinince tetiklenir.
											   -- update triggers: güncelleme olunca tetiklenir.

-- yeni bir tetikleyici oluşturmak için create trigger
-- var olan triggeri güncellemek için ise alter trigger kullanırız.

CREATE TRIGGER  -- trigger olutur dedik.
uruntrigger on urunler after insert as -- urunlere'e ekleme olduktan sonra çalış. ismi uruntrigger olacak...
declare @inturunsayisi int select @inturunsayisi = (select urunsayisi from inserted); -- declare ile bir değişken oluşturduk. from inserted demek eklenen veri demek
if @inturunsayisi is null -- eğer urunsayısı null ise..
update Urunler set urunsayisi = 1 where Urunler.urunno = (select urunno from inserted); -- urunsayisini değiştir 1 yap... 
-- nereden urunno eklenen urunno ile aynı olan... demek select urunno return et urunno demek... from inserted demek eklenenden urunnoyu return et demek..
-- eklenen urunnosu null ise bir veri eklerken o zaman şu olur urunsayisi 1 olur otomatik olarak. böylece null geçilmez urunsayisi.

insert into Urunler(urunno,urunadi,urunfiyati,bolumno) values(121,'dfd',122,3); -- burada ürünsayısını null yaptık ama trigger sayesinde 1 olacak... 
-- çünkü eğer null olursa onu sen otomatik olarak 1 ata triggeri girdik.



create trigger urunlersilmetrigger on urunler
for delete -- sile olduğu zaman çalışacak olan trigger...
as
declare @inturunsayisi int
select @inturunsayisi = (select urunsayisi from deleted); -- silinen değeri al... urunsayisi değerini al silinen satırdan ve @inturunsayisina ata. 
if @inturunsayisi > 1
begin 

rollback tran 
raisError('urun sayisi 1den fazla...',11,1); -- hata fırlat deriz eğer silinen ürünün sayısı 1den fazla ise.

end

select * from Urunler;



-- update tetikleyicisi...
create trigger updatetrigger on urunler 
for update 
as 
raisError('indirim yapılan urun sayisi',11,1,@@rowcount); -- @@rowcount demek. etkilenen satır sayısını getirir... 
return

update urunler set urunfiyati = urunfiyati - 10 where urunfiyati > 100; 




-- TSQLDE STORED PROCEDURE(SAKLI YORDAM) VE FONKSİYON KULLANIMI...  stored prosedürler programlability klasorunde saklanırlar stored procesured klasörunde saklanırlar. stored procesured derlenmiş bir şekilde veritabanında tutulduğu için çok hızlı çalışır normal bir sql komutuna göre... crud işlemleri vs daha hızlı hale getirebiliriz bunlar derlenmiş halde sistemde dururlar böylece daha hızlı çalışırlar. işlemleri metot haline getirerek aynı işlemi tek metotla kodları tekrar yazmadan kullanılabilir hale getirir.

-- STORED PROCEDURE(SAKLI YORDAM) VE FONKSİYON arasında farklar vardır... programlability klasöründe metotlar ve stored precedureler ayrı tutulurlar farkları vardır. mesela max adlı metot en yuksek değeri getirir. hazır olan fonksiyonlardır substring gibidirler. stored precedureler genel olarak hızlı crud için kullanılır.

	-- kullanıcı tanımlı fonksiyonların içerisinde herhangi bir yerde where/having/ select vb kullanılabilirken saklı yordam kullanılamaz. ayrıca saklı yordamda metotlar çağrılabilirken fonksiyon içeriisnde saklı yordam çağrılamaz. çünkü stored precedureceler static ama metotlar değiller. sp > func

	-- kullanıcı tanımlı metot(kendi yazacağımız metot) mutlaka bir tablo veya sayılı değer döndürmelidir. döndürdüğü tablo değeri, diğer tablolar ile join vb. yapmak için kullanılabilir. saklı yordamların mutlaka değer döndürmeleri gerekmez.
	
	-- saklı yordamlarda veri işleme (select/ update / delete ) komutları çalışabilirken kullanıcı tarafından yazılmış metotlar bu işlemleri yapamaz...

	-- saklı yordam içinde try catch ile hata ayıklama yapabiliriz ama metot(kendi yazdığımız)larda try catch kullanamayız.
	
	-- saklı yordam hareket yönetemi varken kullanıcı tarafından yazılmış metotlarda bu mümkün değil.
	
	-- stored precesured derlenmiş halde tutulurken metotlar çalışma zamanında derlenir çalıştırılırlar.

-- bilişim veritabanı tabloları hakkında bilgi veren sistem stored precedured'i çalıştırdık...
exec sp_tables -- bir saklı yordamı exec ve SPismi ile çalıştırabiliriz...
	

--YENİ STORED PRECESURED(saklı yordam) OLUŞTURMA... create ile oluştururuz.   join ile iki veya daha fazla tabloyu birleştiririz...
create proc sp_calisanbolum  -- create proc ismi
as
begin -- as beginden sonra işlem yaptıracağız.
select bolumler.bolumadi,Calisanlar.adi bolumler from Bolumler join -- join demek tabloları birleştir demek. from table1 join table2 on demek ne ile birleşecek demek on bolumler.bolumno = calisanlar. bolumno   satır satır bolumnoları aynı olanlar birleşecek...
Calisanlar on bolumler.bolumno = Calisanlar.bolumno;
end

-- ekleyince database'nin programlability klasörüne yerleşir.
exec sp_calisanbolum      ile biz bu stored procesured'i kullanabiliriz.



-- ürün listeleyen saklı yordam...
create proc sp_urunlistele
(@urunsayisiparametresi int)   -- biz dışarıdan veri göndereceğiz bunun karşılığıdır...  (@urunsayisiparametresi int = 0) dese idik eğer o zaman şu olurdu default olarak sıfır alırdı exec sp_urunlistele  olarak çağırdığımızda ürün sayısı 0dan fazla olanları getirirdi sistem.
as 
begin
select * from urunler where urunsayisi > @urunsayisiparametresi;
end
  
exec sp_urunlistele 15;  -- çalıştırması ise böyle. exec SPadi varsa paramatresi...
........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................

alter proc sp_urunlistele --alter demek var olan sp'yi değiştir demektir.
(@urunsayisiparametresi int = 0)   -- biz dışarıdan veri göndereceğiz bunun karşılığıdır...   = 0 demek default olarak 0 alsın eğer veri göndermezsek demektir.
as 
begin
select * from urunler where urunsayisi > @urunsayisiparametresi;
end



-- insert işlemi için proc kullanımı...
create proc spbolumekle
(@ad1 nvarchar(50)) 
as 
begin 
insert into Bolumler(bolumadi) values(@ad1); -- sadece bolumadina değer ekleme yapacağız burada...
end





-- insert işlemi için proc kullanımı...
alter proc spbolumekle
(@int1 int ,@ad1 nvarchar(50)) 
as 
begin 
insert into Bolumler(bolumno,bolumadi) values(@int1,@ad1); -- sadece bolumadina değer ekleme yapacağız burada...
end

exec spbolumekle 7,'emreford'; ile ise kkullanırız...


otomatik artmayı sağlamak için kullanırız.

identity specification'u true yaparsak eğer o zaman otomatik olarak artan yaparız....
identity increment = nereden başlayacak... 
identity seed kaçar kaçar artacak demektir.




-- delete işlemi için precosured...
create proc spUsatisSil
(@urunfiyati decimal(18,2))
as 
begin
delete from Satislar where fiyat < @urunfiyati;
end

exec spusatissil 100.33;      -- ile çağırabiliriz.



--stored procedures ile güncelleme...
create proc spurunfiyatguncelle(@artismiktari float)
as
begin 
update Urunler set urunfiyati = urunfiyati + urunfiyati * @artismiktari / 100;
end

-- istenen yüzde kadar artırır...

exec spurunfiyatguncelle 15;        ile çalıştırırız mesela. 


-- FONKSİYONLAR, c#da vs benzer yapıdadır... iki tip metot var. kullanıcı tipi tek bir tip döndürür oda tablo veya değerdir diğeri ise sql metotlarıdır. create ile üretiriz drop ile düşürürüz metotları.

create function urunadet(@urunadi nvarchar(50))
returns int -- int bir değer dönmek demektir.
as begin 

declare @inturunadedi int

set @inturunadedi = (select urunsayisi from Urunler where urunadi = @urunadi);
return @inturunadedi;
end

-- fonksiyonlar programlability klasorundeki functions klasörüne gider.

select dbo.urunadet('Mouse') as 'klavye adeti' -- as ile isimlendirme yapabiliriz alias demektir.
-- bu yapı ilede metotları kullanabiliriz...

........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................

create function fncalisanlistele() -- metot tanımlaması () demek metot demektir her zamanki gibi...
returns table -- tablo dönecek demektir... tablolarda nesneler gibi kullanılır.
as 
return select * from Calisanlar

select * from dbo.fncalisanlistele()   -- bir tablo döner dbo.fncalisanlistele()...
-- böylece yazdırmasını yaparız.. tüm sutunları yazdırır tüm satırlarıda...


-- fonskiyon güncelleme...
alter function fncalisanlistele(@cinsiyet nchar(1)) -- metot tanımlaması () demek metot demektir her zamanki gibi...
returns table -- tablo dönecek demektir... tablolarda nesneler gibi kullanılır.
as 
return select * from Calisanlar where cinsiyet = @cinsiyet;

select * from fncalisanlistele('e'); -- şeklinde de çağırabiliriz...

-- metot silme. tablo db function vs silme drop ile yapılır...
drop function fncalisanlistele;


içi verilerle dolu bir veritabanı bulalım... northwind database yazarız googleye ve indiririz...
instnwnd.sql   .sql uzantısı ile bunu indiririz githubdan... https://github.com/Microsoft/sql-server-samples/tree/master/samples/databases/northwind-pubs
sonra bu sql'i açarız ve çalıştırırız bunun sayesinde içi verilerle dolu bir db oluşur.




select * from table1; her satırı getirir ve her kolonu   select name,surname from table1 ise istenen kolonları name surname ve tüm satırları getirir...

select productname as ürünadi, unitprice as ürünfiyatı, unitstock * unitprice as toplamdeger from prodcuts p  -- p prodcuts'u artık p ile kullanabiliriz...  * ile çarpma işlemi yapabiliriz...
     productname as ürünadi  -- bu kolonu getir ama ürünadi ismi ile getir kolon ismi o olsun demek...
      unitstock * unitprice as toplamdeger    -- unitstock ile tane fiytını çarp ve toplam değer kolonunda getir demektir...  sayısal işlemlar yapabiliriz sayısal değrler üzerinde...

-- TOPLAMA
select 10 + 8 as islemsonucu; -- 18 getirir     islem sonucu kolonunda 18 değeri getirir...

--ÇIKARMA
select 10 - 8 as cikarma;  2 değerini cikarma kolonu içerisinde getirir.
-- select aslında return etmek mantığı kullanılır...

--çarpma
select 9 * 2 as carpma;  as kullanmazsak no name column kolonu içerisinde getirir değeri...

-- BÖLME 
select 34 / 18 as bolmesonucu; 

--MODULA
select 16 % 2 is modula; kalanı getirir modula kolonunda...



-- karşılaştırma operatörleri
-- EŞİTTİR 
select * from products where price = 18;
-- BÜYÜKTÜR
select * from products where price > 18;
-- KÜÇÜKTÜR 
select * from products where price < 18; 
-- BÜYÜK EŞİTTİR
select * from products where price >= 18; 
--KÜÇÜK EŞİTTİR
select * from products where price <= 18; 
-- EŞİT DEĞİLDİR
select * from products where price <> 18;  -- eşit değildir operatorleri <> demektir...

--birden fazla koşul...
select name1,surname1 from products where price > 100 and categoryid = 1; -- iki şartta sağlanmalıdır... 
select name1,surname1 from products where price > 100 or categoryid = 1; -- ikisinden birisi tutsa yeter.

-- Select Top ifadesi     üstten belirli sayıda satır getirir...

select top (50) proid,proname from  products;  -- top (sayi) ekleriz selectten sonra en üstteki sayi kadar satırı getirir.
select top (50) proid,proname from  products where price <> 100;

-- order by ile sıralama...

select * from products order by stock asc ; -- default olarak asc zaten küçükten büyüğe sıralar. asc yazmsadakta olurdu...
select proid,proname from products order by stock desc; -- büyükten küçüğe sıralama yapabiliriz.

-- like ile arama filtrelem yapma.
select proid,proname from products where productname like 'a%';  -- a ile başlayanlar demek...
select * from products where productname like 'abs%'; -- abs ile başlayan isimleri getir...
select * from products where productname like '%abs'; -- abs ile bitenleri getir demektir...
select * from products where productname like '%ab'; -- ab ile bitenleri getir demektir... 
select proid,proname from products where productname like '%abs%' -- içinde abs geçenleri getir demektir
select proid,proname from products where contanctname like '_r%'; -- ikinci karakteri r ile başlayanları getirir.
select * from products where productname like '%r_'; -- sondan ikinci karakteri r olanlar ı getir demektir.
select * from products where productname like 'a__%' -- adı a ile başlayan ve en az 3 karakter olan kayıtları getir demektir.
select * from products where productname like '%___a'; -- adı a ile biten ve en az 4 karakter olan kayıtları getir demektir.
select * from products where productname like 'a%b' -- a ile başlayan ve b ile biten kayıtları getirir...
select * from products where productname like 'ab%cd' -- ab ile başlyan ve cd ile biten kaytılatrı getirir.
select * from products where productname not   like '%a' --  a ile bitmeyen kayıtları getirir not like dedik cunku....
select * from products where productname not   like 'em%' -- em ile baslamayanları getirir...

-- SQL IN,NOT IN OPERATORU...
select * from products where country in ('UK','germany','brazil') -- () içerisinde birden fazla seçeneğimiz varsa or or yerine bunu kullanırız
select * from products where country not in ('UK','germany','brazil') -- () içine girilenler harici satırları getirir...birden fazla seçenek için kullanılır...




using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

// alttaki ikisi lazım data ile işlem yapabilmek için...
using System.Data; // veritabanı ile işlemler yapabilmek için...
using System.Data.SqlClient; // veritabanına bağlanabilmek için kullanılır

namespace ado.net
{


    class ProductDAL
    {
        SqlConnection _connection =  new SqlConnection(@"server=EMREAYTAS\SQLEXPRESS; initial catalog = UrunYonetimi; Integrated security = True"); // sql bağlanyısını sağlamak için kullanılır. bir connection string gireriz...
        // initial catalog = veritabanı ismi... ilişkili veritabanı demektir.
        // Integrated security = True ... kendi pcmizde bağlanacağımız için bana veritabanına baplanabilmek için kullanıcı adı ve parola sorma dedik... ama eğer web uygulaması yapacaksak herkes erişemesin diye farklı olacak...
        

        
       void connectionKontrol()
        {

            if (_connection.State == ConnectionState.Closed) // eğer bağlantı kapalı ise açacak açıksa ellemeyecek...  
            {
                _connection.Open(); // eğer kapalı(ConnectionState.Closed) ise açacak bağlantı sağlayacak...

            }

        }

       public void addProduct(Product product) // Product nesnesi gelecek demektir...
        {
            connectionKontrol(); // bağlantının kesin açılması için kullanırız...
            SqlCommand command = new SqlCommand("insert into Products values(@UrunAdi,@UrunFiyati,@StokMiktari)",_connection); // sql komutu göndericez demektir...    bağlantı ve komut gönderdik...
            // sql injection olmaması için parametre ile ekleme yaparsak sql açığına karşı önlem alırız...
            // @ işaretleri sutun karşılığıdır...
            command.Parameters.AddWithValue("@UrunAdi",product.urunadi); // değerler ile ekleme yap deriz...  
            command.Parameters.AddWithValue("@UrunFiyati", product.urunfiyati);
            command.Parameters.AddWithValue("@StokMiktari", product.stokmiktari); // biz aslında "@StokMiktari" product.stokmiktarı olsun dedik... 

            // komutlar hazır bunları çalıştırmak lazım...
            command.ExecuteNonQuery(); // veritabanına veriler işlemek için kullanılır...
            _connection.Close(); // bağlantıyı kapatır bunun nedeni şudur belleği yormasın sistem açığı oluşturmasın...


        }

        
        public List<Product> GetAll()
        {
            List<Product> products = new List<Product>();
            connectionKontrol(); // bağlantının kesin açılması için kullanırız...
            SqlCommand command = new SqlCommand("select * from products", _connection); // sql komutu göndericez demektir...    bağlantı ve komut gönderdik...
            // sql büyük küçük harfe duyarlı değil o yüzden sorun yok... büyük küçük yazabilirsiniz...
            SqlDataReader reader = command.ExecuteReader(); // okuma işlemi yapacağız gönderdiğimiz sorgu ile.
            while (reader.Read()) // null olana kadar dönecek tüm satırları gezecek... imleç mantığı ile çalışır...
            {

                products.Add(new Product(Convert.ToInt32(reader["id"]), reader["UrunAdi"].ToString(), Convert.ToDecimal(reader["UrunFiyati"]), Convert.ToInt32(reader["StokMiktari"]) )); // reader bir json string mantığı ile çalışır... verileri kendi üzerine çeker her seferinde...

                
            }

            reader.Close(); // readeri kapattık bellekte yer kaplamasın diye...
            _connection.Close (); // bağlantıyı kestik...


            return products; // referans return eder...


        }

        public DataTable GetTable() // bir collection değil tablo return edecek sistem...
        {

            connectionKontrol(); // bağlantının kesin açılması için kullanırız...
            SqlCommand command = new SqlCommand("select * from products", _connection); // sql komutu göndericez demektir...    bağlantı ve komut gönderdik...
            // sql büyük küçük harfe duyarlı değil o yüzden sorun yok... büyük küçük yazabilirsiniz...
            SqlDataReader reader = command.ExecuteReader(); // okuma işlemi yapacağız gönderdiğimiz sorgu ile.
            DataTable table = new DataTable(); // tıpkı bir tablo oluşturmak gibi... excel gibi düşünebiliriz satırlar sutunlar ve elimizdeki veriler ile dolduracağız... bir excel dosyası gibi... 


            table.Load(reader); // reader'ı alır yani içinde verilerin saklı olduğu o cursor'u ve ona göre doldurur...

            reader.Close();
            _connection.Close();

            return table;

        }


        public void Update(Product product) // Product nesnesi gelecek demektir...
        {

            connectionKontrol(); // bağlantının kesin açılması için kullanırız...
            SqlCommand command = new SqlCommand("update products set UrunAdi = @UrunAdi, UrunFiyati = @UrunFiyati,StokMiktari = @StokMiktari where id = @id", _connection); // sql komutu göndericez demektir...    bağlantı ve komut gönderdik...
            // sql injection olmaması için parametre ile ekleme yaparsak sql açığına karşı önlem alırız...
            // @ işaretleri sutun karşılığıdır...
            command.Parameters.AddWithValue("@UrunAdi", product.urunadi); // değerler ile ekleme yap deriz...  
            command.Parameters.AddWithValue("@UrunFiyati", product.urunfiyati);
            command.Parameters.AddWithValue("@StokMiktari", product.stokmiktari); // biz aslında "@StokMiktari" product.stokmiktarı olsun dedik... 
            command.Parameters.AddWithValue("@id", product.id);

            // komutlar hazır bunları çalıştırmak lazım...
            command.ExecuteNonQuery(); // veritabanına veriler işlemek için kullanılır...
            _connection.Close(); // bağlantıyı kapatır bunun nedeni şudur belleği yormasın sistem açığı oluşturmasın...


        }


        public void Delete(int id) // Product nesnesi gelecek demektir...
        {

            connectionKontrol(); // bağlantının kesin açılması için kullanırız...
            SqlCommand command = new SqlCommand("delete from products where id = @id", _connection); // sql komutu göndericez demektir...    bağlantı ve komut gönderdik...

            command.Parameters.AddWithValue("@id", id);

            // komutlar hazır bunları çalıştırmak lazım...
            command.ExecuteNonQuery(); // veritabanına veriler işlemek için kullanılır...
            _connection.Close(); // bağlantıyı kapatır bunun nedeni şudur belleği yormasın sistem açığı oluşturmasın...


        }



    }


}



using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace ado.net
{

    // dgvUrunListesi.DataSource = productDAL.GetTable(); // yeni veri gelince sıfırdan tüm ürünleri getirir böylece güncel görebiliriz verileri...    içi verilerle dolu tabloyu verdik ve o bizde bunu ekrana bastırdı...


    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }
        ProductDAL productDAL = new ProductDAL();

        private void Form1_Load(object sender, EventArgs e) //form yüklenirken çalışır veri tabanından verileri çekip yazdıracağız...
        {
            
            dgvUrunListesi.DataSource = productDAL.GetAll(); // verileri sana bir liste içeriside vereceğim sen bunları yazdır dedik... Product nesnesi hepsi ama o verileri alabilir sorun yok.


        }

        private void label1_Click(object sender, EventArgs e)
        {

        }

        private void label1_Click_1(object sender, EventArgs e)
        {

        }

        private void label3_Click(object sender, EventArgs e)
        {

        }

        private void textBox3_TextChanged(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e) // butona tıklanınca çalışır ama events kısmındaki yapıları kullanarak değişik değişik işlemler yapabiliriz...
        {
            productDAL.addProduct(new Product(1,textBox1.Text.Trim(),Convert.ToDecimal(textBox2.Text),Convert.ToInt32(textBox3.Text))) ;
            dgvUrunListesi.DataSource = productDAL.GetAll(); // yeni veri gelince sıfırdan tüm ürünleri getirir böylece güncel görebiliriz verileri...

            MessageBox.Show("ÜRÜN EKLENDİ","SQL");



        }

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {

        }

        private void btnGuncelle_Click(object sender, EventArgs e)
        {
            int deger = Convert.ToInt32(dgvUrunListesi.CurrentRow.Cells[0].Value.ToString());
            productDAL.Update(new Product(deger, textBox1.Text.Trim(), Convert.ToDecimal(textBox2.Text), Convert.ToInt32(textBox3.Text)));
            dgvUrunListesi.DataSource = productDAL.GetTable(); // yeni veri gelince sıfırdan tüm ürünleri getirir böylece güncel görebiliriz verileri...    içi verilerle dolu tabloyu verdik ve o bizde bunu ekrana bastırdı...
             
            MessageBox.Show("ÜRÜN GUNCELLENDİ", "SQL");






        }


        private void dgvUrunListesi_CellClick(object sender, DataGridViewCellEventArgs e) // cellClick eventi...
        {
            lblid.Text = dgvUrunListesi.CurrentRow.Cells[0].Value.ToString();
            textBox1.Text = dgvUrunListesi.CurrentRow.Cells[1].Value.ToString(); // Cells bir dizi dönderir sırası ile kolonlar...
            textBox2.Text = dgvUrunListesi.CurrentRow.Cells[2].Value.ToString(); // Value ile o dizideki istenen indexteki değeri alırız...
            textBox3.Text = dgvUrunListesi.CurrentRow.Cells[3].Value.ToString();






        }

        private void btnSil_Click(object sender, EventArgs e)
        {
            
            int deger = Convert.ToInt32(dgvUrunListesi.CurrentRow.Cells[0].Value.ToString());
            if (deger > 0)
            {

                if (MessageBox.Show("SİLMEK İSTEDİĞİNİZE EMİN MİSİNİZ?","SİLME UYARISI",MessageBoxButtons.OKCancel,MessageBoxIcon.Warning) == DialogResult.OK)  // MessageBoxButtons.OKCancel  ile ok ve  cancel butonları çıkarırız...
                {
                    
                    productDAL.Delete(deger);
                    dgvUrunListesi.DataSource = productDAL.GetAll();
                    MessageBox.Show("ÜRÜN SİLİNDİ", "SQL");


                }



            }



        }
    }
}



Entity framework kullanacaksak eğer sonradan nuggetten indiririz web masaüstü vs vs entity kullanılan uygulamalar için     mobilde entity kullanılmaz mesela... 
Manage nuget Packages'ten indiririz...

Entity Framework 6 (EF6) is a tried and tested object-relational mapper for .NET with many years of feature development and stabilization.

her projede ihtiyaçlara göre indiririz bunları...



Çözüm Gezgini'nde Başlangıç Projesini Kontrol Edin: Visual Studio'da, çözümünüzde birden fazla proje varsa, çözüm gezgini panelinde varsayılan olarak çalışacak olan başlangıç projesini belirleyebilirsiniz. Başlangıç projesini değiştirmek için, sağ tıklayarak projeyi seçin ve "Set as Startup Project" (Başlangıç Projesi Olarak Ayarla) seçeneğini kullanın.
Proje Yapılandırma Ayarlarını Kontrol Edin: Projelerinizi açtıktan sonra, menü çubuğundaki "Proje" menüsünden "Proje Yapılandırması" (Project Configuration) seçeneğine gidin. Burada, hangi projenin varsayılan olarak başlangıç projesi olarak ayarlandığını kontrol edebilirsiniz.
Visual Studio Ayarlarını Sıfırlayın: Eğer yukarıdaki adımlar herhangi bir sonuç vermezse, Visual Studio ayarlarını sıfırlamak sorunu çözebilir. Bunun için, "Tools" (Araçlar) menüsünden "Import and Export Settings" (Ayarları İçe ve Dışa Aktar) seçeneğini seçerek, "Reset all settings" (Tüm Ayarları Sıfırla) seçeneğini kullanabilirsiniz.


Entity framework aslında elde olan tablolara göre classlar oluşturur ve o nesneler üzerinden işlemler yaparız... önce model sonra entity sayesinde controller sistemini kurarız...



diziler statictir bellekte oluşur ve bellekte kapladığı alan sabittir. arraylistler vs gibi yapılar ise dinamiktir.. bellekteki kapladığı alan değişse bile değerleri kaybolmaz... arrayde ise new'lersek veriler kaybolur...

........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................

 enable-migrations   nuget manager'de package manager console'ye yazdık... ve default project seçtik yoksa sıkıntı olur...
update-database     // böylece 
            AutomaticMigrationsEnabled = true; yaparız false olursa update-database'ı kullanamayız...
update-database yazarız eğer verdiğimz isimde db yoksa oluşturur...

.........................................................................
mvc =  model view controller...

........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................



........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................



........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................














........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................



........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................


MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...
MVC...

HTTP genel bakış. internette bir kaynağa erişmek istersek bir web adresi gireriz buna dns deriz. bir domain name kullanırız sonra onu ana yer belirleyerek sayfa ve sayfanın sayfası gibi bir yapı kurabiliriz.
endpoint gelen isteği ifade eder. request yani istek endpoint ile son bulur. özel bir kaynağı sunucudan isteriz.
sunucu request'e karşılık bir response üretir bu olay http protoklü üzerinde gerçekleşir.
istemci sunucuya http protoklü ile request atar crud işlemlerinden birisi olabilir bu istek vs. http protoklü ile bir response gelir sunucudan.

    request'in yapısı post'un verb bölümü header bölümü requestle ilgili meta bilgiler vardır. ve veriyi tutan body kısmı vardır.
    response'u ifade eden meta bilgiler headerde yer alır. ve body kısmı vardır.
    her zaman gövde olmak zorunda değil.


stateless olma durumu = bir request geldi ve response üretti sunucu mesela. sunucu normalde istemci ile alakalı durumları tutmaz normalde. buda http'nin durumsuz olma özelliğine karşılığa denk gelir. daha önce bir request gelip gelmediğini tutmaz normal şartlarda sunucu hafızada.
......................................................................

1. Stateless (Durumsuz)
Tanım: Her isteğin birbirinden bağımsız olduğu sistemlerdir. Sunucu, istemciden gelen önceki istekleri hatırlamaz.
Özellikler:
İstemcinin her istekte gerekli tüm bilgileri göndermesi gerekir.
Sunucu, istemci hakkında herhangi bir oturum bilgisi tutmaz.
Daha ölçeklenebilir ve performanslıdır.

Avantajları:
Yük dengeleme kolaydır.
Daha az sunucu kaynağı tüketir.
Cache kullanımı daha kolaydır.

Dezavantajları:
Her istekte tüm verilerin iletilmesi gerekir.
Kullanıcı durumu sunucuda tutulmadığı için bazı işlemler daha karmaşık olabilir.
Örnekler:
REST API (HTTP üzerinden yapılan istekler her zaman stateless olmalıdır.)
DNS (Her sorgu bağımsızdır.)
Microservices (Bağımsız çalışan servisler genellikle stateless olur.)


2. Stateful (Durumlu)
Tanım: İstemci ile yapılan her isteğin bir önceki durumla bağlantılı olduğu sistemlerdir. Sunucu, istemcinin önceki isteklerini hatırlar.
Özellikler:
Sunucu, oturum veya durum bilgilerini saklar.
Genellikle bir oturum (session) veya bağlantı yönetimi kullanır.
Kullanıcının bağlandığı belirli bir sunucuya yönlendirilmesi gerekebilir (session affinity).

Avantajları:
Kullanıcıya özel bilgiler saklanabilir (örneğin alışveriş sepeti, kullanıcı oturumu).
Daha az veri transferi yapıldığından bazı senaryolarda daha verimli olabilir.

Dezavantajları:
Sunucu belleğinde daha fazla kaynak tüketir.
Yük dengeleme daha zor olabilir.
Sunucu çökmesi durumunda oturum kaybolabilir.
Örnekler:
SOAP Web Servisleri (Çoğu durumda oturum bilgisi saklanabilir.)
Databases (SQL Transactions) (Bağlantı sürecinde durum saklanır.)
Online Bankacılık Uygulamaları (Oturum yönetimi gerekir.)
FTP, SSH gibi bağlantılar (Bağlantı süresince durum korunur.)

..............................................................................
REQUEST YAPISI:.....

http'nin verb kısmı
    get bilgi alma httpget. sunucudan istemciye bilgi çekme.
    istemcideki bir bilgiyi sunucuya atmak için httppost. 


headerlar özellikle api'da önemli olacak ama mvc'de çok önemli değil.  
    istek hakkında üst (meta) bilgiler:
    • Content Type
    • İçeriğin formatı
    • Content Length
    • İçeriğin boyutu
    • Authorization
    • İsteği yapanın kimliği


content kısmı http'nin
    İstek ile ilgili içerik:
    • HMTL, CSS, JavaScript, XML, JSON
    • Bazı eylemler ile geçerli olmayan içerik
    • Binary ve blobs common(.jpeg) gibi.

RESPONSE YAPISI...

status code: 
    Operasyon Durumları
    • 109-199
    • Bilgi (Information)
    • 200- 299
    • Başarı (Success)
    • 300- 399
    • Yeniden yönlendirme (Redirection)
    • 400 - 499
    • İstemci hataları (Client errors)
    • 500-599
    • Sunucu hataları (Server errors)

        headers: 
            istek hakkında üst (meta) bilgiler:
            • Content Type
            • İçeriğin formatı
            • Content Length
            • İçeriğin boyutu
            • Expires
            • Ne zaman geçersiz sayılır.


content: 
    içerik:
    • HTML, CSS, JavaScript, XML, JSON
    • Binary ve blobs common (.jpg)
    • API'Iarın kendi türleri



URL, URI ve Endpoint Kavramları
ASP.NET MVC veya Web API projelerinde URL, URI ve Endpoint kavramları sıkça kullanılır. Bunların farklarını ve nasıl çalıştığını tam anlamıyla açıklayayım.

1️⃣ URL (Uniform Resource Locator) – Adres Tanımlayıcı
URL, belirli bir kaynağın (örneğin bir web sayfası veya API) internet üzerindeki tam adresidir.
Örnek bir URL:
arduino
Kopyala
Düzenle
https://www.example.com/products/laptops?brand=dell
https:// → Protokol (HTTP veya HTTPS gibi)
www.example.com → Alan adı (Domain)
/products/laptops → Kaynak Yolu (Path)
?brand=dell → Sorgu Parametreleri (Query Parameters)
2️⃣ URI (Uniform Resource Identifier) – Kaynak Tanımlayıcı
URI, bir kaynağı tanımlayan genel bir yapıdır.
Her URL bir URI'dir ama her URI bir URL olmayabilir.
Örnekler:
Tam URL (URI içeren bir URL):
arduino
Kopyala
Düzenle
https://www.example.com/products/laptops?brand=dell
Sadece URI (Kaynağı tanımlayan ama internet adresi olmayan bir yapı):
bash
Kopyala
Düzenle
/products/laptops
URN (Uniform Resource Name, yalnızca ad olarak kullanılan URI örneği):
css
Kopyala
Düzenle
urn:isbn:0451450523
Bir API için URI (HTTP protokolü olmadan):
bash
Kopyala
Düzenle
/api/products/5
3️⃣ Endpoint – API Uç Noktaları
Endpoint, bir API’nin belirli bir işlevselliği sağlayan belirli bir noktasıdır.
Endpoint bir URL'dir, ancak belirli bir işlem veya veri döndürmek için tasarlanmıştır.
Örnek API Endpoint’leri:
GET Tüm Ürünler:
arduino
Kopyala
Düzenle
https://api.example.com/products
GET Belirli Bir Ürünü Getir:
arduino
Kopyala
Düzenle
https://api.example.com/products/5
POST Yeni Ürün Ekle:
arduino
Kopyala
Düzenle
https://api.example.com/products
Body:
json
Kopyala
Düzenle
{
  "name": "Laptop",
  "brand": "Dell",
  "price": 1200
}
🔹 ASP.NET Core MVC ile Örnek
Aşağıda bir MVC Controller ve Routing (Yönlendirme) yapısının nasıl çalıştığını gösteren örnek var.

📌 Controller:

csharp
Kopyala
Düzenle
using Microsoft.AspNetCore.Mvc;

[Route("api/products")]
[ApiController]
public class ProductsController : ControllerBase
{
    // GET api/products
    [HttpGet]
    public IActionResult GetAllProducts()
    {
        return Ok(new { Message = "Tüm ürünler getirildi." });
    }

    // GET api/products/5
    [HttpGet("{id}")]
    public IActionResult GetProductById(int id)
    {
        return Ok(new { Message = $"Ürün {id} getirildi." });
    }

    // POST api/products
    [HttpPost]
    public IActionResult AddProduct([FromBody] Product product)
    {
        return Created("", new { Message = "Ürün başarıyla eklendi.", Product = product });
    }
}
🔹 MVC Route Mantığı
Bu controller’da 3 farklı endpoint var:

HTTP Metodu	Endpoint (URL)	Açıklama
GET	/api/products	Tüm ürünleri getirir
GET	/api/products/5	ID'si 5 olan ürünü getirir
POST	/api/products	Yeni ürün ekler
🔹 API Testi için Postman veya tarayıcıdan deneyebilirsin:

https://localhost:5001/api/products
https://localhost:5001/api/products/5
🔹 ASP.NET MVC Route Yapısı
Eğer klasik MVC Controller ve View kullanıyorsan, Startup.cs veya Program.cs içinde default route şu şekilde belirlenir:

csharp
Kopyala
Düzenle
app.UseEndpoints(endpoints =>
{
    endpoints.MapControllerRoute(
        name: "default",
        pattern: "{controller=Home}/{action=Index}/{id?}");
});
Bu route şu şekilde çalışır:

URL	Hedef Controller & Action
/	HomeController.Index()
/products	ProductsController.Index()
/products/details/5	ProductsController.Details(5)
📌 Eğer bir View (Razor) kullanıyorsan Controller’ın içi şu şekilde olabilir:

csharp
Kopyala
Düzenle
public class ProductsController : Controller
{
    public IActionResult Index()
    {
        return View(); // /Views/Products/Index.cshtml açılır
    }

    public IActionResult Details(int id)
    {
        ViewBag.ProductId = id;
        return View(); // /Views/Products/Details.cshtml açılır
    }
}
🔹 Özet
Kavram	Açıklama
URL	Bir kaynağın tam internet adresi (https://api.example.com/products/5)
URI	Bir kaynağın tanımlayıcısı (URL içerebilir ama içermezse de olabilir)
Endpoint	API'nin erişim noktasıdır (https://api.example.com/products)
Bu bilgilerle artık ASP.NET MVC & Web API projelerinde URL, URI ve Endpoint kavramlarını rahatlıkla kullanabilirsin. 🚀








.....................................................................................................
pipeline = iş hattı. bir istek geldi mesela sunucu bunu hata yönetim mekanizmasından geçirebilir, static dosya  kullanır veya kullanmayacak belirleyebilir. bir request endpoint'e ulaştığında ilgili request'e karşılık cevap yani response üretilir.
iş hattının nasıl konfigüre edileceği kritik bir konudur.
requestlerin ve responselerin nasıl üretileceğine geliştirici karar verir .net mimarisi ile.
..........................................................................................................
kestrel default olarak gelir sunucu olarak. iss'de kullanabiliriz aspde.
mvcde razor pagesler kullanacağız.
SingalR ve gRPC servislerdir.  daha az maliyetli web socket programları yapabiliriz. canlı sohbet gibi sürekli işlem gerektiren bir iş için kullanabiliriz. 

ASP.NET Core'da middleware (ara katman yazılımı), HTTP isteklerinin işlenmesinde önemli bir rol oynar. Middleware bileşenleri, gelen istekleri incelemek, üzerinde değişiklik yapmak ve nihayetinde bir yanıt üretmek için kullanılır. ASP.NET Core uygulamalarında, middleware'ler genellikle bir pipeline (boru hattı) şeklinde sıralanır, bu sayede her bir middleware bir sonraki middleware'e isteği iletebilir ya da yanıt üretebilir.

Middleware'in Çalışma Prensibi
İstek alındığında: Gelen HTTP isteği, pipeline'daki ilk middleware'den başlayarak son middleware'e kadar sıralı olarak geçer.
Yanıt dönerken: Yanıt üretildikten sonra middleware'ler sıralı olarak tersten geçilir ve nihayetinde yanıt istemciye gönderilir.
Basit Bir Middleware Yazma
Kendi middleware'inizi yazmak için genellikle bir sınıf oluşturursunuz ve bu sınıf Invoke ya da InvokeAsync metoduna sahip olur.

Örnek olarak, gelen isteğin URI'sini log'layan basit bir middleware yazalım:

public class RequestLoggingMiddleware
{
    private readonly RequestDelegate _next;

    public RequestLoggingMiddleware(RequestDelegate next)
    {
        _next = next;
    }

    public async Task InvokeAsync(HttpContext context)
    {
        // İstek bilgilerini logla
        Console.WriteLine($"Request URL: {context.Request.Path}");
        
        // Sıradaki middleware'e devam et
        await _next(context);
    }
}
Middleware'i Pipeline'a Ekleme
Middleware'i kullanmak için Startup.cs dosyasındaki Configure metoduna eklemelisiniz:


public void Configure(IApplicationBuilder app, IHostingEnvironment env)
{
    // Diğer middleware'lerden önce yerleştirilebilir
    app.UseMiddleware<RequestLoggingMiddleware>();

    app.UseRouting();
    app.UseEndpoints(endpoints =>
    {
        endpoints.MapControllers();
    });
}
Hazır Middleware'ler
ASP.NET Core, yaygın işlemler için birçok hazır middleware ile birlikte gelir. Bunlardan bazıları:


UseRouting: Uygulamanın rota bilgilerini işler.
UseAuthentication: Kimlik doğrulama middleware'ini ekler.
UseAuthorization: Kimlik doğrulama ve yetkilendirme kontrollerini yapar.
UseStaticFiles: Statik dosya sunumunu sağlar.
Bu middleware'leri sırayla ekleyerek HTTP isteklerinin nasıl işlendiğini kontrol edebilirsiniz.

Middleware yapısı, esnek ve genişletilebilir bir yapı sunduğu için ASP.NET Core projelerinde önemli bir yer tutar.

komut seti: 
bir klasör(istersek git dosyalarıda ekleyebiliriz.) oluşturdum belgelerde sonra içine sağ tık terminalde aç dedik. sonra ise dotnet yazıp enter dedik.
dotnet --version diyerek terminalde biz dotnet sürümünü görebiliriz.
dotnet --list-sdks diyerek ilgili sdkleri görebiliriz.
dotnet --list-runtimes ile hangi runtime versiyonları var görebiliriz.

proje oluşturma.
dotnet new --help ile bilgileri alabiliriz.
dotnet new list diyerek tüm proje şablonlarını görebiliriz

........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
çalışma ortmanının düzenlenmesi...
vs code üzerinde çalışıcaz bu yapıda.

seçtiğimiz klasorde terminalde aç diyeceğiz.
sonra ise code --version ile versiyonu görebiliriz.

code . diyerek ise ilgili klasörde kodu açacaktır.
sol altta çarkta profiller ile profil belirleyebiliriz.
extentionsolara @installed yazarak neler kurulu bunu görebiliriz.

vs code üzerinde bir terminal açabiliriz veya zaten var olan terminalden de yapabiliriz amaç o klasörün path'inde olmalıyız orası önemli.
dotnet new --list dedik ve proje şablonlarını görebildik.
dotnet new mvc -h   ile neler yapabiliriz görürüz. 
dotnet new mvc -f net6.0 -o Basics  (-f net6.0 bu kısım olmasa da olurdu framework seçimi yaptık sadece) (-o Basics olmassa da olurdu nerede konumlanacak proje bunu belirledik.)

dotnet new mvc -f net6.0 'de yapabiliriz... o zaman default adı alır proje.
.........
dotnet new sln -o Store .. bir solution oluşturduk ve Store adında bir dosyaya çıakrdık. 

dotnet new web -f net6.0 -o .\Store\StoreApp  .. boş bir web şablonu oluşturduk .\Store\StoreApp diyerek ise Store klasöründe StoreApp diye bir uygulama oluşturduk.

dotnet sln .\Store\ add .\Store\StoreApp\   .. önce solutionun olduğu yolu gösterdik sonra o solutiona eklemek istediğimiz projenin yolunu verdik. Solutionlar projeleri barındıran bir kaptır proje ekleyip çıkarabiliriz...

dotnet sln .\Store.sln list   .. bununla yolunu gösterdiğimiz sln içeriisnde hangi projeler var görebiliriz.
...........

dotnet add package Microsoft.EntityFrameworkCore.Sqlite --version 6.0.0  ..  bunu kullanarak ekleyebiliriz.
.net cli ile komut vererek istediğimiz paketi projemize dahil edebiliriz.

dotnet list package .. ile projeye dahil olan paketleri görebiliriz...
dotnet add package Microsoft.EntityFrameworkCore --version 6.0.0  .. ile entity Framework kurabiliriz.

dotnet add package Microsoft.EntityFrameworkCore.Design --version 6.0.0  .. bununda kurulumunu  yapalım.

............
projeyi çalıştırmak için.  cd Basics diyeceğiz.ve o path'e yerleşeceğiz.
projeyi çalıştırmak için dotnet build diyerek projeyi derleriz. Basics.dll dosyası gelir elimize. projeyi güncelleyerebilir dlleleri ekleyebilir.zaman

dotnet run diyerek ise projemizi çalıştırabiliriz.

dotnet watch diyerek projemizi ayağa kaldırabilir ve yaptığımız değişikleri direkt olarak çalışan projeye yansıtır bu komut.

mvc tasarım modeli demek. model view controllerdir.
model ifadesi problemizi tanımlar mesela Product nesnemiz varsa burada olur. Model controller ve viewDen bağımsız ama controller ve view model'e bağlı çalışır. görünüm ile ilgili işleri viewde hallederiz çözümleri contrellerde vsss.
mvc bir mimari desendir.

// bunun anlamı bu metot çalışırsa bir görünüm dönecek demektir.
    controller class'ları :Controller ile Controllerden miras alır.

    public IActionResult Index()
        {
            return View();
        }

Mesela Product nesnesi varsa Models'te o zaman ProductController olmalı ismi controllerin.
Controllerlerin Viewleri olur onlarında views altında klasörü olur mesela ProductController'ın Product klasörü olur viewde ve cshtml sayfaları olur o Controllerin.

Endpoint yapısı:
// Program.cs içerisindeki kod parçacısı
// Burada default controller Home Controller. default metot Index Metotu ve burada id? ile id gelebilirde gelmeyebilirde diye bir yapı belirlemişiz.
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

3 tane segment var default olarak  controller/action/id olarak. id? ile id'yi opsiyonel yaparız.

............................
    https://www.btkakademi.com.tr/portal/course/algoritmaveprogramlama
(protokol)          (domain name).                  (path = /portal/course/algoritmaveprogramlama)
bunun tamamı ise url/endpoint/URI ne dersen.
............................
controller view döner tarayıcıya html css js döndürür.

controllerdeki IActionResult'lara view ekleyerek sayfa üretebiliriz.


HTML rendering:


using Microsoft.AspNetCore.Mvc; // bunu çağırmamız lazım Controllerden kalıtım alabilmek için.

namespace Basics.Controllers // Basics klasörünün Controllers klasörü.
{
    public class EmployeeController : Controller // Controllerden miras alması lazım.
    {

    public string Index(){ // bir View değil bir string döner bize.
        return "HELLO WORLD";
    }
    

    }

}
....Views altında Employee klasörü oluşturduk içine ise Index.cshtml ekledik.

asp önce sayfayı arar views altında yoksa shared içerisinde arar.


public ViewResult Index2(){ // bir ViewResult sonucu dönecek bu yapı bize.
    return View("Index"); // Bununla hangi Sayfaya gitmesi gerektiğini belirttik.  eğer boş bırakırsak Index2 sayfasını arar önce(kendi isminde arar.) Employee klasöründe yoksa shared içerisinde arama yapar.
}

..

public IActionResult Index3(){ // genel olarak IActionResult kullanırız en kapsayıcı metot budur view ViewResult vs hepsini dönebilir content'te dönebilir.
    return Content("Empoloyee");
}


@model direktifi:   sayfa görümü ile alakalı bir yapıdır.

public IActionResult Index1(){ // bir ViewResult sonucu dönecek bu yapı bize.
    string message = $"Hello world {DateTime.Now.ToString()}";
    return View("Index1",message);
    // Index1'i sayfa olarak kabul edecek. diğer parametre ise göndermek istediğimizdir. tek message dersek message sayfası arar olmaz o yüzden.
}

@*bu sayfa bir string ile çalışacak demektir.*@
@model string 

@*@Model aslında bizim sayafaya gönderdiğimiz yapıdır.*@
<div class="lead">
    @Model
</div>

@*bir String[] gelecek dedik modeli.*@
.............

@model String[]
<div class="display-6">

<h3>
    Index2
    </h3>
<div class="lead">
    @Model 
</div>

</div>

...Bu sayfanın Controlleri.
        public ViewResult Index2(){ // bir ViewResult sonucu dönecek bu yapı bize.
            

            var names = new string[]
            {

                "Emre", "Bmw", "Ford"

            };

            return View("Index2",names); // hem hangi sayfanın açılacağını hemde hangi verileri alacağını belirleyebiliriz burada. 

        }



....verileri controllerden view'e gönderebiliriz.
cshtml içeriisnde hem html bende c# kodları olur razor engine bunu html koduna çevirir komple.

.....Employee modeli oluşturduk.

namespace Basics.Models
{

public class Employee{

public int Id { get; set; }
public string FirstName { get; set; }
public string LastName { get; set; }
public string FullName => $"{FirstName} {LastName.ToUpper()}";

public int age{get;set;}


}


}
........EmployeeController'da IActionResult oluşturduk.


public IActionResult Index3(){
    var list = new List<Employee>{
      new Employee(){Id = 1,FirstName = "Ahmet",LastName = "Can",Age = 20},
            new Employee(){Id = 2,FirstName = "Can",LastName = "Dağ", Age = 25},
            new Employee(){Id = 3,FirstName = "Demir",LastName = "Güneş",Age = 37}
    };

    return View("Index3",list);
}
...... şimdi Viewde sıra. Views klasorundeli Employee klasöründe Index3.cshtml sayfası oluşturduk ve gelen verileri controllerden gelen verileri @model List<Employee> ile karşıladık...

@model List<Employee>

<div class="display-3">
Index 3
</div>

@foreach (var emp in Model){
    <div class="lead">
   <h6>@emp.FullName</h6>
   <p>@emp.Id</p>
  <p><strong>Age:</strong>@emp.Age</p>
<hr/>
</div>
}





MVC GENEL BAKIŞ...





Yine klasorde sağ tık terminalde aç dedik ve
cd btkakademi diyerek klasörümüzün içine gireriz. sonra code . ile vs code'u açabiliriz proje ile.

dotnet new gitignore ile .gitignore dosyası oluşturabiliriz.

model hem view hemde controllerden bağımsız olarak oluşturulur.

Models klasöründe Candidate oluşturduk...

        namespace BtkAkademi.Models
        {

        public class Candidate{

        public String? Email{get;set;} = String.Empty; // Null değer olabilir ? demektir. String.Empty ile ise direkt olarak Empty olucak.

        public String? FirstName{get;set;} = String.Empty;

        public String? LastName{get;set;} = String.Empty;

        public String? FullName => $"{FirstName} {LastName?.ToUpper()}";  // LastName?.ToUpper()   Bunun anlamı LastName Null değilse Empty değilse büyüt yoksa atla demektir. 

        public int? Age{get;set;}

        public String? SelectedCourse{get;set;}

        public DateTime ApplyAt {get;set;}


        public Candidate()
        {

            ApplyAt = DateTime.Now;

        }

....Bir Controller oluşturursak eğer o zaman Views altında o Controllerın acitonlarının sayfaları için views altında o controllera ait bir klasör oluştururuz ve ona sayfaları ekleriz.


    <p>
        <a class="btn btn-primary"  href="/course">APPLY</a>
    </p>
    @*bu etiket ile biz Course üzerine yönlendiricez kullanıcıyı. href bizi bulunduğumuz yerden /course ekleyerek oraya götürecek...*@ 


...........
bir alanı imlece alırsak seçili alan yaparsak ve shift + alt + yukarı ok tuşu ile aynısını kopyalayabiliriz.

...........................................................................................................................................................................................
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

builder.Services.AddControllers(); // program.cs'e bunu ekledik böylece api desteği sağlayabiliriz. 
api desteği sağlarken'de ilgili endpointelerin düzenlenmesi lazım.   
................. aşağıdaki yapı ile bunu sağlayabiliriz.  


app.UseEndpoints(endpoints =>
{
    endpoints.MapAreaControllerRoute(
        name: "Admin",
        areaName: "Admin",
        pattern: "Admin/{controller=Dashboard}/{action=Index}/{id?}"
    );

    endpoints.MapControllerRoute("default", "{controller=Home}/{action=Index}/{id?}");

    endpoints.MapRazorPages();

    endpoints.MapControllers();
});

bir api Controller yazarsak eğer bir sıkıntı yaşamdan .net projemizi hem mvc hemde api gibi kullanabilir şekilde kullanabiliriz. 

Program.cs yapılanması önemlidir ama.

bir classlib ekleyebiliriz solutina böylece bir sınıf kütüphanesi ekleyip onu api olarak kullandırabiliriz böyle bir durumda var. 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

elimiz alt tuşuna basılı şekilde iken birden fazla imleç çıkarabiliriz ve istediğimiz kadar aynı yazıdan istediğimiz yere üretebiliriz.
mesela imleç bir yerde yanıp sönüyor alt'a basılı tuttum yazmak istediğim yazının aynısını başka nereye yazmak istersem bunu belirtebilirim.


.......CourseController oluşturduk. sonra içierisine Index IActionResult'ı ekledik onunda sayfası olsun diye Views altına Course diye bir klasör oluşturduk onun içine ise Index.cshtml ekledik böylece o metotun bir sayfası oldu.     

    
    @model Candidate
    @*hangi yapı ile çalışacağız bunu belirledik.*@


    @*en baştaki yazı bir öenmi yok çok fazla.*@
    <div class="display-6">
    APPLY
    </div>


@*post ifadesi kullanırız veriler buraya gidecek. post ile bir veri gönderimi sağlayacağız yani. *@
@*action ile ise gideceği yeri belirledik.*@
<form method="post" action="/course/apply">
        

        @*isim soyisim email gibi verileri bu yapı ile aldık. ve gidecekleri Model Candidate ile belirlediğimiz Candidate nesnesinin hangi propuna gidecek bu veriler bunu belirledik.*@
        <div class="form-group  my-2">
        <label>Email</label>
        <input name = "Email" class="form-control" />
        </div>

        <div class="form-group my-2">
        <label>FirstName</label>
        <input name = "FirstName" class="form-control" />
        </div>
        @*Hangi veri hangi prop'a yerleşecek belirledik. @model Candidate ile belirledik aslında.*@    
        <div class="form-group my-2">
        <label>LastName</label>
        <input name = "LastName" class="form-control" />
        </div>
        
    <div class="form-group my-2">
        <label>Age</label>
        <select class = "form-control" name="Age">

            <option value="18">18</option>
            <option value="19">19</option>
            <option value="20">20</option>
            <option value="21">21</option>
            <option value="22">22</option>
            <option value="23">23</option>

        </select>
        </div>


    @*radio button*@
    <fieldset>
    <legend>Select one course</legend>
        <p> 
            <input id="mvc" type="radio" name="SelectedCourse" value="ASP.NET core MVC">
            <label>ASP.NET core MVC</label>
        </p>
            <p> 
            <input id="api" type="radio" name="SelectedCourse" value="ASP.NET core API">
            <label>ASP.NET core API</label>
        </p>
            <p> 
            <input id="blazor" type="radio" name="SelectedCourse" value="Blazor">
            <label>Blazor</label>
        </p>

    </fieldset>


        <div>
            <button class ="btn btn-primary" type="submit">Apply</button>
            <a class="btn btn-warning" href="/">HOME</a>
            @*anasayfaya götüren buton buda*@
            </div>
            @*Butona basınca kaydetme gibi işlemleri yapacak.*@

    </form>


Client sunucuya get isteği gönderirse server mesela sayfayı bize getirir. bizde doldurur post ile yollarız servera oda bu bilgileri database'ye yükler. bu işlemler http protoklü ile olur.
server post ile Client'ten gelen veriyi alır işler gerekli görürse database'ye yükler. ve isterse Client'ı bilgilendiren bir mesaj gönderebilir.

public IActionResult Apply(){


    return View();
    
} // bu get metotu çünkü default olarak [HttpGet] olarka belirler Controller.
// bu metot serverden client'e sayfayı getirecektir.



[HttpPost]
[ValidateAntiForgeryToken] // hangi tarayıcı ile iletişim kuruluyor doğrula demektir bu sistemi kötü niyetlilere karşı korur.
public IActionResult Apply([FromForm]Candidate model){ // model binding yani verilrti doldurma sayfa içerisinde @model Candidate dedik ve doldurulacak alanları form içerisinde belirledik böyle oldu. Candidate bir parametre gelen verinin nereden geldiğini belirtebiliriz. [FromForm] ile mesela başka bir şekilde de gelebilir ama biz Form'dan geldiği için Form olarak belirledik.

    return View();
    


}
// buda client'ten veri gönderir servera. Post ile göndeririz. ve bize bir nesne gelecek gelen sayfadan orada @model Candidate diye belirttik onu biz Candidate model parametresi ile yakalarız ve metot içerisine alırız.
// [HttpPost] ile giden veriyi biz bu metotta yakalayabiliriz.
// Candidate model ile gelen verileri istersek eğer alır ve database'ye kaydedebiliriz.


TAG HELPERS:
_ViewImports.cshtml dosyası razor pagelerde kullanılacak olan sınıfların, veri tiplerinin tanımlandığı yapıdır .

        <a class="btn btn-primary"  asp-controller="Course" asp-action="Apply">APPLY</a>
        @*hANGİ controllere ve hangi metotuna gidip onu çalıştıracağız bunu belirleyebiliriz.*@ 

action="/course/apply" yerine .. asp-action="apply" dedik. eğer sayfa get ile geliyorsa zaten o contrıoller ile gelir asp-controller belirtmemize gerek yok.

....tag helperlar kullanarak Course'nin apply sayfasını modifiye ettik.
        @model Candidate
        @*hangi yapı ile çalışacağız bunu belirledik.*@


        <div class="display-6">
        APPLY
        </div>


        <form method="post" asp-action="apply">

            <div class="form-group  my-2">
            <label asp-for="Email">E-Mail</label>
            <input asp-for="Email" class="form-control" />
            </div>

            <div class="form-group my-2">
            <label asp-for="FirstName"></label>
            <input asp-for="FirstName" class="form-control" />
            </div>
            @*Hangi veri hangi prop'a yerleşecek belirledik. @model Candidate ile belirledik aslında.*@    
            <div class="form-group my-2">
            <label asp-for="LastName"></label>
            <input asp-for = "LastName" class="form-control" />
            </div>
            
        <div class="form-group my-2">
            <label asp-for="Age"></label>
            <select class = "form-control" asp-for ="Age">

                <option value="18">18</option>
                <option value="19">19</option>
                <option value="20">20</option>
                <option value="21">21</option>
                <option value="22">22</option>
                <option value="23">23</option>

            </select>
            </div>


        @*radio button*@
        <fieldset>
        <legend>Select one course</legend>
            <p> 
                <input id="mvc" type="radio" asp-for ="SelectedCourse" value="ASP.NET core MVC">
                <label>ASP.NET core MVC</label>
            </p>
                <p> 
                <input id="api" type="radio"  asp-for ="SelectedCourse" value="ASP.NET core API">
                <label>ASP.NET core API</label>
            </p>
                <p> 
                <input id="blazor" type="radio"  asp-for ="SelectedCourse" value="Blazor">
                <label>Blazor</label>
            </p>

        </fieldset>



            <div>
                <button class ="btn btn-primary" type="submit">Apply</button>
                <a class="btn btn-warning" asp-action="Index" asp-controller="Home">HOME</a>
                @*anasayfaya götüren buton buda*@
                </div>
                @*Butona basınca kaydetme gibi işlemleri yapacak.*@

        </form>

.............
@{
    Layout = "_Layout";
}
@*bunun anlamı kullanılan ana şablonu belirtir. shared içerisinde tanımlanır*@

Repository tanımı.

    namespace Basics.Models
    {

    public static class Repository{ // static olan direkt olarak bellekte var olur program çalıştığı anda bellekte hazır olarak var olur.
        
        private static List<Candidate> applications = new List<Candidate>();  // Liste oluşturduk içerisinde Candidate nesneleri olacak.
        
        public static IEnumerable<Candidate> Applications => applications; // static ve bize listeyi dönen bir interface üzerinde dönme vs yapabiliriz böyle.
        // => ile ne dönecek belirledik...
        

        public static void Add(Candidate candidate){
            applications.Add(candidate);
        }
        // static class'ın metotları static olur... 


    }

    }

.................
[HttpPost]
[ValidateAntiForgeryToken] // hangi tarayıcı ile iletişim kuruluyor doğrula demektir bu sistemi kötü niyetlilere karşı korur.
public IActionResult Apply([FromForm]Candidate model){

 Repository.Add(model); // kullanıcı kaydetme işlemi yaptık. 


    return Redirect("/"); // köke yönlendirme yaptık home index kök olduğu için program.cs'te oaraya gidecek.
    
}


sayfa bir actiona bağlı olmayacak şimdi. bir view olacak ve model'e bağlı olacak.
views course klasorunde Feedback.cshtml oluşturduk.

@model Candidate

<div>

<h3 class="display-4">Congratulations @Model.FullName</h3>
<p class="lead">Your application has been  <mark>Accepted</mark> </p>
<p class="lead">Many thanks for your interest.</p>
<hr/>

<blockquote class="blockquote">
You have enrolled to @Model.SelectedCourse course.
</blockquote>

<p class="text-muted">You applied at @Model.ApplyAt</p>

<div class="btn-group">
    <a class="btn btn-outline-success" href="#" >APPLICATIONS</a>
    <a class="btn btn-success" asp-action="Index" asp-controller="Home" >HOME</a>

</div>

............Bu sayfayı oluşturduktan sonra ise CourseController'daki Apply(post olan clientten giden veriyi yakalayan metot.) metotunu değiştiririz. 

[HttpPost]
[ValidateAntiForgeryToken] // hangi tarayıcı ile iletişim kuruluyor doğrula demektir bu sistemi kötü niyetlilere karşı korur.
public IActionResult Apply([FromForm]Candidate model){

 Repository.Add(model); // kullanıcı kaydetme işlemi yaptık. 


    return View("Feedback",model); // Course view klasöründeki Feedback'e yollayacağız ve paramatre olarka ise model yollayacağiz Feedback.cshtml içeriisnde ise @model Candidate olarka gelen veriyi karşılayacağız...
    // "~/Views/Course/Feedback.cshtml"    buda olabilir çalışmazsa...    
}

// BİLGİLENDİRME SAYFALARI İÇİN HARİKA BİR YAPIDIR...
post yapılı metota parametreye gelen nesneyi View ile göndeririz bir view'e ve @model class ile karşılarız ve kullanırız.

Receiving data:

using static Basics.Models.Repository; // static metotu kullanabilmek için gereken using kullanımı.

public IActionResult Index(){
    

    var model = Repository.Applications;
    return View(model);
    
}
.........Şimdi ise index.cshtml'i yapacağız. 
@*gelen veriyi @model ile karşıladık veri var mı yopk mu kontrol ettik. *@

        @model IEnumerable<Candidate>

        @if(Model.Count() > 0){

        <h6 class="display-6"> 
        APPLICATIONS
        </h6>

        <table class="table table-hover table table-striped">

        <thead>
        <tr>

                <th>EMAIL</th>
                <th>FULL NAME</th>
                <th>APPLY AT</th>
                <th>COURSE</th>
                    
            </tr>



        </thead>


        <tbody>

        @foreach(Candidate candidate in Model){

        <tr>

            <td>@candidate.Email</td>
            <td>@candidate.FullName</td>
            <td>@candidate.ApplyAt</td>
            <td>@candidate.SelectedCourse</td>
                    
            </tr>


        
        }

        </tbody>



        </table> 


        }else{

        <div class="alert alert-info">

        There is no information. Please click here to 

            <a class="alert-link" asp-action="Apply" asp-controller="Course" >APPLY</a>

        </div>


        }



Model Validation..

_Layout içerisindeki  @RenderBody aslında yazdığımız sayfa kodlarıdır.   
<div class="container">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

........Boş başvuru vs olmaması için yapılması gerekenler. veri tutarlığı için...

using System.ComponentModel.DataAnnotations;

namespace Basics.Models
{

public class Candidate{


[Required(ErrorMessage = "Email is required")]
public String? Email{get;set;} = String.Empty; // Null değer olabilir ? demektir. String.Empty ile ise direkt olarak Empty olucak.
[Required(ErrorMessage = "FirstName is required")]
public String? FirstName{get;set;} = String.Empty;
[Required(ErrorMessage = "LastName is required")]
public String? LastName{get;set;} = String.Empty;

public String? FullName => $"{FirstName} {LastName?.ToUpper()}";  // LastName?.ToUpper()   Bunun anlamı LastName Null değilse Empty değilse büyüt yoksa atla demektir. 

public int? Age{get;set;}

public String? SelectedCourse{get;set;} = String.Empty;

public DateTime ApplyAt {get;set;}


 public Candidate()
{

    ApplyAt = DateTime.Now;

}



}

    
}

.......Mesajları göstermesi için.


    <div class="text-danger" asp-validation-summary="All"></div>
    @*bunu ekledik Apply.cshtml'e*@

.....IsValid mi değil mi kontrol ederiz...

[HttpPost]
[ValidateAntiForgeryToken] // hangi tarayıcı ile iletişim kuruluyor doğrula demektir bu sistemi kötü niyetlilere karşı korur.
public IActionResult Apply([FromForm]Candidate model){


    if(Repository.Applications.Any(c => c.Email.Equals(model.Email))){
ModelState.AddModelError("","There is already an application for you");
    } // eğer bu email varsa o zaman ModelState'ye bir hata yükle o hatanında ismini ekle.


    if(ModelState.IsValid){
 Repository.Add(model); // kullanıcı kaydetme işlemi yaptık. 


    return View("~/Views/Course/Feedback.cshtml",model); // Course view klasöründeki Feedback'e yollayacağız ve paramatre olarka ise model yollayacağiz Feedback.cshtml içeriisnde ise @model Candidate olarka gelen veriyi karşılayacağız...

    } 
    return View();

}
........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................




........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
dotnet new sln -o Store .. Store klasörünün içine bir sln oluşturup koyacak.
dotnet new web -f net6.0 -o .\Store\StoreApp   .. boş bir web şablonu oluşacak bununla ve Store klasörünün içinde StoreApp adında olacak -f net6.0 ile ise sürümü belirledik.
dotnet new web -f net6.0 -o .\Store\StoreApp  .. ilgili projeyi solutiona ekledik böylece.
dotnet sln .\Store.sln list .. solutiondaki projeleri görebilirim.

app.MapGet("/", () => "Hello World!"); // bu kök klasörü ifade eder. "/" aslında analink demektir.
app.MapGet("/emre", () => "Hello Emre!");  // analink/emre olursa bize Hello emre! dönecektir. 

boş bir web şablonu oluşturduk. 
Program.cs içeriisnde
app.MapGet("/", () => "Hello World!");
app.MapGet("/emre", () => "Hello Emre!");   metotları var bunun anlamı get isteği olursa dönecekleri şeyleri belli edebiliriz.
.......
her request bir endpoint ile son bulur.bu sunucu ile clinet arasındaki bir dil gibidir. requestler sunucu ile konuşurken hangi kurallar dahilinde konuşacak hangi hata yönetimi veri işleme vs kullanılacak pipeline içerisinde belirlenirler.
.......
var builder = WebApplication.CreateBuilder(args); // yapıcı konteyner budur.
builder.Services.AddControllersWithViews();  // Controllerlar ve Viewleri ekle konteynıra. boş web şablonu olduğu için klasörlerini biz oluşturduk.
var app = builder.Build(); // bir web app var elimizde.

app.UseHttpsRedirection(); // Https yapısı kullan.
app.UseRouting(); // routing mekanizmasını kullan dedik.

app.MapControllerRoute( // Routing mekanizmasını modifiye ediyoruz.

name: "default",
pattern: "{controller = Home}/{action=Index}/{id?} "  // default olan controller default o controllerın acitonı ve id'yi opsiyonel yaptık.

);

......................

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}"
);

.................


    public class HomeController:Controller{


          public String Index(){
            return "Hello Store app";
          }
      
    } // anaurl/Home/Index çalışırssa String olarak Hello Store App yazısı dönecek bize...
   
   Views içerisinde Home klasörü oluşturmak lazım. 

...............
ortam değişkenlerine yolunu verdiğimiz bir dosyayı bilgisayarın her yerinden kullanabiliriz...

NuGet package manager nedir. resmi paket yönetim sistemi içindir .net'te.
paketlerimizi nugetten alır ve projemize dahil edebiliriz.
nuget.org sitesinde var bu istenen paketler visual studioda direkt olarak indirebiliriz ama vs code kullandığımız için biz nuget.org'den indereceğiz.. veya .net CLI kullanırız.

dotnet add package Microsoft.EntityFrameworkCore.Sqlite --version 6.0.0  ..  bunu kullanarak ekleyebiliriz.
.net cli ile komut vererek istediğimiz paketi projemize dahil edebiliriz.

dotnet list package .. ile projeye dahil olan paketleri görebiliriz...
dotnet add package Microsoft.EntityFrameworkCore --version 6.0.0  .. ile entity Framework kurabiliriz.
dotnet add package Microsoft.EntityFrameworkCore.Design --version 6.0.0  .. bununda kurulumunu  yapalım.  

......  paketler .csproj içerisinde böyle tutulurlar.

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore" Version="6.0.0" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Sqlite" Version="6.0.0" />
  </ItemGroup>

...........

DbContext database'yi temsil edecek DbSet'ler ise tabloları temsil edecekler.
........... Models klasorunde veritabanını temsil edecek olan Bir class oluşturduk ve DbContext'ten kalıtım almasını sağladık...
using Microsoft.EntityFrameworkCore; // DbContext bundan gelecek böylece veritabanı işlemlerini yapabileceğiz.

namespace STOREAPP.Models
{
    
    public class RepositoryContext:DbContext // DbContext'ten kalıtım aldık. bu class'ı artık veritabanı gibi kullanacağız.
    { // bu class'ı veritabanı olarak göreceğiz.

public DbSet<Product> Products { get; set; }
//buda tabloyu temsil edecek. Product nesnesine göre bir tablo şeması oluşacak ve bu ürünleri tutan tabloya Products isimlendirmesi verdik.
// başka başka tablolar ekleyebiliriz burada.


    }
}

............


....connectionString.....................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
appsetting.json dosyası. uygulamanın ayarları sayfası. temel proje düzeni sağlayan dosyası. appsettings.Development.json  Development modu için geçerli ayarlar.  ama her mod için geçerli ayarlar olsun istenirse eğer o zaman appsettings.json dosyasını kullanırız.


.......appsetting.json içerisine connection string ekledik eğer veritabanı yoksa oluşturacak.
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "sqlconnection":"Data Source = C:\\Users\\emrea\\Documents\\AspFord11\\Store\\StoreApp\\ProductDb.db"
  }
}
............. sonra RepositoryContext'e geldik. yani veritabanını taklit eden class'a geldik. 

using Microsoft.EntityFrameworkCore;

namespace STOREAPP.Models
{
    
    public class RepositoryContext:DbContext
    { 

public DbSet<Product> Products { get; set; }


 public RepositoryContext(DbContextOptions<RepositoryContext> options):base(options) // bunun anlamı yeni bir constructor tanımladık default olan devreden çıkmıştır artık biz bunu farklı bir yapıya çevirdik.
{ // yani bu parametresi olmayan çağırma kabul olmayacak.
// base DbContext'tir. bağlantı ifadesini ona vermiş olacağız aslında.

} // bu yapıyı ekledik ctor'u özelleştirdik. bağlantıyı bu ifade ile gerçekleştirdik.

    }
}

.................... Şimdi Program.cs'e geldik.


using Microsoft.EntityFrameworkCore;
using STOREAPP.Models;

var builder = WebApplication.CreateBuilder(args); // işna edicidir. uygulama içerisinde ne kullanacaksak buna belirtiriz.
builder.Services.AddControllersWithViews(); // Controllers ve Views ekledik burada.  

builder.Services.AddDbContext<RepositoryContext>(
    options => {

        options.UseSqlite(builder.Configuration.GetConnectionString("sqlconnection")); // appsettings.json'daki anahtar değeri vererek o değere denk gelen bağlantı linkini girebiliriz.

     //sqlconnection appsettings.json içerisinde adres yoluna taktığımız isimdir aslında oaradan o stringi alacak.
    }
);

var app = builder.Build(); // bir web app var elimizde.

................

dotnet tool -h  .. ile tool'ların ne işe yaradığını görebiliriz.

dotnet ef  .. ef core'un bilgilerini görebiliriz komut sisteminde.



...Migrations

        Yeni Migration Ekleme
        Yeni bir migration eklemek için kullanılır:

        dotnet ef migrations add <MigrationName>
        Örnek:

        dotnet ef migrations add InitialCreate
        Veritabanını Güncelleme
        Modelde yapılan değişiklikleri veritabanına uygulamak için kullanılır:

        dotnet ef database update
        Belirli bir migration'a güncellemek için:

        dotnet ef database update <MigrationName>
        Örnek:

        dotnet ef database update InitialCreate
        Migration Kaldırma
        Son eklenen migration'ı geri almak (silmek) için kullanılır:

        dotnet ef migrations remove
        Migration'ları Listeleme
        Oluşturulmuş olan migration'ların listesini görmek için kullanılır:

        dotnet ef migrations list
        Veritabanını Silme
        Veritabanını silmek ve tüm verileri kaldırmak için kullanılır:

        dotnet ef database drop
        Not: Bu komutları çalıştırmadan önce EF Core CLI araçlarının yüklü olduğundan emin olun:

        dotnet tool install --global dotnet-ef
        Ayrıca, komutları çalıştırırken projenizin kök dizininde (csproj dosyasının bulunduğu dizin) olmanız gerektiğini unutmayın.

...........................................
konsol üzerinen kullanabiliriz Migrations komutları verebiliriz.

Migrations'lar ile biz modellerimizi veritabanına iletebiliriz.
bağlantı dizisi appsettings.json içerisinde ve ona bir takma ad verdik Program.cs içerisinde ise kullan dedğimizi zaman o takma adı verdik ve asp o uzantıya ulaştı.

migrations ile projemizin o anki sınıf yapısının bir snapshot'ını alırız aslında.

dotnet ef migrations add init   ..  ile init adında bir migrations ekledik. eğer klasör yoksa Migrations klasörü oluşacak veritabanına yansısın istersek eğer o zaman update-database yapacaksın.

Migrations içeriisnde temelde up ve down metotlarına sahiptirler.
up tablo oluşturma down ise tablo silme kısımlarıdır.

dotnet ef database update .. ile migrationsların bağlı olan veritabanına işlemesini sağlarız.

................... eğer veri yoksa tabloda hazır olarak verileri ekleyecek bir metot oluşturduk.

using Microsoft.EntityFrameworkCore;

namespace STOREAPP.Models
{
    
    public class RepositoryContext:DbContext
    { 

public DbSet<Product> Products { get; set; }


 public RepositoryContext(DbContextOptions<RepositoryContext> options):base(options) // bunun anlamı yeni bir constructor tanımladık default olan devreden çıkmıştır artık biz bunu farklı bir yapıya çevirdik.
{ // yani bu parametresi olmayan çağırma kabul olmayacak.
// base DbContext'tir. bağlantı ifadesini ona vermiş olacağız aslında.


}         

        // protected erişim belirleyicisi, bir sınıfın üyelerine (özellikler, metodlar, vs.) yalnızca o sınıfın kendisi, o sınıftan türetilen (miras alınan) alt sınıflar ve aynı pakette bulunan diğer sınıflar tarafından erişilmesine izin verir. 
                   
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {

            base.OnModelCreating(modelBuilder);

            modelBuilder.Entity<Product>().HasData(
        new Product(){Id = 1,ProductName = "Computer",Price = 17_000},
        new Product(){Id = 2,ProductName = "Keyboard",Price = 1_000},
        new Product(){Id = 3,ProductName = "Mouse",Price = 500},
        new Product(){Id = 4,ProductName = "Monitor",Price = 7_000},
        new Product(){Id = 5,ProductName = "Deck",Price = 1_500}


            );
        } // eğer veri varsa dokunmayacak ama eğer veri yoksa o tabloda bu verileri ekleyecektir.


    }
}

.......................dotnet ef migrations add ProductSeedData    şimdi DbContext'i güncelleme zamanı bununla.
dotnet ef database update  .. ile güncelleme.


...Dependency injection (bağımlılıkları yani gereklilikleri enjekte etme
DI bir pattern'dir. birr tasarım modelidir. daha güncellenebilir programlar yazmamızı sağlarlar.
olabildiğince new kalıbından çıkmak ve bağımlılıkları dışarıdan eklemek daha güncellenebilir  bir sistem kurabiliriz.  constructor ve metot DI ile bu bağımlılıkarı ekleyebiliriz.

...... eğer DI olmazsa alttaki yapıyı kullanmamız gerekir. ve bunu istemeyiz bu sürdürülebilir değildir.

     public IEnumerable<Product> Index(){


var context = new RepositoryContext(

    new DbContextOptionsBuilder<RepositoryContext>().UseSqlite("Data Source = C:\\Users\\emrea\\Documents\\ASP3\\Store\\StoreApp\\ProductDb.db").Options

);

return context.Products;

     }

................ DI olan ise alttadır.

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using STOREAPP.Models;

namespace STOREAPP.Controllers
{
   public class ProductController:Controller{ // bir class'ın controller olabilmesi için Controller sınıfından kalıtım alması gerekmektedir.
     

    private readonly RepositoryContext _context;

public ProductController(RepositoryContext context) // burada dışarıdan RepositoryContext'i eklemiş olacağız böylece orada bir güncelleme olsa da burada bir değişim vs yapmayacağız...
{
 _context = context;

}

     public IEnumerable<Product> Index(){ // Product nesnelerini üzerlerinde gezilebilir bir halde getirecek.
  
return _context.Products; // direkt olarak RepositoryContext'ten verileri alabiliriz. 


     }
   

   }


}
................................ Program.cs içerisindeki bu yapı sayesinde konteynera yapıyı ekleriz böylece new'lenmeden kullanabiliriz DI çerçevesinde RepositoryContext class'ını. newlemek gereken ifadeleri servis kendisi hallediyor.

builder.Services.AddDbContext<RepositoryContext>(
    options => {
        options.UseSqlite(builder.Configuration.GetConnectionString("sqlconnection")); // appsettings.json'daki anahtar değeri vererek o değere denk gelen bağlantı linkini girebiliriz.
     //sqlconnection appsettings.json içerisinde adres yoluna taktığımız isimdir aslında oaradan o stringi alacak.
    }
);


........................ProductController'de metot oluşturduk veritabanından verileri aldık ve View'e yolladık View'de @model List<Product> olarak karşılayıp Model ile veya @Model ile kullanacağız... Product modeline karşılık ProductController olmalıdır. buna karşılıkta Views klasöründe Product klasörü olmalıdır. ProductController'in metotlarına karşı ise Views.Product klasöründe sayfalar olmalıdır.

     public IActionResult Index(){

var model = _context.Products.ToList();
return View(model); // verileri View'e taşıdık. o sayfa açılınca verileri kullanarak gösterim yapabileceğiz.

     }
   
........................... Burada da controller Index metotunda gönderdiğimiz verileri  Views klasorundeki product klasörü içindeki İndex sayfasında göstereceğiz.
    
    @model List<STOREAPP.Models.Product>
        
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Document</title>
        </head>
        <body>
            
            @foreach(STOREAPP.Models.Product prd in @Model){

            <div>
        <h3>@prd.ProductName</h3>
        <p>@prd.Price</p>
        </div>


            }


    </body>
        </html>

...Inversion of Control
IOC nesneyi çözer. register ıoc'ye nesnenin kaydedilmesidir. Resolve çözülmesidir nesneden kaç tane üretilecek vs karar vermek. Dispose ise free'lemektir.
pipeline içerisinde çok fazla middleware yapısı olabilir.  request işlenirken middleware'lerde servisler kullanılır ve bunların çözümlenmesi gerekir.
önce kayıt olmalıdır. Dispose ve Resolve gibi kararları vardır. nesne kullanılmadığı anda Dispose edilmesi gibi. IOC bu çerçevenin yönetilmesini sağlar.
servise ait bağımlılığın çözülmesi için o zaman ioc kaydı yapılması lazım. veya mesela birden fazla context olur hangisini kullanacağını da söyleriz.

     public IActionResult Get(int id){

Product product = _context.Products.First(p=> p.ProductId.Equals(id) );
return View(product);

     }    

// mesela bu metot sayesinde biz istenen tek veriyi elde edebildik...

........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................


LAYOUT. görselleştirme işine gireceğiz.
mesela arama alanı menu alanı renderBody() alanı footer alanı gibi şeyler Bir Layout olarak sunulur.
sayfanın render body harici kısmı sabit kalarak sayfalar arasında geçiş yapabiliriz böylece görünüşü çok fazla bozmamış oluruz.

Views altında shared klasörü oluşturduk. Sonra içeriisne ise _Layout.cshtml koyduk.

.......içini ise kendimiz doldurduk.. böylece Her sayfa eğer farklı bir yapı belirtmemiş olursak renderBody hariç kısmı her sayfada aynı olacak.

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Document</title>
    </head>
    <body>

        <header>
    STORE APP : Header
        </header>

    <main>
    @RenderBody()
    @*sayfadan sayfaya değişecek olan alandır. örnek olarak Index.cshtml içerisinde olan her şey buraya gelecek ve _Layout.cshtml eklenerek çalışacak o sayfa.*@ 
    </main>

    <footer>
    Footer
    </footer>
        

    </body>
    </html>

...................

Layout'u uygulamak için ise ilgili sayfada bunu ekleriz.

@{
    Layout = "_Layout";
}

// Layout'u belirlemiş oluruz ve bütün html kodlarını RenderBody kısmına yollar.

...............örnek olarak...

@{
  Layout = "_Layout";
} 
@*burası harici tüm kodlar _Layout'un içindeki RenderBody kısmına gidecek ve burada komple Layout'un içeriği gelecek aslında.*@


@model STOREAPP.Models.Product

<h3>@Model.ProductName </h3>
<h3>@Model.Price </h3>

<a href="/Product">Products</a>
@*Buradaki tüm kodlar renderBody alanına gidecek ve _Layout.cshtml ile birleşmiş hali her bir sayfa için çalışacak.*@
....................................
    <header>
        STORE APP : Header
        @RenderSection("Top",false)    @*Bu asenkron olmayan yapı.*@
        @*true false ile zorunlu mu yoksa opsiyonel mi olacak belirleriz. false olursa opsiyonel*@ 
        @*@section Top{} ile ise bunu doldurup bu alana diğer sayfaya yazdığımız kodları ekleyebiliriz.*@
    </header>
........................

    @*eğer scriptlerimiz olursa asenkron bir şekilde tanımlayabiliriz. RenderSectionAsync bununla asenkron çalışmasını sağlayabiliriz.*@ 
    @await RenderSectionAsync("Scripts", required: false) 
 
.......................... şimdi ise RenderSection kullanımı. biz tanımlamı false ile opsinel olarak belirledik

@{
  Layout = "_Layout";
}

@model List<STOREAPP.Models.Product>

@*Bir         @RenderSection("Footer",false)     tanımlaması yapmıştık ve bunu biz sayfamıza böyle ttanımlarsak o alana _Layout içindeki o alana bu tanımlana { } arasındaki kodlar yerleşecek. *@ 
@section Footer{ @*sectionun nerede olduğunun bir önemi yok ismi neyse Layout içerisinde isim karşılığı nerdeyse oraya yerleşecek ve sayfa ile beraber gelecek.*@
  <div>
Only for Index Footer.
    </div>
} 



Views klasorunde _ViewStart.cshtml tanımladık. bunun anlamı tüm cshtml'ler içerisine önce bu _ViewStart.cshtml içerisindeki kodlar eklenecek demektir. böylece her sayfanın default kodları yazılabilir.

mesela 
@{
    Layout = "_Layout"; 
    @*Birden fazla Layout kullanıp bu yapı ile istenen sayfada istenen Layout'u kullanabiliriz.     Layout = "_Layout2"; deriz mesela _Layout2de Shared klasöründe olmak koşulu ile.  *@
    @*Bu _Layout.cshtml sayfası Shared klasöründe olmalı.*@
}
@*Bunu ekleyerek tüm sayfaların Layout'unu belirlemiş oluruz eğer içine emre yazarsak tüm sayfalarda Emre yazar..*@

...ama eğer bunu kullanmak istemezsek bazı sayfalar harici tüm sayfaların Layout'u bu olsun istersek olmasını istemediğimiz sayfaların içerisine alttakini ekleriz.
@{
    Layout = null;
}



eğer bir namespace'i tüm her yerde erişilebilir yapmak istersek o zaman Views altına bir dosya ekleriz _ViewImports.cshtml dosyası ekleriz. böylece razor pageler bunların içeriğini direkt olarak görebilir.
@using STOREAPP
@using STOREAPP.Models
@using STOREAPP.Controllers 


shared klasoründe _Navbar.cshtml dosyası oluşturduk.

<ul>
    <li>
        
        <a asp-action="Index" asp-controller="Home"> HOME</a>
        <a asp-action="Privacy" asp-controller="Home"> PRIVACY</a>
        <a asp-action="Product" asp-controller="Home"> PRODUCT</a>

    </li>

</ul>
............sonra bu kodu istediğimiz yere taşımak istersek orada <partial name = "Navbar" />  diyerek oraya taşıyabiliriz bu dosyanın içeriğini.
ama _Navbar her yerden erişebilsin diye _ViewImports.cshtml içerisine @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers satırını ekledik. böylece taghelperları kullanabilir olduk.
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers   bunu eklememiz lazım asp'nin tag helperlarını kullanmak için.

Views klasorundeki Product klasorunde _ProductCard.cshtml dosyası oluşturduk.

........içerik...
@model Product

<div>

<h2>@Model.ProductName</h2>
<p>@Model.Price.ToString("c")</p> 
@*Tl'nin sembolunu ekledik.*@

<a asp-action = "Get" asp-route-id = "@Model.ProductID">GET DETAILS</a>
<hr/>
</div>

...................... asp-route-id ise metotun parametresini vermek için kullanılır.
.....................
.....................BÖyle olan yapıyı biz bunun sayesinde.

@model List<STOREAPP.Models.Product>


@foreach (STOREAPP.Models.Product prd in Model)
{
  <div>

    <p>@prd.ProductName</p>
    <p>@prd.Price</p>

    <p>

      <a href="/Product/Get/@prd.Id"> GET DETAILS </a>

    </p>
  </div>

}

.........Buna çevirdik... böylece daha okunabilir daha iyi bir kodlama yapmış olacağız.

@model List<STOREAPP.Models.Product>

@foreach (STOREAPP.Models.Product prd in Model)
{
<partial name = "_ProductCard" model = "@prd"/>
@*Böylece parametresini gönderdiğimiz _ProductCard kodlarını burada kullanabiliriz.*@
}

.......................

...Libman

istemci taraflı kütüphaneler. paket yönetim sistemi.
static dosyalar vs. için wwwroot klasörünü kullanırız. ve klasörü ekledik. uygulamanın bu klasöre erişimi için Program.cs kullanacağız.

//Program.cs içerisine bunu eklemek lazım.
app.UseStaticFiles(); // bunu ekledik böylece static dosyaları kullanabilir olduk.

wwwroot proje içerisinde klasörü oluşturduk içerisinde ise html klasörü oluşturduk. onunda içine Error.html sayfası koyduk.
     analink/html/Error.html ile erişebilir olduk bu sayfaya. çalışır halde ise artık sistemde static dosyaları kullanabilir hale gelmişizdir demektir.

dotnet tool -h .. ile bilgi alırız toollar hakkında.
istemci taraflı işler için libman kullanabiliriz.

dotnet tool install -g Microsoft.Web.LibraryManager.Cli   .. ile kurulum yapabiliriz. libman'ı.

.........
bootstrap'ı kuracağız şimdi. bunu stillendirme için kullanacağız.

libman init -p cdnjs  .. bununla Libman.json gelecek. clint side kütüphanelerin dağıtıldığı yerdir aslında.

libman install bootstrap -d wwwroot/lib/bootstrap  .. ile bootstrap'i wwwroot klasörüne ekleriz.
// wwwroot altında lib klasörü oluşturacak ve onun içinde de bootstrap klasörü olacak bootstrap oraya yüklenecek.

libman install font-awesome -d wwwroot/lib/font-awesome  
// -d gideceği yeri belirlemek için kullanılır.

libman install jquery -d wwwroot/lib/jquery  .. jquery kurulumu yaptık wwwroot altında.

-d ifadesi destination demektir gideceği kurulacağı yeri vs belirtiriz böylece.

...........libman.json içerisi yüklemeleri yaptıktan sonra

{
  "version": "1.0",
  "defaultProvider": "cdnjs",
  "libraries": [
    {
      "library": "bootstrap@5.3.3",
      "destination": "wwwroot/lib/bootstrap"
    },
    {
      "library": "font-awesome@6.6.0",
      "destination": "wwwroot/lib/font-awesome"
    },
    {
      "library": "jquery@3.7.1",
      "destination": "wwwroot/lib/jquery"
    }
  ]
}



_Layout.cshtml dosyasında bir ekleme yaptık.      
 <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min">   bunu ekledik.
 

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min">
    <link rel="stylesheet" href="~/css/site.css">
    <link rel="stylesheet" href="~/lib/font-awesome/css/all.css"/>
    @*stil dosyalarını kullanabilir hale geleceğiz böylece. *@

</head>

.........
wwwroot altına css klasörü oluşturduk içerisine site.css koyduk. ufak custom ettiğimiz stiller için böyle bir dosya koyduk.
    <link rel="stylesheet" href="~/css/site.css">   bununla site.css'i refere edebiliriz.
..........
......... _Layout.cshtml içerisi böyle oldu. 

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min"/>
    <link rel="stylesheet" href="~/css/site.css"/>
    <link rel="stylesheet" href="~/lib/font-awesome/css/all.css"/>


</head>

<body>

    <header>
        <partial name = "_Navbar" />
        STORE APP : Header
        @RenderSection("Header", false)

    </header>

    <main>
        @RenderBody()
        @*sayfadan sayfaya değişecek olan alandır.*@
    </main>

    <footer>

        @RenderSection("Header", false)
        Footer

    </footer>

    <script src = "~/lib/jquery/jquery.min.js"> </script> 
    <script src = "~/lib/bootstrap/js/bootstrap.bundle.min.js"> </script> 
    <script src="~/js/site.js"></script>
    <script src="~/lib/font-awesome/js/all.min.js"></script>

    @*eğer scriptlerimiz olursa asenkron bir şekilde tanımlayabiliriz.*@ 
    @await RenderSectionAsync("Scripts", required: false) 

</body>

</html>
.......................
wwwroot içerisinde js klasörü oluşturup site.js koyduk içerisine.
    <script src="~/js/site.js"></script> ve böyle refere ettik.
 
.......................

bootstrap kodlarını taglara ekleyerek sitemize biçim kazandırabiliriz. bootstrap'in sayfasından istediğimiz tasarım stillerini görebiliriz. class içeriisne istediğimizi ekleyerek görsellik katabiliriz.

_Navbar.cshtml dosyası..... bunu biz kendimiz bootstrap'tan aldık. içerisine ise taglarımızı ekledik.

 

        <nav class="navbar navbar-expand-lg bg-body-tertiary">
  <div class="container-fluid">
    <a class="navbar-brand" href="/">STORE APP</a>
    @*href = "/" ile köke gitmesini sağlarız sitenin... *@
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
      <div class="navbar-nav">
                
                <a class="nav-link active" aria-current="page" asp-action="Index" asp-controller="Home"> HOME</a>
                <a class="nav-link active" aria-current="page" asp-action="Product" asp-controller="Home"> PRODUCTS</a>

      </div>
    </div>
  </div>
</nav>
......
 <a class="navbar-brand" href="/">STORE APP</a>
    @*href = "/" ile köke gitmesini sağlarız sitenin... *@

................... _Layout.cshtml'de değişimler yaptık biraz.

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="~/lib/bootstrap/css/bootstrap.min"/>
    <link rel="stylesheet" href="~/css/site.css"/>
    <link rel="stylesheet" href="~/lib/font-awesome/css/all.css"/>


</head>

<body>

    <header>
        <partial name = "_Navbar" />
        STORE APP : Header
        @RenderSection("Header", false)

    </header>

<div class="container">
    
    <main role="main" class="pb-3" >
        @RenderBody()
        @*sayfadan sayfaya değişecek olan alandır.*@
    </main>

</div>



    <footer>

        @RenderSection("Header", false)
        Footer

    </footer>

    <script src = "~/lib/jquery/jquery.min.js"> </script> 
    <script src = "~/lib/bootstrap/js/bootstrap.bundle.min.js"> </script> 
    <script src="~/js/site.js"></script>
    <script src="~/lib/font-awesome/js/all.min.js"></script>

    @*eğer scriptlerimiz olursa asenkron bir şekilde tanımlayabiliriz.*@ 
    @await RenderSectionAsync("Scripts", required: false) 



</body>

</html>

............................. main'e role="main" class="pb-3" ekledik. 
    <div class = "container">   @*ve div içerisine aldık. sayfa daha ortalandı ve bir konteyner haline geldi modifiye edeceğimiz sayfalar.*@
    <main role="main" class="pb-3">
        @RenderBody()
        @*sayfadan sayfaya değişecek olan alandır.*@
    </main>
</div>
.......................

eğer icon vs eklemek istersek eğer o zaman font-awesome kütüphanesi işimize yarar.
fontawesome.com sitesinde bulabiliriz iconları.

<a class = "btn btn-primary" asp-action="Get" asp-route-id="@Model.Id">
   <i class="fa-solid fa-arrow-right"></i>
    Get details.
</a>

bu şekil ekleyebiliriz...

...............
.bootstrap grid

@*ürünleri kartlar içerisinde gösterir hale geldik.*@
@model Product

<div class="col-md-4 my-3">


<div class="card" style="width: 18rem;">
  <img src="..." class="card-img-top" alt="...">
  <div class="card-body">
    <h5 class="card-title">Card title</h5>
    <p class="card-text">Some quick example text to build on the card title and make up the bulk of the card's content.</p>
    <a href="#" class="btn btn-primary">Go somewhere</a>
  </div>
</div>


</div>

.......................

resimleri eklemek için wwwroot altına images adında bir klasör ooluştururuz.

................................ Product index sayfası. div içeriisnde class'ı row olarak belirledik. böylece belli bir düzende prodcutCard boyutuna göre Productindex sayfası çalışacak.

@{
    Layout = "_Layout";
}

@model List<STOREAPP.Models.Product>

<div class="row my-3">

@foreach (STOREAPP.Models.Product prd in @Model)
{

<partial name = "_ProductCard" model = "@prd" />

}

</div>

............... ProductCard sayfası. bunu Productindex içerisinde çalıştırırız bir div içeriismnde böylece dinamik bir yerleşme elde ederiz.

@model Product

@*col-sm-12 ile bir tane ürün gösterecek.  col-lg-3 ile 4 ürün gösterecek 12 tane grid var default olarak.*@

<div class="col-sm-12  col-md-4 my-3 col-lg-3"> @*bölge bölge ayırma için kullanılır bu yapı.*@

<div class="card" style="width: 18rem;">
  <img src="/images/foto.jpeg" class="card-img-top" alt="...">
  @*Foto eklemesi yaptık burada.*@
  <div class="card-body">
    <h5 class="card-title">@Model.ProductName</h5>
    <p class="card-text"></p>
    <a asp-action="Get" asp-route-id="@Model.Id" class="btn btn-primary">
           <i class="fa-solid fa-arrow-right"></i>
        Go somewhere</a>
  </div>
</div>


</div>

......................

@*bootstrap ile ekran genişliğine göre elemanlar nasıl yerleşecek belirleyebiliriz.*@
<div class="col-sm-12  col-md-4 my-3 col-lg-3">  burada olduğu gibi.
col-sm-12 demek şudur ekran küçülürse 12 olsun yani tek ürün göster.    lg ise en büyük boyutta 3 ol yani 4 ürün göster.   md ise 3 tane ürün gösterecek.  böylece responsive bir yapı elde etmiş olacağız.
12 tane var mesela yatay 4 dedik 3 tane ürün görebiliriz 3 dersek yan yana 4 tane ürün görebiliriz.


....Repositories
Entities.
Repoları daha güncellenebilir ve genişletilebilir bir uygulama yapacağız.

veritabanı ile direkt olarak haberleşmeden araya başka katmanlar koyarak haberleşme sağlayacağız. küçük uygulamalarda uygulama direkt olarak DbContext ile bağlanabilir ama repolar ile çalışırsak daha genişletilebilir ve daha soyut bir yapı ortaya koyabiliriz.
varlıklar projesi modellere karşılık gelecek şekilde oluşturacağız mesela. 


kök klasörde olduğumuzdan emin olup yapmak lazım. Store burada.
        dotnet new classlib -f net6.0  ile classlib eklemesi yaptık.
        dotnet new classlib -f net6.0 -o .\STORE\Entities

projemizin yanına classlib ekledik aslında.
PS C:\Users\emrea\Documents\ASP3\Store> dotnet sln .\STORE.sln add .\Entities   .. projeyi solutiona ekledik... refere ettik demektir.

iki projeyi birbiriyle haberleştirmek için.
    dotnet  add .\STOREAPP\ reference .\Entities\     birbirine referanslarız...  proje referansını vermiş olacağız. haberleşmelerini sağlarız StoreApp' Entities'i verdik.

ayrı ayrı projelere bölersek eğer o zaman tekrar tekrar başka yerlerde kullanabiliriz.

bu sistem ile Entities üzerinde tanımlanmış olan Modelleri vs direkt olarak kendi projemize dahil edebileceğiz.

.....................
Entities altında Product.cs dosyası oluşturduk ve içine ekleme yaptık.

namespace Entities;
public class Product
{
       public int ProductID { get; set; }

        public string? ProductName { get; set; }

        public decimal Price { get; set; }

}
// Models içerisindeki Product class'ını silebiliriz.

.........................
Entities classlibinde Models adında bir klasör açtık. Product'ıda oraya taşıdık Modelleri Emtities içeriisndeki Models içerisinde tutacağız.

................... StoreApp'in StoreApp.csproj içerisinde de reference'leri görebiliriz.

<Project Sdk="Microsoft.NET.Sdk">

  <ItemGroup>
    <ProjectReference Include="..\Entities\Entities.csproj" />
  </ItemGroup>

  <PropertyGroup>
    <TargetFramework>net6.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
  </PropertyGroup>

</Project>
............................
using Entities.Models; ekleriz her yere Product nesnesini buraya aldığımız için.


RepositoryContext'i ayrı bir sınıf altında toparlamaya başlayacağız. her bir nesne için ayrı ayrı repo tanımlamaları yapacağız.  Ayrı bir Entities classlib'inde kullanırsak eğer başka başka projelerde kullanabiliriz parça parça olur proje.
dotnet new classlib -f net6.0 .\Store\Repositories   oluşturduk. şimdi ise ilişkilendirmek gerekecek. solution'a ekleyeceğiz.. dotnet sln .\Store\ add .\Store\Repositories\   ile solution'a classlib'i ekledik. şimdi ise reference vereceğiz. dotnet add .\Store\StoreApp\ referance .\Store\Repositories  .. böylecee Repositories ve Entities'in reference'lerini StoreApp'e vermiş olduk. StoreApp ikisi ile de haberleşebilecek.

StoreApp'te olan iki kütüphaneyi Repositories'e taşıyacağız.
dotnet add .\Store\Repositories package Microsoft.EntityFrameworkCore --version 6.0.0   .. ile Repositories'te kurulum yaptık demektir. 
dotnet add .\Store\Repositories package Microsoft.EntityFrameworkCore.Sqlite --version 6.0.0  
      .\Store\Repositories   burası paketin ekleneceği yerdir.

şimdi ise StoreApp'ten bu eklenenleri kaldıracağız. böylece Repositories'te çalışacak bu yapılar refere ettiğimiz için StoreApp içerisinde de çalışacak sistem. dotnet list .\Store\Repositories\ package   bununla Repositories içerisindeki kütüphaneleri görebildik.

dotnet remove package .\Store\StoreApp\ Microsoft.EntityFrameworkCore .. böyle kaldırma yapacağız.
dotnet remove package .\Store\StoreApp\ Microsoft.EntityFrameworkCore.Sqlite .. böylede son kalan kütüphaneyi kaldırdık StoreApp'ten. Repositories'te çalışacak istenen şeyler.

............şimdi. RepositoryContext'i Repositories altına alacağız. komple class'ı alıp Repositories bölümüne aktaracağız.
using System.Reflection;
using Entities.Models; // reference ile geldi.    dotnet add .\Repositories\ reference .\Entities\  
using Microsoft.AspNetCore.Identity; 
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Repositories.Config;

namespace Repositories
{
    public class RepositoryContext : IdentityDbContext<IdentityUser>
    {
        public DbSet<Product> Products { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<Order> Orders { get; set; }
        
        public RepositoryContext(DbContextOptions<RepositoryContext> options)
        : base(options)
        {

        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            
            // modelBuilder.ApplyConfiguration(new ProductConfig());
            // modelBuilder.ApplyConfiguration(new CategoryConfig());

            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());
        }
    }
}

// Böylece Repositories'te Entities'le konuşarak Models'den modelleri alarak çalışacak.  
........................... şimdi ise Repositories ile Entities'i haberleştireceğiz referance ile..
Store path'inde     dotnet add .\Repositories\ reference .\Entities\    ile refere edeceğiz.
............................. controllerlardaki usingleri ayarlamak lazım RepositoryContext başka yerden gelecek using Repositories kullanmak lazım örnek olarak. gereksiz importları usingleri vs kaldırırız. gereken yerleri düzenleriz.

...........migrationslar için hedef yeri seçmemiz lazım Program.cs içerisinde. 
builder.Services.AddDbContext<RepositoryContext>(
    options => 
    options.UseSqlite(builder.Configuration.GetConnectionString("sqlconnection"),
   b => b.MigrationsAssembly("StoreApp")
));
// Bununla migrationslar StoreApp içerisinde oluşacak. RepositoryContext başka bir projede olsa da.
// Migration alıp update database ile işlemleri geçerli kılabiliriz.


....................... 
..Repository base......................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
base Repository oluşturucaz. controller normalde DbContext ile veritabanına bağlıydı şimdi ise arada katmanlar olacak. IRepositoryBase olacak RepositoryManager olacak vs vs. her nesneye ilişin (sayısı değişebilir) ilgili interface tanımlarını yaparız ve ayrı ayrı repolar oluştururuz her nesne için. 
repoyu soyutlamak test yazma konuusnda çok yardımcı olur.

Database --- (DbContext-IRepositoryBase-(sayısı değişebilir) ilgili interface tanımlamaları-IRepositoryManager)---Controller    bu sıra ile bağlantı olur veritabanına.
                               ARA KATMAN  

................Repositories altında Contracts klasörü oluşturduk. içine ise IRepositoryBase.cs koyduk.   Contractları bu klasorde barındıracağız.
using System.Linq.Expressions;

namespace Repositories.Contracts
{
    public interface IRepositoryBase<T> // Generic bir yapı.
    {
        IQueryable<T> FindAll(bool trackChanges); // IQueryable sorgulanabilir demektir.
  T? FindByCondition(Expression<Func<T,bool>> expression, bool trackChanges); // T generic demek ? ise null olabilir demektir. Expression Linq'ten gelicek.  Expression<Func<T,bool>> expression   true ya da false dönecek demektir. bool trackChanges kayıtları izleyecekmiyiz izlemeyecek miyiz belirler.
        void Create(T entity);
        void Remove(T entity);
        void Update(T entity);
    }
       

}
...............
...............Repositories altında RepositoryBase.cs dosyası oluşturduk. Direkt olarak Repositories altında oluşturduk başka veritabanı sistemkleri kullanacak olursak klasörlemek lazım.   
using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using Repositories.Contracts;

namespace Repositories
{
    public abstract class RepositoryBase<T> : IRepositoryBase<T> // IRepositoryBase'i imzalaması lazım. 
    where T : class, new() // temel sınıfların newlenmesini istemiyoruz. Base class'ı devralan newlenebilecek Base direkt olarak newlenmeyecek.
    {

        // protected olarak tanımladık çünkü miras alan classlarda da kullanmak istiyoruz.  
        protected readonly RepositoryContext _context; // readonly demek ya direkt = ile atama alacak ya da constructor içerisinde atama alacak başka yerde yasak.

        protected RepositoryBase(RepositoryContext context)
        {
            _context = context; // bunu IOC çözecek.
        }


        public IQueryable<T> FindAll(bool trackChanges)
        {
            return trackChanges
                ? _context.Set<T>() // doğruysa 
                : _context.Set<T>().AsNoTracking(); // yanlışsa.
        }

        public T? FindByCondition(Expression<Func<T, bool>> expression, bool trackChanges)
        { // ilgili tipe Set ol demek Set.  
            return trackChanges
                ? _context.Set<T>().Where(expression).SingleOrDefault() // trackChanges true ise.
                : _context.Set<T>().Where(expression).AsNoTracking().SingleOrDefault(); // false ise.
        } // interfacenin imzası olan bir metottur bu. 

        public void Remove(T entity)
        {
            _context.Set<T>().Remove(entity);
        }

        public void Update(T entity)
        {
            _context.Set<T>().Update(entity);
        }

    }
}

...................... Repositories Contracts içerisinde IProductRepository oluşturduk.

using Entities.Models;
using Entities.RequestParameters;

namespace Repositories.Contracts
{
    public interface IProductRepository : IRepositoryBase<Product> // Product nesnesi ile çalışacağımızı belirledik.
    {

        IQueryable<Product> GetAllProducts(bool trackChanges); // bool trackChanges değişiklikleri bir parametreye bağlarız.
        IQueryable<Product> GetAllProductsWithDetails(ProductRequestParameters p);
        IQueryable<Product> GetShowcaseProducts(bool trackChanges);
        Product? GetOneProduct(int id, bool trackChanges);
        void CreateOneProduct(Product product);
        void DeleteOneProduct(Product product);
        void UpdateOneProduct(Product entity);
   
    }
}
.......................... şimdi ise ProductRepository.cs ekleriz.

using Entities.Models;
using Entities.RequestParameters;
using Microsoft.EntityFrameworkCore;
using Repositories.Contracts;
using Repositories.Extensions;

namespace Repositories
{

    public sealed class ProductRepository : RepositoryBase<Product>, IProductRepository
    {
        public ProductRepository(RepositoryContext context) : base(context) // context ifadesini base class'a yani RepositoryBase'i göndereceğiz böylece DI çerçevesi içerisinde işlenecek sistem.
        { 
         
        }

        public void CreateOneProduct(Product product) => Create(product);

        public void DeleteOneProduct(Product product) => Remove(product);

        public IQueryable<Product> GetAllProducts(bool trackChanges) => FindAll(trackChanges); // ilgili metotu çağırırken kullanacağız. 

        public IQueryable<Product> GetAllProductsWithDetails(ProductRequestParameters p)
        {
            return _context
                .Products
                .FilteredByCategoryId(p.CategoryId)
                .FilteredBySearchTerm(p.SearchTerm)
                .FilteredByPrice(p.MinPrice, p.MaxPrice, p.IsValidPrice)
                .ToPaginate(p.PageNumber, p.PageSize);
        }

        // Interface
        public Product? GetOneProduct(int id, bool trackChanges)
        {
              return FindByCondition(p => p.ProductId.Equals(id),trackChanges);  
        }

        public IQueryable<Product> GetShowcaseProducts(bool trackChanges)
        {
            return FindAll(trackChanges)
                .Where(p => p.ShowCase.Equals(true));
        }

        public void UpdateOneProduct(Product entity) => Update(entity);
       
    }
}

...................................
..RepositoryManager
repoları yönetecek olan RepositoryManagerdir. 

...........Repositories projesine yeni bir interface ekleriz Contractslar içerisine IRepositoryManager.cs ekledik.

namespace Repositories.Contracts
{
    public interface IRepositoryManager
    {
        IProductRepository Product {get; } // repoları sadece get için kullanırız. 
        ICategoryRepository Category {get;}
        IOrderRepository Order {get;}
        void Save(); // kayıtları kaydetmek için kullanırız.
    }
}

............... Repositories altında RepositoryManager.cs oluşturduk.
using Repositories.Contracts;

namespace Repositories
{
    public class RepositoryManager : IRepositoryManager
    {
        private readonly RepositoryContext _context;
        private readonly IProductRepository _productRepository;
        private readonly ICategoryRepository _categoryRepository;
        private readonly IOrderRepository _orderRepository;

        public RepositoryManager(IProductRepository productRepository,
        RepositoryContext context,
        ICategoryRepository categoryRepository,
        IOrderRepository orderRepository)
        {  
            _context = context;
            _productRepository = productRepository;
            _categoryRepository = categoryRepository;
            _orderRepository = orderRepository;
        } // Tüm bağlantılar bu class içerisine almış olduk readonly olan bağlantı nesnelerinin atamasını ise constructor içerisinde yaptık.

        public IProductRepository Product => _productRepository; // Bu kod parçası, bir sınıfta IProductRepository türünde bir özelliği (Property) tanımlar. Product özelliği çağrıldığında _productRepository nesnesini döndürür. Bu, genellikle bir Repository deseni uygulandığında kullanılır.

        public ICategoryRepository Category => _categoryRepository; // sınıf örneğinden erişilmek istenirse ilgili yerin dönmesi sağlanacak.

        public IOrderRepository Order => _orderRepository;

        public void Save()
        {
            _context.SaveChanges();
        } // contenxt üzerinde saveleme yaparız. 

    }
}

................
Repolar üzerinde işlemler yapılır. RepositoryManager ile tüm repolara erişmek isteriz bağımlılıkları IOC çözecek. bir değişim olursa RepositoryManagerDeki save tüm her şeyi saveleyecek.

.............Register kısmı.
IOC'de bir kayıt işlemi lazım StoreAppteki Program.cs' geliriz. 
builder.Services.AddScoped<IProductRepository,ProductRepository>();
builder.Services.AddScoped<IRepositoryManager,RepositoryManager>(); bunu ekledik.
.............resolve kısmı. ProductController içerisi.
 
namespace StoreApp.Controllers
{
    public class ProductController : Controller
    {
        private readonly IRepositoryManager _manager;


        public ProductController( IRepositoryManager manager)
        {
            _manager = manager;
        }
................. nesneleri ise nasıl göreceğiz.


        public IActionResult Index()
        {
            var models = _manager.Product.GetAllProducts(false).ToList();
            return View(model); 
        }
        // bu yapı ile controller içerisinde veritabanındaki verilere erişebiliriz.

....................
..Interfaces


        public Product? GetOneProduct(int id, bool trackChanges){

              return FindbyCondition(p => p.ProductId.Equals(id) , trackChanges);
        } 
............. yukarıdaki metotun kullandığı yapı.

        public T? FindByCondition(Expression<Func<T, bool>> expression, bool trackChanges)
        { // ilgili tipe Set ol demek Set.  
            return trackChanges
                ? _context.Set<T>().Where(expression).SingleOrDefault() // trackChanges true ise.
                : _context.Set<T>().Where(expression).AsNoTracking().SingleOrDefault(); // false ise.
        } // interfacenin imzası olan bir metottur bu. 

// interfaceler aslında metotu çağırma zorunluluğu sağlar bize.

......................
...Category.....................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
modeller ayrı repolar ayrı projede.


...........Entities Models Altına Category.cs ekleyeceğiz....

namespace Entities.Models
{
    public class Category
    {
        
        public int CategoryId { get; set; }
    
        public String? CategoryName { get; set; } = String.Empty; // ilk olarak boş bir string değeri vereceğiz başlangıç değeri olarak.
        
        // Collection navigation property
        public ICollection<Product> Products { get; set; }  
    

    }

}

................. ICategoryRepository oluşturucaz.  Repositories'te tanımlamaları yapacağız.  Contracts içerisine  ICategoryRepository eklemesi yaptık.
using Entities.Models;

namespace Repositories.Contracts
{
    public interface ICategoryRepository : IRepositoryBase<Category>
    {
        // IRepositoryBase'dekileri kullanacağız zaten o yüzden ek bir zorunlu metot eklemesi yapmadık.  
    }
}
// IRepositoryManager'e ICategoryRepository eklemesi yaptık.
......................... şimdi ise CategoryRepository.cs oluşturacağız Repositories içerisinde.
using Entities.Models;
using Repositories.Contracts;

namespace Repositories
{
    public class CategoryRepository : RepositoryBase<Category>, ICategoryRepository
    {
        public CategoryRepository(RepositoryContext context) : base(context) // context'i base class'a göndererek DI çerçevesini tamamlamasını sağlarız.
        {
            //  RepositoryBase'deki yapıyı kullanacağımız için fazladan bir şey yazmadık.
        }
    }
}
//IRepositoryManager'e ekleme yaptık private readonly ICategoryRepository _categoryRepository;  ve constructorda atama olacak şekilde oraya ekledik.

......................... IOC kaydı. Program.cs'e geleceğiz builder.Services.AddScoped<ICategoryRepository,CategoryRepository>(); yaparak IOC kaydı yaparız.
...................... CategoryController ekledik Controllers klasörüne.

using Entities.Models;
using Microsoft.AspNetCore.Mvc;
using Repositories.Contracts;

namespace StoreApp.Controllers
{
    public class CategoryController : Controller
    {
        private IRepositoryManager _manager; // _manager üzerinden nesnelere erişim sağlayacağız.

        public CategoryController(IRepositoryManager manager)
        {
            _manager = manager;
        }

        public IActionResult Index()
        {
            var model =  _manager.Category.FindAll(false); // false demek burada izleme olsun mu olmasın mı olmasın dedik.
            return View(model);
        } // buna karşılık Views altında Category adında bir klasör onunda içinde Index.cshtml eklememiz lazım.
         



    }
} 

..................buna karşılık Views altında Category adında bir klasör onunda içinde Index.cshtml eklememiz lazım.   buda bunun karşılığı.

@model IEnumerable<Category>

<div class="text-center my-3">
    <h6 class="display-6">
        KATEGORİLER
    </h6>
</div>

<ul class="list-group my-3">
    @foreach (var cat in Model)
    {
        <li class="list-group-item">@cat.CategoryName</li>
    }
</ul>

................................. ÇEkirdek datalar için RepositoriesTeki RepositoryContext'e gideceğiz.


              protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
           
            modelBuilder.Entity<Category>.HasData(
                new Category() { CategoryId = 1, CategoryName = "Book" },
                new Category() { CategoryId = 2, CategoryName = "Electronic" }
            ); // eğer veri yoksa oluşturacak. ama bunu Config ile de yapabiliriz en iyisi.


        } // bu metot içerisinde yaparız bunları.





........................... Migrations ekleyerek ve veritabanına yansıtarak update ile çekirdek dataları ekleyebiliriz veritabanına.
...Services
bir iş aklı varsa eğer temel yapıyı servisler ile inşa edeceğiz. uygulamanın genel mantığını servis katmanında tanımları.
ProductServices gibi CategoryServices gibi bir yapı kuracağız.  

Bu yapıyı       Database --- (DbContext-IRepositoryBase-(sayısı değişebilir) ilgili interface tanımlamaları-IRepositoryManager)---Controller    bu sıra ile bağlantı olur veritabanına.
Buna çeviricez Servisler ile = Database --- (DbContext-IRepositoryBase-(sayısı değişebilir) ilgili interface tanımlamaları-IRepositoryManager)-(IProducService vs gibi modellere ilişkin servisler - IServiceManager)---Controller    bu sıra ile bağlantı olur veritabanına.
böylece Repositories yapısı ile controller arasına bir katman daha koyarız Services katmanı olacak bu. database-RepositoryManager-serviceManager-controller olacak şimdi ise.
servisi controllerlara entegre edeceğiz. her uygulamada tutarlı çalışmasını sağlayacağız.
 
.........bir proje ekleyeceğiz. classlib olacak bu. 
StoreApp Repositories Entities ile aynı hizada olacak olan bir classlib ekleyeceğiz. 
dotnet new classlib -f net6.0 -o Services  .. ile ekleyeceğiz.
ilgili projeyi solutiona eklemek lazım dotnet sln .\Store.sln add .\Services\     ile solutina ekleriz classlib'i.
dotnet add .\Services\ reference .\Entities\ .. path önemli ama.
dotnet add .\Services\ reference .\Repositories\ .. path öenmli.
dotnet add .\StoreApp\ reference .\Services\

..............ProductServices yazacağız..
......Services projesinde Contracts klasörü oluştururuz. içerisine IProducService.cs koyduk.
using Entities.Dtos;
using Entities.Models;
using Entities.RequestParameters;

namespace Services.Contracts
{
    public interface IProductService
    {
        IEnumerable<Product> GetAllProducts(bool trackChanges);
        IEnumerable<Product> GetLastestProducts(int n, bool trackChanges);
        IEnumerable<Product> GetAllProductsWithDetails(ProductRequestParameters p);
        IEnumerable<Product> GetShowcaseProducts(bool trackChanges);
        Product? GetOneProduct(int id, bool trackChanges);
        void CreateProduct(ProductDtoForInsertion productDto);
        void UpdateOneProduct(ProductDtoForUpdate productDto);
        void DeleteOneProduct(int id);
        ProductDtoForUpdate GetOneProductForUpdate(int id, bool trackChanges);
    }
}
......................şimdi ise Services classlib'i altında ProductManager.cs ekleyeceğiz.

        using AutoMapper;
        using Entities.Dtos;
        using Entities.Models;
        using Entities.RequestParameters;
        using Repositories.Contracts;
        using Services.Contracts;

        namespace Services
        {
            public class ProductManager : IProductService // IProducService'in metotlarını dolduracağız burada.
            {

                private readonly IRepositoryManager _manager; // Repoları kullanabilmek için bunu enjekte ederiz.
                private readonly IMapper _mapper;

                public ProductManager(IRepositoryManager manager,
                IMapper mapper)
                {
                    _manager = manager;
                    _mapper = mapper;
                }

                public void CreateProduct(ProductDtoForInsertion productDto)
                {
                    Product product = _mapper.Map<Product>(productDto);
                    _manager.Product.Create(product);
                    _manager.Save();
                }

                public void DeleteOneProduct(int id)
                {
                    Product product = GetOneProduct(id, false);
                    if (product is not null)
                    {
                        _manager.Product.DeleteOneProduct(product);
                        _manager.Save();
                    }
                }

                public IEnumerable<Product> GetAllProducts(bool trackChanges)
                {
                    return _manager.Product.GetAllProducts(trackChanges);
                }

                public IEnumerable<Product> GetAllProductsWithDetails(ProductRequestParameters p)
                {
                    return _manager.Product.GetAllProductsWithDetails(p);
                }

                public IEnumerable<Product> GetLastestProducts(int n, bool trackChanges)
                {
                    return _manager
                        .Product
                        .FindAll(trackChanges)
                        .OrderByDescending(prd => prd.ProductId)
                        .Take(n);
                }

                public Product? GetOneProduct(int id, bool trackChanges)
                {
                    var product = _manager.Product.GetOneProduct(id, trackChanges);
                    if (product is null)
                        throw new Exception("Product not found!");
                    return product;
                }

                public ProductDtoForUpdate GetOneProductForUpdate(int id, bool trakcChanges)
                {
                    var product = GetOneProduct(id, trakcChanges);
                    var productDto = _mapper.Map<ProductDtoForUpdate>(product);
                    return productDto;
                }

                public IEnumerable<Product> GetShowcaseProducts(bool trackChanges)
                {
                    var products = _manager.Product.GetShowcaseProducts(trackChanges);
                    return products;
                }

                public void UpdateOneProduct(ProductDtoForUpdate productDto)
                {
                    // var entity = _manager.Product.GetOneProduct(productDto.ProductId, true);
                    // entity.ProductName = productDto.ProductName;
                    // entity.Price = productDto.Price;
                    // entity.CategoryId = productDto.CategoryId;
                    var entity = _mapper.Map<Product>(productDto);
                    _manager.Product.UpdateOneProduct(entity);
                    _manager.Save();
                }
            }
        }

................................ şimdi ise ICategoryService.cs koyacağız Servicesin Contracts klasörüne.

using Entities.Models;

namespace Services.Contracts
{
    public interface ICategoryService
    {
        IEnumerable<Category> GetAllCategories(bool trackChanges); 
    }
}

................................. şimdi ise Services classlib'i altında CategoryManager.cs kurarız.

using Entities.Models;
using Repositories.Contracts;
using Services.Contracts;

namespace Services
{
    public class CategoryManager : ICategoryService
    {
        // 
        private readonly IRepositoryManager _manager;

        public CategoryManager(IRepositoryManager manager)
        {
            _manager = manager;
        }
        // Üstteki // ile alttaki // arası DI çerçevesidir.

        public IEnumerable<Category> GetAllCategories(bool trackChanges)
        {
            return _manager.Category.FindAll(trackChanges);
        }
    }
}

............................. IServiceManager ekledik Servicesin Contracts alanına.
namespace Services.Contracts
{
    public interface IServiceManager // merkezi olarak servisleri yönettiğimiz yerlerden birisi.s
    {
        IProductService ProductService {get;}
        ICategoryService CategoryService {get;}
        IOrderService OrderService {get;}
        IAuthService AuthService {get; }
    }
}
........................... şimdi ise serviceManager ekleriz.
using Services.Contracts;

namespace Services
{
    public class ServiceManager : IServiceManager // burada hepsi enjekte edilecek bunları kullanması zorunlu olacak. IServiceManager içindekileri implemente etmek zorunda kalacak. 
    {

        private readonly IProductService _productService;
        private readonly ICategoryService _categoryService;
        private readonly IOrderService _orderService;
        private readonly IAuthService _authService;

        public ServiceManager(IProductService productService,
        ICategoryService categoryService,
        IOrderService orderService,
        IAuthService authService)
        {
            _productService = productService;
            _categoryService = categoryService;
            _orderService = orderService;
            _authService = authService;
        } // buda bir DI çerçevesidir bağımlılıklar dışarıdan enjekte edilir. 


        public IProductService ProductService => _productService;  // burada direkt olarak get metotu aslında _productService dönecek bize.

        public ICategoryService CategoryService => _categoryService;

        public IOrderService OrderService => _orderService;

        public IAuthService AuthService => _authService;
    }
}

.......................................Configuration adımı. Bunları IOC'ye kaydetmemiz lazım. StoreApp'teki Program.cs'e geleceğiz.
builder.Services.AddScoped<IServiceManager,ServiceManager>();
builder.Services.AddScoped<IProductService,ProductManager>();
builder.Services.AddScoped<ICategoryService,CategoryManager>();

ama bu yapıyı değiştirebiliriz. StoreApp altında Infrastructure klasörü koyup içerisine tüm gerekenleri koyup bu sistemi oradan Program.cs'e enjekte edebiliriz.

................................ Şimdi ise Controllerlarda IServiceManager kullanacağız. 

using Entities.RequestParameters;
using Microsoft.AspNetCore.Mvc;
using Services.Contracts;
using StoreApp.Models;

namespace StoreApp.Controllers
{
    public class ProductController : Controller
    {
        
        private readonly IServiceManager _manager;

        public ProductController(IServiceManager manager)
        {
            _manager = manager;
        } // Buda bir DI çerçevesi.

        public IActionResult Index(ProductRequestParameters p)
        {
            var products = _manager.ProductService.GetAllProductsWithDetails(p);  // _manager.ProductService. ile metotları kullanıyor olabiliriz artık.
            var pagination = new Pagination()
            {
                CurrenPage = p.PageNumber,
                ItemsPerPage = p.PageSize,
                TotalItems = _manager.ProductService.GetAllProducts(false).Count()
            };
            return View(new ProductListViewModel()
            {
                Products = products,
                Pagination = pagination
            });
        }

.....................................
...View Components
sayfanın genel görüntüsünden farklı bir yapı ile çalışacak olan görünümü ViewComponent ile tanımlayabiliriz.

ViewComponent isimlendirmesi önemlidir. ProductSummary metotu mesela ProductSummaryViewComponent olarak eklememiz lazım.

StoreApp altında Components adında bir klasör oluşturduk. 
..............ProductSummary.cs Components klasöründe. oluşturduk. // kaç ürün varsa sayısını dönecek bize.

using Microsoft.AspNetCore.Mvc;
using Repositories;
using Services.Contracts;

namespace StoreApp.Components
{
    public class ProductSummaryViewComponent : ViewComponent // ViewComponent'ten türeyecek sistem.
    {

        private readonly IServiceManager _manager; // servis üzerinden gidersek çok daha güvenli olur sistem.

        public ProductSummaryViewComponent(IServiceManager manager)
        {
            _manager = manager;
        }
        
        public string Invoke()
        {
            // service
            return _manager.ProductService.GetAllProducts(false).Count().ToString();
        } // string olarak bize kaç ürün var sayısını getirecek.
    
    }
}

.................................. Navbar içerisinde Product alanı vardı onun yanına sayıyı vereceğiz Product(5) gibi mesela.
        <li class="nav-item">
          <a class="nav-link active" aria-current="page" asp-controller="Product" asp-action="Index">Products
            (@await Component.InvokeAsync("ProductSummary"))</a>
            @*asenkron çalışmak için kullanırız bu await InvokeAsync yapısını.*@
        </li>
        @* Component yapısını sınıfımızı public class ProductSummary : ViewComponent    ViewComponent ile türettiğimiz için kullanabilir olduk.*@

............................... IViewComponentResult component ile bir view yapısının beraber kullanılması. Components klasöründe CategoriesMenuViewComponent.cs oluşturduk.

using Microsoft.AspNetCore.Mvc;
using Services.Contracts;

namespace StoreApp.Components
{
    public class CategoriesMenuViewComponent : ViewComponent // View'de Component yapısını kullanabilmek için bu yapıyı kullanmamız lazım ViewComponent'ten miras almak lazım
    {
        private readonly IServiceManager _manager;

        public CategoriesMenuViewComponent(IServiceManager manager)
        {
            _manager = manager;
        }

        public IViewComponentResult Invoke()
        {
            var categories = _manager.CategoryService.GetAllCategories(false);
            return View(categories);
        }
    }
}

................................. Bu View ise Views'deki Shared klasörüne Components klasörü oluştururuz. onunda içinde CategoriesMenu klasörü oluşturduk isimlendirme önemlidir. isimlendirme yapısına dkkat etmek lazım . CategoriesMenu klasöründe de Default.cshtml oluşturacağız.
@model IEnumerable<Category> @*üzerinde gezilebilir numaralandırılabilir yapısı demektir IEnumerable*@

<div class="mt-3">
    <h6 class="lead">
    <i class="fa fa-solid fa-bars text-secondary"></i>
KATEGORİLER
    </h6>
</div>

<div class="my-4">
    <ul class="list-group">
        @foreach (var cat in Model)
        {
            <li class="list-group-item">
                <a asp-action="Index" asp-route-categoryId = "@cat.CategoryId">
                    @cat.CategoryName
                </a>
            </li>
        }
    </ul>
</div>

.................................. Product index sayfasında bu yapıyı görebilmek için ...
@model ProductListViewModel

<div class="row"> @*row olan bir div'e aldık tüm sayfayı.*@
    <div class="col-md-3"> @*bu ise istenen Componentleri dahil etmek için kullanılan sistem.*@
    
        @await Component.InvokeAsync("CategoriesMenu")
        @await Component.InvokeAsync("ProductFilterMenu")
        @*asenkron yappıları await ile kullanırız buralarda. *@
        <div products="" number="3"></div>
    
    </div>
    <div class="col-md-9"> @*verileri gösteren div.*@
    
        <div class="row my-3">
            @foreach (Product prd in Model.Products)
            {
                <partial name="_ProductCard" model="@prd" />
            }
        </div>
        <div class="text-center">
            <div page-model="@Model.Pagination" page-action="Index" page-classes-enabled="true" page-class="btn"
                page-class-normal="btn-outline-dark" page-class-selected="btn-secondary" class="btn-group">
            </div>
        </div>
    </div>
</div>

..........................




























































































































































........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................

........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................



........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................

















........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................



















WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...
WEB APİ...

api. 
• Application Programming Interface (API)'ler (uygulama programlama arayüzü), (integrated) web uygulamaları tümleşik geliştirmek ve kurmak için bir dizi tanımlar ve protokollerden oluşan bir uygulama programlama arayüzüdür.

uygulamar arasında iletişim ve veri alışverişi sağlarız api ile.. farklı sunucular farklı veritbanları kullanarak vs bir uygulama inşa edebiliriz.
apiler illaki internet ile çalışacak diye bir şey yok. mesela import pandas dedik bir api pandas kütüphanesi uygulamamıza entegre eder yani uygulamalar arasında bağlantı kurar internetli veya internetsiz.

serivis katmanı uygulamanın ana iş mantığının olduğu yerdir.
Apileri Presentation üzerine kurarız. 

bir arayüzle api'ye istek atıp crud yapabiliriz. 
bir api'yi canlıya alıp hem mobil hem web hem masaüstü hemde iot cihazlar ile iletişim sağlayabiliriz.

        Backend as a service , Backend as a function .. bunlar iki türlü api implementasyonudur.


        Backend as a Service (BaaS) ve Backend as a Function (BaaF), uygulama geliştirmede kullanılan iki farklı altyapı modelidir. Her birinin ne olduğuna, kullanım alanlarına ve avantajlarına bakalım.

        Backend as a Service (BaaS)
        Backend as a Service (BaaS), geliştiricilere hazır arka uç hizmetleri sunan bulut tabanlı bir hizmet modelidir. BaaS platformları, sunucu tarafı mantığı, veritabanı yönetimi, kullanıcı kimlik doğrulama, push bildirimleri, bulut depolama gibi birçok arka uç hizmetini sağlar. BaaS, geliştiricilerin arka uç altyapısını yönetme karmaşıklığını ortadan kaldırır ve onların yalnızca ön uç geliştirmeye odaklanmalarını sağlar.

        BaaS'in Avantajları:

        Hızlı Geliştirme: Hazır bileşenler sayesinde projeler daha hızlı bir şekilde geliştirilebilir.
        Kolay Ölçeklenebilirlik: BaaS sağlayıcıları, yüksek kullanıcı yüklerini yönetmek için otomatik ölçeklendirme sunar.
        Düşük Bakım: Sunucu yönetimi ve bakım işleri BaaS sağlayıcısına aittir, bu da geliştirme ekibinin yükünü azaltır.
        BaaS'in Dezavantajları:

        Özelleştirme Sınırlamaları: Önceden belirlenmiş hizmetler ve altyapı nedeniyle özelleştirme sınırlı olabilir.
        Maliyet: Kullanım miktarına göre maliyetler artabilir.
        Bağımlılık: BaaS sağlayıcısına bağımlılık, platformu değiştirmek istendiğinde sorun yaratabilir.
        Backend as a Function (BaaF)
        Backend as a Function (BaaF) veya Function as a Service (FaaS), serverless (sunucusuz) bir hesaplama modelidir. Bu modelde, geliştiriciler yalnızca belirli işlevler (fonksiyonlar) yazar ve bu fonksiyonlar belirli olaylar tetiklendiğinde çalıştırılır. Sunucular ve altyapı sağlayıcı tarafından yönetilir ve geliştiricilerin bu konuda endişelenmesine gerek kalmaz.

        BaaF'in Avantajları:

        Düşük Maliyet: Yalnızca çalıştırılan fonksiyonlar için ödeme yapılır. Kullanılmayan zamanlarda herhangi bir maliyet yoktur.
        Otomatik Ölçeklendirme: Fonksiyonlar talebe bağlı olarak otomatik olarak ölçeklenir.
        Geliştirme Hızı: Geliştiriciler yalnızca işlevsellik üzerine odaklanabilirler, sunucu yönetimi gerektirmez.
        BaaF'in Dezavantajları:

        Soğuk Başlatma Süresi: Fonksiyonlar ilk kez çağrıldığında veya bir süre kullanılmadığında soğuk başlatma süresi nedeniyle gecikme olabilir.
        Durumsuz Yapı: Fonksiyonlar genellikle durumsuzdur, bu da sürekli veri tutmak için uygun olmayabilir.
        Özelleştirme Sınırlamaları: Sunucusuz mimari ve yönetim sağlayıcının elinde olduğundan, özelleştirme sınırlı olabilir.

Request ve Response, istemci (client) ve sunucu (server) arasındaki iletişimde kullanılan temel yapı taşlarıdır. İstemci tarafından gönderilen bir request (istek), sunucu tarafından alınır, işlenir ve buna uygun bir response (yanıt) ile cevaplanır. Bu süreç genellikle HTTP/HTTPS protokolleri üzerinden çalışır.

1. HTTP Request Yapısı
Bir HTTP request, istemciden sunucuya bir işlem veya bilgi almak amacıyla gönderilen bir mesajdır. Bu mesaj genellikle şu 3 ana bölümden oluşur:

1.1 Request Line (İstek Satırı)
İstek satırı, 3 bilgiyi içerir:

HTTP Method (Metot): İsteğin türünü belirtir (GET, POST, PUT, DELETE, vb.).
URI (Uniform Resource Identifier): Hedef kaynağı belirtir (örneğin, /api/products).
HTTP Version: Kullanılan HTTP protokolünün sürümünü belirtir (örneğin, HTTP/1.1 veya HTTP/2).
Örnek:

plaintext

GET /api/products HTTP/1.1
1.2 Headers (Başlıklar)
Headers, isteğin meta verilerini içerir. Bu başlıklar, isteğin nasıl ele alınacağını sunucuya bildirir.

Sık Kullanılan Headers:
Header............	Açıklama.............Örnek
Content-Type	Gönderilen verinin türünü belirtir.	application/json
Authorization	Kimlik doğrulama bilgilerini taşır.	Bearer <token>
User-Agent	İstemci bilgilerini içerir (tarayıcı veya uygulama).	Mozilla/5.0
Accept	İstemcinin kabul ettiği veri türlerini belirtir.	application/json, text/html
Host	Hedef sunucunun adını belirtir.	example.com
Cache-Control	Önbellek politikalarını belirtir.	no-cache
Örnek Request Headers:

plaintext

GET /api/products HTTP/1.1
Host: example.com
Content-Type: application/json
Authorization: Bearer abc123token
User-Agent: Mozilla/5.0
1.3 Body (Gövde)
Body, isteğin ana verisini içerir. Body genellikle POST, PUT veya PATCH gibi metotlarda kullanılır.

Örnek JSON Gövdesi:
json
Kodu kopyala
{
    "name": "Laptop",
    "price": 1200
}
Tam Request Örneği:

plaintext
Kodu kopyala
POST /api/products HTTP/1.1
Host: example.com
Content-Type: application/json
Authorization: Bearer abc123token
User-Agent: Mozilla/5.0
Content-Length: 34

{
    "name": "Laptop",
    "price": 1200
}
2. HTTP Response Yapısı
Bir HTTP response, sunucunun istemciden gelen isteği işleyip verdiği yanıttır. Response, istemciye isteğin sonucuyla ilgili bilgi döndürür ve şu ana bölümlerden oluşur:

2.1 Status Line (Durum Satırı)
Durum satırı, 3 bilgiyi içerir:

HTTP Version: Yanıtın HTTP protokol sürümünü belirtir (örneğin, HTTP/1.1 veya HTTP/2).
Status Code: Yanıtın durumunu belirtir (örneğin, 200 OK, 404 Not Found).
Reason Phrase: Durum kodunun açıklaması (örneğin, OK, Not Found).
Örnek:

plaintext
Kodu kopyala
HTTP/1.1 200 OK
2.2 Headers (Başlıklar)
Yanıt başlıkları, sunucunun istemciye ilettiği meta verilerden oluşur.

Sık Kullanılan Headers:
Header	Açıklama	Örnek
Content-Type	Döndürülen verinin türünü belirtir.	application/json
Content-Length	Döndürülen içeriğin boyutunu belirtir.	1234
Cache-Control	Yanıtın nasıl önbelleğe alınacağını belirtir.	no-cache
Set-Cookie	Sunucunun istemciye bir çerez göndermesini sağlar.	sessionid=abc123; HttpOnly; Secure
ETag	İçeriğin benzersiz bir versiyonunu belirtir.	"34bfb-56a3d9"
Örnek Response Headers:

plaintext
Kodu kopyala
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 123
Cache-Control: no-cache
ETag: "34bfb-56a3d9"
2.3 Body (Gövde)
Body, yanıtın asıl verisini içerir. Bu veri JSON, XML, HTML veya düz metin olabilir.

Örnek JSON Yanıtı:
json
Kodu kopyala
{
    "id": 1,
    "name": "Laptop",
    "price": 1200
}
Tam Response Örneği:

plaintext
Kodu kopyala
HTTP/1.1 200 OK
Content-Type: application/json
Content-Length: 45

{
    "id": 1,
    "name": "Laptop",
    "price": 1200
}
3. HTTP Durum Kodları
Durum kodları, isteğin durumunu belirtmek için kullanılır.

3.1 1xx - Bilgilendirme Durum Kodları
Kod	Açıklama
100	Continue (Devam)
101	Switching Protocols
3.2 2xx - Başarılı Durum Kodları
Kod	Açıklama
200	OK (Başarılı)
201	Created (Kaynak oluşturuldu)
204	No Content (İçerik yok)
3.3 3xx - Yönlendirme Durum Kodları
Kod	Açıklama
301	Moved Permanently
302	Found (Geçici yönlendirme)
3.4 4xx - İstemci Hataları
Kod	Açıklama
400	Bad Request (Hatalı istek)
401	Unauthorized (Yetkilendirme gerekli)
404	Not Found (Kaynak bulunamadı)
3.5 5xx - Sunucu Hataları
Kod	Açıklama
500	Internal Server Error
502	Bad Gateway
503	Service Unavailable
4. Request ve Response Akışının Örnek Uygulaması
Bir Kullanıcı İsteği:
İstek: Kullanıcı, bir ürün listesi için tarayıcıdan /api/products adresine GET isteği gönderir.
Sunucu İşleme: Sunucu, veritabanından ürünleri çeker ve JSON formatında istemciye gönderir.
Yanıt: İstemci, sunucudan gelen 200 OK durum kodu ve JSON veriyle sonuç alır.
Tam Akış:

plaintext
Kodu kopyala
GET /api/products HTTP/1.1
Host: example.com
User-Agent: Mozilla/5.0

---

HTTP/1.1 200 OK
Content-Type: application/json

[
    { "id": 1, "name": "Laptop", "price": 1200 },
    { "id": 2, "name": "Phone", "price": 800 }
]
5. Özet
Request (İstek): İstemcinin sunucuya yaptığı talebi içerir.
Request Line: Metot, URI, HTTP versiyonu.
Headers: İstekle ilgili meta bilgiler.
Body: İsteğin ana verisi (opsiyonel).
Response (Yanıt): Sunucunun istemciye verdiği yanıttır.
Status Line: HTTP sürümü, durum kodu, açıklama.
Headers: Yanıtla ilgili meta bilgiler.
Body: Yanıtın içeriği.
Bu yapı sayesinde istemci ve sunucu arasında etkili ve düzenli bir iletişim sağlanır. 😊

RESTful API, REpresentational State Transfer (REST) mimarisine dayalı olarak tasarlanan bir Application Programming Interface (API) türüdür. REST, istemci ve sunucu arasında iletişim kurmak için kullanılan bir mimari tarzdır ve HTTP protokolü üzerinden veri alışverişi sağlar. RESTful API, bu mimari tarzı izleyerek çalışan bir web servisi veya API'dir.

1. REST'in Temel İlkeleri
REST mimarisi, Roy Fielding tarafından tanımlanmıştır ve aşağıdaki temel prensipleri içerir:

1.1 Kaynaklar (Resources)
REST'te her şey bir kaynak olarak tanımlanır. Kaynaklar; veritabanındaki bir ürün, kullanıcı, sipariş veya başka herhangi bir veri olabilir.
Her kaynak, benzersiz bir URI (Uniform Resource Identifier) ile tanımlanır.
Örnek URI'ler:
/api/products → Tüm ürünleri temsil eder.
/api/products/1 → Belirli bir ürünü (ID'si 1 olan) temsil eder.
1.2 HTTP Metotları
REST, kaynaklar üzerinde işlem yapmak için HTTP metotları kullanır. Her bir HTTP metodu belirli bir işlemi temsil eder:

Metot	Amaç	Örnek
GET	Veri almak (okuma işlemi)	/api/products
POST	Yeni kaynak oluşturmak	/api/products (Body ile)
PUT	Var olan kaynağı tamamen güncellemek	/api/products/1 (Body ile)
PATCH	Kaynağı kısmen güncellemek	/api/products/1 (Body ile)
DELETE	Kaynağı silmek	/api/products/1
1.3 Durumsuzluk (Statelessness)
REST, istemci-sunucu iletişiminin stateless (durumsuz) olmasını zorunlu kılar.
Her istek, sunucuya gerekli tüm bilgileri taşır. Sunucu, önceki isteklerin bilgisini tutmaz.
Avantajı: Daha basit ve ölçeklenebilir bir sistem sağlar.
1.4 Uniform Interface (Tutarlı Arayüz)
REST, kaynaklara tutarlı bir şekilde erişmek için standart bir arayüz sunar:

Kaynak URI'leri: Anlamlı ve açık URI'ler kullanılır.
/api/users → Kullanıcılar
/api/orders → Siparişler
HTTP Metotlarının Doğru Kullanımı: GET yalnızca veri almak için kullanılır, DELETE yalnızca veri silmek için kullanılır.
Self-Descriptive Messages (Kendini Tanımlayan Mesajlar): İstekler ve yanıtlar, gerekli tüm bilgileri içerir (örneğin, Content-Type başlıkları).
1.5 Caching (Önbellekleme)
REST, istemci-sunucu arasındaki bazı yanıtların önbelleğe alınmasına izin verir. Bu, performansı artırır.
Örnek: Bir ürün listesi değişmediği sürece istemcinin aynı yanıtı tekrar tekrar indirmemesi için Cache-Control başlığı kullanılabilir.
1.6 Katmanlı Mimari
REST, istemci ile sunucu arasında aracı katmanların (örneğin, proxy'ler veya yük dengeleyiciler) olmasını destekler.
İstemci, doğrudan sunucu ile mi yoksa bir ara katmanla mı iletişim kurduğunu bilmez.
2. RESTful API'nin Temel Yapısı
RESTful API, genellikle aşağıdaki yapıyı izler:

2.1 URI Tasarımı
Kaynaklar çoğul isimlerle ifade edilir:
/api/products → Tüm ürünler
/api/products/1 → ID'si 1 olan ürün
/api/users/2/orders → Kullanıcı 2'nin siparişleri
Anlamlı ve hiyerarşik URI'ler tercih edilir.
2.2 HTTP Durum Kodları
RESTful API, isteğin sonucunu belirtmek için HTTP durum kodları kullanır:

Kod	Açıklama
200	OK (Başarılı işlem)
201	Created (Yeni kaynak oluşturuldu)
204	No Content (İçerik yok, işlem başarılı)
400	Bad Request (Geçersiz istek)
401	Unauthorized (Yetkilendirme hatası)
403	Forbidden (Erişim yasak)
404	Not Found (Kaynak bulunamadı)
500	Internal Server Error (Sunucu hatası)
2.3 Request ve Response Yapısı
Request (İstek):
Headers (Başlıklar):
Content-Type: Gönderilen verinin türü.
Authorization: Kimlik doğrulama bilgisi.
Body (Gövde): İsteğin ana verisi.
Örnek POST İsteği:

plaintext
Kodu kopyala
POST /api/products HTTP/1.1
Content-Type: application/json
Authorization: Bearer <token>

{
    "name": "Laptop",
    "price": 1500
}
Response (Yanıt):
Headers (Başlıklar):
Content-Type: Dönen verinin türü.
Body (Gövde): Yanıtın asıl içeriği.
Örnek Yanıt:

plaintext
Kodu kopyala
HTTP/1.1 201 Created
Content-Type: application/json

{
    "id": 1,
    "name": "Laptop",
    "price": 1500
}
3. RESTful API'nin ASP.NET Core'da Uygulanması
3.1 Örnek API Endpoint Oluşturma
csharp
Kodu kopyala
[ApiController]
[Route("api/[controller]")]
public class ProductsController : ControllerBase
{
    private static List<Product> _products = new List<Product>
    {
        new Product { Id = 1, Name = "Laptop", Price = 1500 },
        new Product { Id = 2, Name = "Phone", Price = 800 }
    };

    [HttpGet]
    public IActionResult GetAllProducts()
    {
        return Ok(_products); // 200 OK
    }

    [HttpGet("{id}")]
    public IActionResult GetProductById(int id)
    {
        var product = _products.FirstOrDefault(p => p.Id == id);
        if (product == null)
        {
            return NotFound(); // 404 Not Found
        }
        return Ok(product);
    }

    [HttpPost]
    public IActionResult CreateProduct([FromBody] Product product)
    {
        product.Id = _products.Count + 1;
        _products.Add(product);
        return CreatedAtAction(nameof(GetProductById), new { id = product.Id }, product); // 201 Created
    }

    [HttpDelete("{id}")]
    public IActionResult DeleteProduct(int id)
    {
        var product = _products.FirstOrDefault(p => p.Id == id);
        if (product == null)
        {
            return NotFound();
        }
        _products.Remove(product);
        return NoContent(); // 204 No Content
    }
}

public class Product
{
    public int Id { get; set; }
    public string Name { get; set; }
    public double Price { get; set; }
}
4. RESTful API'nin Avantajları
Basitlik: HTTP protokolünü temel alır, anlaşılırdır.
Ölçeklenebilirlik: Stateless doğası, yüksek yükte ölçeklenebilirliği artırır.
Esneklik: Çeşitli veri formatları (JSON, XML, vb.) desteklenir.
Geniş Destek: Tüm modern istemci ve tarayıcılar HTTP/HTTPS üzerinden çalışabilir.
5. RESTful API'nin Zorlukları
Stateless Doğası: Her isteğin gerekli tüm bilgileri içermesi gerekir, bu da veri tekrarına yol açabilir.
Yüksek Trafik: Büyük veri alışverişlerinde performans sorunlarına yol açabilir.
Hata Yönetimi: Doğru hata kodlarını ve mesajlarını sağlamak ek çaba gerektirir.
RESTful API, modern web uygulamalarının vazgeçilmez bir parçasıdır ve standartları takip ederek etkili ve kolayca anlaşılabilir bir yapı sunar. ASP.NET Core ile bu yapıyı hayata geçirmek oldukça kolaydır ve güçlü araçlarla desteklenir. 😊

Bir React + Web API projesinde API, backend, sunucu ve veritabanı gibi kavramlar genellikle bir arada çalışır. Bu kavramların her biri farklı bir işlevi yerine getirir ve modern web uygulamalarında önemli bir rol oynar. Şimdi bu kavramları tek tek açıklayalım ve bir projede nasıl bir araya geldiklerini ele alalım.

1. API Nedir?
API (Application Programming Interface), iki farklı yazılım veya sistemin birbiriyle iletişim kurmasını sağlayan bir arayüzdür.

Ne Yapar?

İstemci (React) ile sunucu (Backend) arasındaki iletişimi sağlar.
Verileri alır, gönderir, günceller ve siler.
HTTP protokolü (GET, POST, PUT, DELETE) üzerinden çalışır.
Örnek Senaryo:

React uygulaması, bir kullanıcı listesi göstermek için bir API'ye GET /api/users isteği gönderir.
API, sunucuda çalışan backend kodunu çalıştırır ve sonuçları React'e döner.
2. Backend Nedir?
Backend, bir uygulamanın arka planda çalışan tarafıdır. Kullanıcıların doğrudan görmediği ama uygulamanın iş mantığını ve veri işlemlerini yöneten bölümdür.

Ne Yapar?

İş mantığını (business logic) yönetir.
Veritabanı işlemlerini yapar (örneğin, veriyi almak veya güncellemek).
API isteklerini işler ve istemciye yanıt döner.
Örnek:

React, bir API aracılığıyla /api/users isteğini gönderdiğinde backend bu isteği işler, veritabanından kullanıcı listesini alır ve React'e bir yanıt döner.
Backend'de Neler Kullanılır?

Programlama Dili: C#, Python, Node.js, Java, vb.
Framework: ASP.NET, FastAPI, Express.js, Django, vb.
3. Sunucu Nedir?
Sunucu, backend kodunun çalıştığı fiziksel veya sanal bir makinedir. Bir istemciden (örneğin, React uygulamasından) gelen istekleri alır, işler ve yanıt verir.

Ne Yapar?

Backend kodunu çalıştırır.
API'nin çalışmasını sağlar.
İstekleri karşılar ve uygun yanıtları döner.
Sunucu Türleri:

Fiziksel Sunucu: Bir veri merkezinde bulunan fiziksel bir makine.
Sanal Sunucu (VPS): Fiziksel bir sunucunun bölünmüş parçaları.
Bulut Sunucusu: AWS, Azure veya Google Cloud gibi sağlayıcılardan alınan sunucular.
Örnek:

Sunucu üzerinde çalışan bir ASP.NET Web API uygulaması, React'ten gelen GET /api/users isteğini işler.
4. Veritabanı Nedir?
Veritabanı, uygulamanın verilerini depolamak için kullanılan bir sistemdir.

Ne Yapar?

Kullanıcı bilgilerini, ürün listelerini, siparişleri veya başka herhangi bir veriyi saklar.
Backend uygulamaları veritabanı üzerinden veri okuma, yazma, güncelleme ve silme işlemlerini yapar.
Veritabanı Türleri:

RDBMS (İlişkisel Veritabanı): MySQL, SQL Server, PostgreSQL, vb.
NoSQL Veritabanı: MongoDB, Firebase, Redis, vb.
Örnek:

React uygulaması, API aracılığıyla kullanıcı verilerini almak istediğinde backend, veritabanından bu veriyi okur ve React'e döner.
React + Web API ile Proje Yapısında Bu Kavramların Yeri
Bir React + Web API projesi, istemci-sunucu mimarisi ile çalışır. Bu mimaride her bir bileşenin yeri ve işlevi şu şekildedir:

1. İstemci (React):
Ne Yapar?

Kullanıcı arayüzünü (UI) oluşturur.
Kullanıcıdan gelen girişleri işler.
API çağrıları yaparak backend ile iletişim kurar.
Kullanılan Teknolojiler:

React (veya başka bir frontend kütüphanesi).
Axios veya Fetch gibi HTTP istemcileri.
Örnek:

javascript
Kodu kopyala
const fetchUsers = async () => {
    const response = await fetch("https://example.com/api/users");
    const users = await response.json();
    console.log(users);
};
2. Backend (Web API):
Ne Yapar?

API isteklerini işler (GET, POST, PUT, DELETE).
İş mantığını uygular.
Veritabanıyla iletişim kurar.
Kullanılan Teknolojiler:

ASP.NET Web API, Node.js (Express), Python (FastAPI), vb.
Örnek ASP.NET Web API Controller:

csharp
Kodu kopyala
[ApiController]
[Route("api/[controller]")]
public class UsersController : ControllerBase
{
    [HttpGet]
    public IActionResult GetUsers()
    {
        var users = new List<User>
        {
            new User { Id = 1, Name = "John Doe" },
            new User { Id = 2, Name = "Jane Smith" }
        };

        return Ok(users);
    }
}
3. Sunucu:
Ne Yapar?

Backend kodunu çalıştırır.
İstemciden gelen istekleri alır ve backend’e yönlendirir.
Örnek Sunucu:

Backend uygulaması bir IIS (Internet Information Services) sunucusunda veya bir bulut platformunda çalıştırılabilir.
4. Veritabanı:
Ne Yapar?

Backend'den gelen veri okuma/yazma taleplerini işler.
Kalıcı veri depolar.
Örnek: SQL Server Veritabanından Veri Okuma

csharp
Kodu kopyala
[HttpGet]
public IActionResult GetUsersFromDb()
{
    using (var context = new AppDbContext())
    {
        var users = context.Users.ToList();
        return Ok(users);
    }
}
Tam Akış (React + Web API + Sunucu + Veritabanı)
Kullanıcı, React Uygulamasında Bir Butona Tıklar:

Kullanıcı bir listeyi görmek için "Tüm Kullanıcıları Göster" butonuna tıklar.
React, Web API'ye Bir İstek Gönderir:

React, GET /api/users isteğini gönderir:
javascript
Kodu kopyala
fetch("https://example.com/api/users").then(response => response.json());
Sunucu, Bu İsteği Backend'e Yönlendirir:

İstek, IIS sunucusuna gelir ve backend kodu (ASP.NET Web API) çalıştırılır.
Backend, Veritabanından Veriyi Çeker:

Backend, SQL Server veritabanına bağlanarak kullanıcı listesini alır:
sql
Kodu kopyala
SELECT * FROM Users;
Backend, İstemciye Yanıt Döner:

Backend, React uygulamasına şu yanıtı döner:
json
Kodu kopyala
[
    { "id": 1, "name": "John Doe" },
    { "id": 2, "name": "Jane Smith" }
]
React, Yanıtı İşler ve Kullanıcıya Gösterir:

React, dönen veriyi bir liste olarak ekranda gösterir.
Sonuç
Bir React + Web API projesinde:

React: Kullanıcı arayüzünü oluşturur, API çağrıları yapar.
Web API (Backend): React'ten gelen istekleri işler, iş mantığını uygular ve veritabanıyla iletişim kurar.
Sunucu: Backend uygulamasını çalıştırır ve istemci-sunucu iletişimini yönetir.
Veritabanı: Kalıcı veri depolar ve backend tarafından erişilir.

 bir React uygulamasına birden fazla API bağlamak mümkündür ve bu, modern web uygulamalarında oldukça yaygındır. Çeşitli API'lerin kullanılması, uygulamanızın farklı veri kaynaklarından veya işlevlerden yararlanmasını sağlar. Bu API'ler, hava durumu verileri, kullanıcı bilgileri, sosyal medya hizmetleri veya ödeme sistemleri gibi çeşitli servislerden veri alabilir.

Birden Fazla API'nin React Uygulamasına Bağlanması
Bir React uygulaması, çeşitli API'lerden veri çekebilir. Örneğin, bir e-ticaret sitesi, ürün bilgilerini almak için bir API, ödeme işlemlerini yönetmek için başka bir API ve kullanıcı yorumlarını göstermek için başka bir API kullanabilir. Bu API'ler, HTTP istekleri aracılığıyla veri alışverişi yapar ve React uygulaması bu verileri kullanıcı arayüzünde uygun şekilde gösterir.

Birden Fazla API Bağlantısı Nasıl Yapılır?
Birden fazla API ile çalışırken, her bir API için ayrı istekler yapılır. Bunlar genellikle fetch veya axios gibi kütüphaneler kullanılarak gerçekleştirilir. Her bir istekten dönen yanıtlar, React'ın state yönetimi araçları (örneğin, useState veya Redux) kullanılarak yönetilir.

Örnek: Axios ile Birden Fazla API'den Veri Çekmek

javascript
Kodu kopyala
import axios from 'axios';

class App extends React.Component {
  state = {
    weather: {},
    products: [],
    comments: []
  };

  componentDidMount() {
    this.fetchWeather();
    this.fetchProducts();
    this.fetchComments();
  }

  fetchWeather = () => {
    axios.get('https://api.weatherapi.com/v1/current.json?key=your_key&q=London')
      .then(response => {
        this.setState({ weather: response.data });
      })
      .catch(error => console.error('Error fetching weather:', error));
  };

  fetchProducts = () => {
    axios.get('https://api.example.com/products')
      .then(response => {
        this.setState({ products: response.data });
      })
      .catch(error => console.error('Error fetching products:', error));
  };

  fetchComments = () => {
    axios.get('https://api.example.com/comments')
      .then(response => {
        this.setState({ comments: response.data });
      })
      .catch(error => console.error('Error fetching comments:', error));
  };

  render() {
    return (
      <div>
        <h1>Weather: {this.state.weather.condition}</h1>
        <ul>
          {this.state.products.map(product => (
            <li key={product.id}>{product.name}</li>
          ))}
        </ul>
        <div>
          {this.state.comments.map(comment => (
            <p key={comment.id}>{comment.text}</p>
          ))}
        </div>
      </div>
    );
  }
}

export default App;
APİ'ler Birleşince Backend mi Olur?
Birden fazla API'nin kullanılması, bu API'lerin kendi başlarına bir "backend" oluşturduğu anlamına gelmez. Her bir API, kendi bağımsız backend sistemine sahiptir ve bu backend'ler kendi iş mantıklarını, veritabanı işlemlerini ve diğer işlemlerini yürütür. React uygulamanız, bu backend sistemlerin her biriyle ayrı ayrı iletişim kurar.

Özet:

Birden Fazla API: Bir React uygulaması, birden fazla dış API ile iletişim kurabilir.
API Bağımsızlığı: Her API, kendi backend servisine sahiptir.
Veri Entegrasyonu: React uygulaması, farklı API'lerden gelen verileri birleştirerek kullanıcıya sunabilir.
Birden fazla API kullanımı, uygulamanızı daha modüler ve esnek hale getirebilir, farklı servislerden yararlanmanıza olanak tanır ve uygulamanızın genişlemesine yardımcı olur.


REST (Representational State Transfer) mimarisi, web uygulamaları ve API'ler için oldukça yaygın bir tasarım yaklaşımıdır. REST içerisinde endpoint ve URL kavramları, verilerin nasıl organize edildiği ve erişildiği konusunda merkezi bir rol oynar. İşte bu kavramların ayrıntılı açıklamaları:

Endpoint Nedir?
Bir REST API'de endpoint, bir kaynağa yapılan API çağrılarının belirli bir URL'sidir. Bu, sunucu tarafında kaynakları ifade eden bir adresleme mekanizmasıdır. API endpoint'leri genellikle belirli bir kaynağa (örneğin bir kullanıcı, ürün, sipariş vs.) veya kaynak grubuna (kullanıcılar, ürünler, siparişler gibi çoğul formlar) işlem yapmak için kullanılır.

Özellikler:
Kaynak tabanlı bir adresleme sunar.
HTTP metodları (GET, POST, PUT, DELETE vb.) ile kullanılır.
İstemcinin, sunucudaki veriler üzerinde işlem yapmasını sağlar.
Endpoint Örnekleri:
Ürünlerin Listesini Getirme:

Endpoint: /api/products
HTTP Metodu: GET
Tek Bir Ürünü Getirme:

Endpoint: /api/products/{id}
HTTP Metodu: GET
{id}: URL'deki değişken bir parametredir ve spesifik bir ürünün ID'sini temsil eder.
Yeni Ürün Ekleme:

Endpoint: /api/products
HTTP Metodu: POST
Ürün Güncelleme:

Endpoint: /api/products/{id}
HTTP Metodu: PUT
Ürün Silme:

Endpoint: /api/products/{id}
HTTP Metodu: DELETE
URL (Uniform Resource Locator) Nedir?
URL, internet üzerinde bir kaynağın tam adresidir ve genellikle bir web sayfasını, görseli veya belgeyi ifade eder. REST API'lerde URL'ler, kaynakların tam konumlarını belirtmek için kullanılır ve genellikle sunucunun domain adı ve endpoint'in birleşiminden oluşur.

Özellikler:
Tam yol bilgisini içerir.
Şemayı (http, https), sunucu adresini (domain/IP), port numarasını ve path'i içerebilir.
URL Örneği:
https://api.example.com/api/products
Burada:
https: Protokol
api.example.com: Domain adı
/api/products: Endpoint path'i
Endpoint ve URL Arasındaki Farklar:
Endpoint: API'nin belirli bir fonksiyonuna veya kaynağına işaret eder. Genellikle API'nin yapısal bir parçası olarak görülür ve path ile HTTP metodunun kombinasyonunu içerir.
URL: Bir kaynağın tam internet adresidir. Protokol, host ve path bilgilerini içerir ve genel internet adresleme standardını takip eder.
Endpoint ve URL Kullanımı:
Bir RESTful API tasarlarken, URL'lerin ve endpoint'lerin düzenli ve mantıklı bir yapıda olması önemlidir. Kaynaklar çoğul adlarla ifade edilmeli, kaynaklar arası ilişkiler URL yapılarında mantıklı bir hiyerarşi oluşturacak şekilde tasarlanmalıdır. Ayrıca, URL'lerin ve endpoint'lerin sade ve anlaşılır olması, API'nin kullanılabilirliğini artırır ve geliştiricilere kolaylık sağlar.













........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
HTTP.
istemci bir tarayıcı bir mobil cihaz ya da herhangi bir uygulama olabilir bir request gelir server'a. Sunucu bu isteği değerlendirir ve birr sonuç döner buna response denir.

request istek, response istek sonucu oluşan sonuçtur.

mesela post isteği gidiyor içerik başlık, header(mesela metnin uzunluğunu tutar),Body gibi alanlar vardır.
bir response geldi sonra mesela 201 status kod ile. content type olarak text dedi mesela headerde mesela. bodyDe ise gönderilen bilgi mesela.
istemcideki bir bilgi sunucu tarafında oluştu post ile mesela ve bir dönüş yapıldı 201 ile başarılı anlamında.

stateless olma durumu şudur: sunucu her gelen isteğe karşı daha önce istek gelmemiş gibi davranır durumsuzluk yani bir istemcinin geçmişini tutmama durumu.


        REQUEST YAPISI:.....

        http'nin verb kısmı(get,post,put,patch,delete)  
            get bilgi alma httpget. sunucudan istemciye bilgi çekme.
            istemcideki bir bilgiyi sunucuya atmak için httppost. 


        headerlar özellikle api'da önemli olacak ama mvc'de çok önemli değil.  
            istek hakkında üst (meta) bilgiler:
            • Content Type
                • İçeriğin formatı (json,xml,csv,text vs) gibi bunları belirtir.
            • Content Length
                • İçeriğin boyutu (ne kadar alan kaplıyor metin uzunluğu vs gibi bilgiler.)
            • Authorization
                •İsteği yapanın kimliği


        content kısmı http'nin
            İstek ile ilgili içerik:
            • HMTL, CSS, JavaScript, XML, JSON
            • Bazı eylemler ile geçerli olmayan içerik
            • Binary ve blobs common(.jpeg) gibi.


        RESPONSE YAPISI...

        status code: 
            Operasyon Durumları
            • 109-199
            • Bilgi (Information)
            
            • 200- 299 // 201 mesela veri kaydedildi gibi bir bilgi.
            • Başarı (Success)
            
            • 300- 399
            • Yeniden yönlendirme (Redirection)
            
            • 400 - 499
            • İstemci hataları (Client errors)
            
            • 500-599
            • Sunucu hataları (Server errors)

        headers: 
            istek hakkında üst (meta) bilgiler:
            • Content Type
            • İçeriğin formatı
            • Content Length
            • İçeriğin boyutu
            • Expires
            • Ne zaman geçersiz sayılır.

        content: 
            içerik:
            • HTML, CSS, JavaScript, XML, JSON
            • Binary ve blobs common (.jpg)
            • API'Iarın kendi türleri


Bir request (istek), istemci (client) ile sunucu (server) arasında bir iletişim işlemidir. İstemci, bir sunucuya belirli bir işlem için bir talepte bulunur ve sunucu bu isteğe bir yanıt (response) döndürür. Bu iletişim genellikle HTTP veya HTTPS protokolü üzerinden gerçekleşir ve web uygulamaları, API'ler veya diğer ağ tabanlı uygulamalar arasında veri alışverişi sağlamak için temel bir mekanizmadır.

1. Request’in Temel Mantığı
Request, istemciden (örneğin, bir tarayıcı veya mobil uygulama) bir sunucuya bilgi veya işlem için bir mesaj gönderir. Bu mesaj aşağıdaki bileşenlerden oluşur:

1.1 HTTP Request’in Yapısı
Request Line (İstek Satırı):

İstek türünü (HTTP Method), hedef URI'yi ve HTTP versiyonunu belirtir.
Örnek:
bash
Kodu kopyala
GET /api/products HTTP/1.1
Headers (Başlıklar):

İstekle ilgili meta veriler içerir. Örneğin, içerik türü, yetkilendirme bilgileri, tarayıcı bilgileri.
Örnek:
less
Kodu kopyala
Content-Type: application/json
Authorization: Bearer <token>
Body (Gövde):

Genellikle POST, PUT, PATCH gibi metodlarla gönderilir. Gövde, isteğin asıl verisini içerir.
Örnek:
json
Kodu kopyala
{
  "name": "Laptop",
  "price": 1500
}
2. HTTP Request Türleri (HTTP Methods)
HTTP istekleri farklı türlerde olabilir ve her bir tür, belirli bir işlemi temsil eder.

GET:

Sunucudan veri almak için kullanılır.
Body içermez.
Örnek:
http
Kodu kopyala
GET /api/products HTTP/1.1
POST:

Sunucuya yeni veri eklemek için kullanılır.
Gövde (body) içerebilir.
Örnek:
http
Kodu kopyala
POST /api/products HTTP/1.1
Content-Type: application/json

{
  "name": "Laptop",
  "price": 1500
}
PUT:

Sunucudaki bir kaynağı güncellemek için kullanılır. Genellikle tüm kaynağı günceller.
Örnek:
http
Kodu kopyala
PUT /api/products/1 HTTP/1.1
Content-Type: application/json

{
  "name": "Updated Laptop",
  "price": 1600
}
PATCH:

Sunucudaki bir kaynağın belirli alanlarını güncellemek için kullanılır.
Örnek:
http
Kodu kopyala
PATCH /api/products/1 HTTP/1.1
Content-Type: application/json

{
  "price": 1400
}
DELETE:

Sunucudaki bir kaynağı silmek için kullanılır.
Örnek:
http
Kodu kopyala
DELETE /api/products/1 HTTP/1.1
3. Request ile Çalışma Süreci
3.1 Genel Süreç
İstemci (Client):

Bir tarayıcı, mobil uygulama veya başka bir istemci, sunucuya bir istekte bulunur.
Örneğin, bir kullanıcı bir tarayıcıda bir URL'ye gider.
Sunucu (Server):

Sunucu, bu isteği alır ve işler.
Gerekirse veritabanından veri alır, işlemi tamamlar ve bir yanıt döner.
Yanıt (Response):

Sunucu, istemciye bir yanıt döner. Bu yanıt bir HTTP durum kodu (ör. 200 OK, 404 Not Found) ve isteğe uygun bir veri içerebilir.
4. C# ile Request Mantığı
C#’da bir HTTP isteği oluşturmak için genellikle HttpClient sınıfı kullanılır. Bu sınıf, HTTP isteklerini kolayca yapmanıza olanak tanır.

4.1 GET İsteği
csharp
Kodu kopyala
using System;
using System.Net.Http;
using System.Threading.Tasks;

class Program
{
    static async Task Main()
    {
        using (HttpClient client = new HttpClient())
        {
            HttpResponseMessage response = await client.GetAsync("https://api.example.com/products");
            response.EnsureSuccessStatusCode();

            string responseData = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseData);
        }
    }
}
4.2 POST İsteği
csharp
Kodu kopyala
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

class Program
{
    static async Task Main()
    {
        using (HttpClient client = new HttpClient())
        {
            var jsonContent = new StringContent("{\"name\": \"Laptop\", \"price\": 1500}", Encoding.UTF8, "application/json");

            HttpResponseMessage response = await client.PostAsync("https://api.example.com/products", jsonContent);
            response.EnsureSuccessStatusCode();

            string responseData = await response.Content.ReadAsStringAsync();
            Console.WriteLine(responseData);
        }
    }
}
5. Request Headers
Request başlıkları (headers), istemci ve sunucu arasında ek bilgiler taşır.

Sık Kullanılan Headers
Authorization: Kimlik doğrulama bilgisi içerir.
makefile
Kodu kopyala
Authorization: Bearer <token>
Content-Type: Gönderilen verinin türünü belirtir.
bash
Kodu kopyala
Content-Type: application/json
Accept: İstemcinin kabul edebileceği veri türlerini belirtir.
bash
Kodu kopyala
Accept: application/json
C# Örneği: Header Kullanımı

csharp
Kodu kopyala
client.DefaultRequestHeaders.Add("Authorization", "Bearer <token>");
client.DefaultRequestHeaders.Add("Accept", "application/json");
6. Query String ile Veri Gönderme
GET isteğinde parametreler genellikle URL içinde query string olarak gönderilir.

Örnek:

http
Kodu kopyala
GET /api/products?category=electronics&price=1000 HTTP/1.1
C# ile:

csharp
Kodu kopyala
var url = "https://api.example.com/products?category=electronics&price=1000";
HttpResponseMessage response = await client.GetAsync(url);
7. Request ve Response Durum Kodları
Sunucu yanıtları, isteğin durumunu belirtmek için HTTP durum kodları içerir.

Durum Kodları
2xx (Başarılı): İşlem başarıyla tamamlandı.
200 OK: İstek başarıyla tamamlandı.
201 Created: Yeni bir kaynak oluşturuldu.
4xx (İstemci Hatası): İstek hatalı.
400 Bad Request: Hatalı istek.
401 Unauthorized: Yetkilendirme hatası.
404 Not Found: Kaynak bulunamadı.
5xx (Sunucu Hatası): Sunucu hatası.
500 Internal Server Error: Sunucuda bir hata meydana geldi.
8. JSON ve Gövde Verileri
Çoğu request, JSON formatında veri gönderir veya alır. JSON, hafif bir veri değişim formatıdır ve modern web API'lerde sıkça kullanılır.

JSON Örneği:

json
Kodu kopyala
{
    "name": "Laptop",
    "price": 1500
}
C# ile JSON Gönderimi:

csharp
Kodu kopyala
var jsonContent = new StringContent("{\"name\": \"Laptop\", \"price\": 1500}", Encoding.UTF8, "application/json");
9. Request Mantığının Özet İş Akışı
İstemci bir HTTP isteği (GET, POST, PUT, DELETE) oluşturur.
Sunucu isteği alır ve işler.
Sunucu bir yanıt oluşturur (örneğin, bir veri veya hata mesajı).
İstemci bu yanıtı işler ve kullanıcıya sunar.

HTTP ve HTTPS Nedir?
HTTP (HyperText Transfer Protocol), web üzerinde istemci (client) ve sunucu (server) arasında veri alışverişini sağlayan bir protokoldür. HTTPS ise HTTP'nin güvenli bir versiyonudur ve iletişimi şifrelemek için SSL/TLS kullanır.

HTTP ve HTTPS Farkları
Özellik	HTTP	HTTPS
Güvenlik	Güvenli değildir. Veriler açık şekilde iletilir.	Güvenlidir. Veriler SSL/TLS ile şifrelenir.
Port	80	443
Sertifika	Sertifika gerektirmez.	SSL/TLS sertifikası gerektirir.
Performans	Daha hızlıdır (şifreleme yok).	Şifreleme nedeniyle HTTP'ye göre biraz daha yavaş.
Kullanım Alanı	Test sunucuları veya güvenli olmayan bağlantılar.	E-ticaret, bankacılık, kullanıcı verisi içeren uygulamalar.
ASP.NET'de HTTP ve HTTPS Kullanımı
ASP.NET uygulamalarında, HTTP veya HTTPS protokollerinden hangisinin kullanılacağını yapılandırmak mümkündür. HTTPS genellikle güvenlik gerekçesiyle tercih edilir.

1. HTTPS'yi ASP.NET'de Zorunlu Hale Getirme
Web uygulamanızın tüm isteklerinin HTTPS üzerinden yapılmasını zorunlu hale getirebilirsiniz.

ASP.NET Core'da UseHttpsRedirection Kullanımı

csharp
Kodu kopyala
public class Startup
{
    public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
    {
        app.UseHttpsRedirection(); // HTTP isteklerini HTTPS'ye yönlendirir
        app.UseRouting();
        app.UseEndpoints(endpoints =>
        {
            endpoints.MapControllers();
        });
    }
}
2. HSTS (HTTP Strict Transport Security)
HSTS, tarayıcıya bu web sitesine yalnızca HTTPS üzerinden bağlanmasını söyler.

ASP.NET Core'da HSTS Aktifleştirme

csharp
Kodu kopyala
public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
    if (!env.IsDevelopment())
    {
        app.UseHsts(); // HSTS'yi etkinleştirir
    }
    app.UseHttpsRedirection();
    app.UseRouting();
}
3. Sertifika Yapılandırması
ASP.NET Core'da, HTTPS için bir SSL sertifikası yapılandırabilirsiniz.

Development Sertifikası Kullanma

bash
Kodu kopyala
dotnet dev-certs https --trust
Bu komut, geliştirme sırasında kullanılacak bir SSL sertifikası oluşturur.

HTTP ve HTTPS Durum Kodları
Durum kodları, sunucunun istemciden gelen isteği nasıl işlediğiyle ilgili bilgi verir. HTTP ve HTTPS protokolü aynı durum kodlarını kullanır.

1xx - Bilgilendirme Amaçlı Durum Kodları
Kod	Açıklama
100	Continue (Devam)
101	Switching Protocols
2xx - Başarılı Durum Kodları
Kod	Açıklama
200	OK (Başarılı)
201	Created (Kaynak oluşturuldu)
202	Accepted (İstek kabul edildi)
204	No Content (İçerik yok)
3xx - Yönlendirme Durum Kodları
Kod	Açıklama
301	Moved Permanently (Kalıcı olarak taşındı)
302	Found (Geçici yönlendirme)
304	Not Modified (Değişiklik yok)
4xx - İstemci Hataları
Kod	Açıklama
400	Bad Request (Hatalı istek)
401	Unauthorized (Yetkilendirme gerekli)
403	Forbidden (Erişim yasak)
404	Not Found (Bulunamadı)
5xx - Sunucu Hataları
Kod	Açıklama
500	Internal Server Error (Sunucu hatası)
502	Bad Gateway (Geçersiz ağ geçidi)
503	Service Unavailable (Servis kullanılamıyor)
Durum Kodları ile ASP.NET Kullanımı
ASP.NET uygulamalarında durum kodlarını ayarlamak ve kontrol etmek kolaydır.

Örnek: Durum Kodu Döndürme
csharp
Kodu kopyala
[HttpGet]
public IActionResult GetData()
{
    if (data == null)
    {
        return NotFound(); // 404 Durum kodu döndürür
    }

    return Ok(data); // 200 Durum kodu döndürür
}
Örnek: Özel Durum Kodu Ayarlama
csharp
Kodu kopyala
[HttpPost]
public IActionResult CreateItem(Item item)
{
    if (!ModelState.IsValid)
    {
        return BadRequest(ModelState); // 400 Durum kodu döndürür
    }

    return StatusCode(201, item); // 201 Created döndürür
}
ASP.NET'de HTTP ve HTTPS Kullanım İpuçları
HTTPS Zorunluluğu: Tüm üretim ortamlarında HTTPS kullanımı zorunlu olmalıdır.
HSTS Kullanımı: HTTP bağlantılarını tamamen devre dışı bırakmak için HSTS'yi etkinleştirin.
Durum Kodlarını Doğru Kullanma: İstemci uygulamalarının doğru işlem yapabilmesi için doğru durum kodlarını döndürün.
SSL Sertifikası: Sertifika yönetimini doğru yaparak güvenli bir bağlantı sağlayın.
Sonuç
HTTP ve HTTPS, istemci-sunucu iletişiminin temel protokolleridir, ancak HTTPS güvenlik açısından HTTP'ye göre daha üstündür.
ASP.NET uygulamalarında, HTTPS’yi kolayca etkinleştirebilir ve durum kodlarını doğru şekilde yönetebilirsiniz.
Durum Kodları, istemcilerin sunucunun durumu hakkında bilgi edinmesini sağlar. Bunların doğru kullanımı hem API tasarımı hem de kullanıcı deneyimi için önemlidir.

REST mimari stiline uygun API'lere REST API'ler adı verilir. REST mimarisini uygulayan web hizmetlerine RESTful web hizmetleri adı verilir. RESTful API terimi genellikle RESTful web API'lerini ifade eder. Bununla birlikte, REST API ve RESTful API terimlerini birbirinin yerine kullanabilirsiniz.

RestFul api design. 
önce api tasarlayın. isimler ve fiiller. url tasarımı. durum kodları sonuçların tasarlanması.

rest = bir fiilimiz olacak ve fiil üzerinden haraket edicez bu fiili kullanmak için bir endpoint yani url Query string ne dersen kullanacağız.  Headers kullanacağız isteğe ait olan bilgileri tutacağız. Request Body ise kaynak ifadesi olabilir.
istemci bu bileşenlerle sunucuya gidiyor url üzerinden. sunucu okuyup bir sonuç dönecek.
istemci ve sunucu araasındaki kaynakların exchange edilmesi rest olayıdır. kaynağın değiş tokuş edilmesi denebilir. 
api bir status kodu üreticek response içerisinde. Headeri olacak ve üst bilgileri burada getirecek gerekirse body ile veriler getirecek.  

rest uygun bir endpoint tasarımı. urller kaynakların sadece bir parçasıdır. 
     ./books    -> kitapların kaynağı,listesi.
     ./books/lastest  -> son kitaplar veya  ./books/lastest/10   ile son 10 kitap veya sondan 10. kitap gibi diyebiliriz.  
     ./books/mostread  -> kitaplardan en çok okunan gibi o gelecek bize.

isimler(nouns) iyi, fiiler kötü
./getBooks değil ./Books olmalı mesela 
./getCategories değil ./Categories olmalı.

uri içerisinde tanımlayıcılar kullanabiliriz.
./books/1(anahtar veri mesela)
./books/bs-101 mesela  
                   
Query String. kaynak olmayan özellikler için query string kullanın.
./books?sort = title     başlığa göre sırala demek.
./books?page = 1          bir nolu sayfa lazım 
./books?pageNumber = 1 & pageSize = 10    sayfa numarası 1 ve size'sı 10 olanı getir manası var. birden fazla ifade üzerinde de çalışabiliriz.

verb's ve uri's
/books               get ile tüm kitapları listeler. post ile kitap oluştur. put ile kitapları toplu olarak güncelle. delete hata.
/books/10           kitap getir 10 nolu. post hata verir. put kitabı günceller 10 nolu olan. delete 10 nolu kitabı siler.


Idempotent
    Sonucu değiştirmeden defalarca uygulanabilen işlemi ifade eder. bir kaynağa post ile istek gönderdik kaynak oluştu aynı isteği yine gönderdik sonuç değişir bir kez daha kaynak oluşur.

Idempotency
    işlem sonuçları get,put,patch,delete eyleminde aynıdır.
    post Idempotent değildir. kaynak tarafında bir değişikliğe neden olur.

• Sonuçların kendini tanımlamasını sağlayınız.
• Programlı gezinmeye izin veriniz.
• Sayfalama, sıralama, filtreleme ve arama desteği sağlayınız.
• Önbellek desteği sununuz. böylece api'nin yükünü azaltabiliriz.
• Sorgu sınırı getiriniz. kötü amaçlı kullanımı engelleyebiliriz stresi azaltabiliriz.
• Veri şekillendirmesi sağlayınız.
• Versiyonlama yapınız.
• Belgelendirmeye özen gösterin.

Hypermedia
    Hipermedya yardımcı olabilir. Ancak pragmatizm, çoğu projenin buna ihtiyaç duymadığı anlamına gelir.
    tasarım iyi olursa bu desteği sonradan bunu katabiliriz.
    en yüksek olgunlaşma seviyesidir api için..

Level 0 = one url, all operations post
Level 1 = birden fazla URI var.
Level 2 = birden fazla uri ve http metotlarını da destekleriz. get post delete gibi verblerle gidebiliriz. 
Level 3 = HATEOAS, Hypermedia kullanımı. linkler dinamik olarak üretiliyor. api'ı n keşfedilebilirlik konusu ortaya çıkıyor.

api yayınlandıktan sonra değiştirilmemeli ve iyi tasarlanmış bir api olgunlaşabilir.


curl'ü cmd üzerinde kullanmak en sağlıklısıdır.
curl = client url. unix sistemlerde mevcut komuttur.  curl komutları url'lerin bağlanabilirliğini kontrol etmek ve veri transferi için iyi bir araçtr. curl istemci tarafındaki url transfer kütüphanesidir. http,https,ftp,IMAP,IMAPS, SMTP, SMTPS,TELNET,GOPHER,LDAP,LDAPS gibi protokolleri destekler.
cmd üzerinden curl --help ile detaylı bilgi alabiliriz. curl https://api.github.com  bir response gelecek bize bunun karşılığında.
curl https://api.github.com/user gönderirsek bize bir authentication gerekir diyecektir.
curl -i https://api.github.com/user    -i include demektir. responsenin headerlarınıda getirecektir bize. 
-i ile headers'taki bilgileride katabiliriz.
-I yaparsak eğer body'i göstermez sadece header kısmını gösterir.
url'ler tanımlayıcı kullanabilir. curl https://api.github.com/user/emreaytas ile tek kullanıcıyı alabiliriz.  
curl https://api.github.com/user/emreaytas/repos  ile kullanıcılardan bir kullanıcının repolarını görebiliriz.
curl postman swaggerde api testi yaparken istekleri organize edecek gerekli parametreleri verecek olan araç. 


dotnet core ui aracı bir arayüz ile proje oluşturma sağlar cli ise komut satırından proje oluşturma demektir.
--aspnet core web api açacağız. linux macos cloud service desteği olanı seçicez.      projeyi istediğimiz path'e ekleyebiliriz.
solution projeler barındıran bir kaptır aslında. birden fazla projeyi onun çatısı altında kurabiliriz. projeleri referans ile birbiri ile haberleştirebiliriz.

solution'un olduğu yerde cmd ekranı açtık. klasör path'inin olduğu yere cmd yazarak açtık.
dotnet new --help ile bilgi alabiliriz.
dotnet cli komut satırı üzerinden proje oluşturma yönetme gibi işlemler için kullanılır.

dotnet new webapi -o hello_world_cli  .. ile hello_world_cli adında bir webapi projeyi oluşturduk bulunduğumuz path üzerinde. 
dotnet new webapi -f net6.0 -o hello_world_cli2   .. istediğimiz versiyon ile oluşturduk. hello_world_cli2 adında bir proje oluşturduk.
dotnet run ile çalıştırabiliriz.

dotnet run diyip çalıştırdık  sonra bize bir ana link geldi üzerine /weatherForecast ekleyince bize bir sonuç döndü bu api https://localhost:7183/weatherForecast
............. set as Startup scope this ile birden fazla proje varsa bir solution içinde çalışmak istediğimiz projeyi seçebiliriz.

...................launchsettings dosyası. 

  "$schema": "https://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:24506",
      "sslPort": 44331
    }
  },
  "profiles": {
    "webapi1": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger",
      "applicationUrl": "https://localhost:7272;http://localhost:5010",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "swagger",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}


................... api mvc gibidir. ama view kısmı yoktur. view frontend olacak burada. api'nin içinde model ve controller olacak. viewler ise başka cihazlarda başka yerlerde olacak onlar bize request atacak ona göre bir yapı olacak.
controller uygulamanın mantığının olduğu yer. model ise nesnelerin nelere sahip olduğu vs ve veritabanı işlemleri.
controllerlarımız modele göre çalışacak.

............Program.cs
var builder = WebApplication.CreateBuilder(args); // bir inşa edicidir. bir konteynıra servisler vs kurabiliriz.

builder.Services.AddControllers(); // servislere Controller eklemiş .
 
builder.Services.AddEndpointsApiExplorer(); // endpoint explorer eklemiş konteynıra.
builder.Services.AddSwaggerGen();  // servis kaydıdır buda.

var app = builder.Build(); // konteyner bir webapplication dönüyor bize. eklediklerimizle beraber inşa oluyor.

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment()) // hangi ortamda çalıştığına göre konfigüre edebiliriz. buda launchsettings ile alakalı bir durum. onunla değişim yapabiliriz.
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

app.UseHttpsRedirection(); // kayıtlarını yaptımığımız servisleri aktive ederiz. bu yapı ile.

app.UseAuthorization();

app.MapControllers(); 
app.Run(); // uygulamayı çalıştırır.
.....................................


ASP.net core Empty oluşturup inceleyelim...
........Program.cs dosyası.

var builder = WebApplication.CreateBuilder(args); / proje konteynırı.
var app = builder.Build(); // bunu oluşturup ele aldık konteynırı.

app.MapGet("/", () => "Hello World!"); // kök olan link başlayınca bize döneceği değer. köke bir request gelirse dönecek olan response'yi belirtmişiz burada.
// bunu silersek köke istek gidecek ama bir repsonse olmayacağı için bir şey gözükmeyecek. Not found dönecek.

app.Run(); // uygulamayı canlıya alır.
........................ 
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers(); // controller ekledik.
builder.Services.AddEndpointsApiExplorer(); // Controllerları keşfetmesini ssağlayacağız.
builder.Services.AddSwaggerGen(); // boş asp'de swagger gelmez.
                               // manage nuget packageden Swagger'ı yükleyeceğiz. Swashbuckle.AspNetCore.SwaggerGen ve Swashbuckle.AspNetCore.SwaggerUI yükledik.


var app = builder.Build(); // build olunca bir web app gelecek app içerisine.

app.UseSwagger(); // swagger ve onun arayüzünü kullanmaya müsade ederiz.
app.UseSwaggerUI();
app.MapControllers(); // Controllerslar için map mekanizmasını kullanmamızı sağlar. analink/home url'sinde bir sonuç alabilemek için şarttır.

app.Run();
........................başlangıçta anaurl/swagger olması için. launchsettings'de değişim yaptık...
{
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:27478",
      "sslPort": 44396
    }
  },
  "profiles": {
    "asp2": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger", // başlangıç url'inin üstüne /swagger eklenecek ve o launch url olacak. 
      "applicationUrl": "https://localhost:7195;http://localhost:5048",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}

.................. Boş bir şablon olduğu için controllers klasörü ekleriz.  Controller içerisine HomeController ekledik sonra Model klasörü kurduk ve ResponseModel adında bir .cs oluşturduk

using Microsoft.AspNetCore.Mvc; // ControllerBase kullanabilmek için.
using asp2.Models;

namespace asp2.Controllers
{

    [ApiController] // default hata,binding özelliklerini kullanmamızı sağlar.
    [Route("home")] // Controller içerisindeki eylemlere erişebilmek için böyle bir yol belirlememiz lazım. analink/home ile bu kontrollera erişebiliriz.
    public class HomeController :ControllerBase // ControllerBase'den kalıtım alırız.
    {

        [HttpGet] // sunucudan istemciye bilgi alışı olacak böylece. 
        public ResponseModel GetMessage() // IActionResult kullanabiliriz aslında IActionResult kullanmak en iyisidir. bütün yapıları destekleyen bir yapıdır.
        {
            return new ResponseModel()
            {
                HttpStatusCode = 200,
                Message = "merhaba"
            };

/*
            var result =  new ResponseModel()
            {
                HttpStatusCode = 200,
                Message = "merhaba"
            };
           return Ok(result); // başarılı bir işlemse Ok() ile dön demektir.  istenen verinin kullanıcya dönüleceğini belirten yapı. 
           // hatalı olsaydı BadRequest() kullanabilirdik vs vs. NotFound vs 

*/ // IActionResult'ta kullanılacak yapı budur direk return new ResponseModel yapamayız IActionResult'ta

        }

    }
}

.................... analink/home  yaparsak bize bir  json dosyası dönecek nesnenin özelliklerini json dosya formatına çevirip bize getiecek.
{
  "httpStatusCode": 200,
  "message": "merhaba"
} 


Development ,staging , Production ortamları yani ortam değişkenleri.
launchsettings kkısmında hangi yapı ile yayına girecek bununla girince ne olacak bunu belirleyebiliriz.

Development Productin vs bunlar modlardır. biz hangi modda olduğumuza göre programı yönetebiliriz mesela Development modda sqlite'a göre çalış Production modda mssql'e göre çalış vs diyebiliriz.

...............launchsettings.json içerisinde de Production ve Development farklılıkları yaptık iss Production oldu.

{
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:27478",
      "sslPort": 44396
    }
  },
  "profiles": {
    "asp2": {
      "commandName": "Project",
      "dotnetRunMessages": true,
      "launchBrowser": true,
      "launchUrl": "swagger", // başlangıç url'inin üstüne /swagger eklenecek ve o launch url olacak. 
      "applicationUrl": "https://localhost:7195;http://localhost:5048",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Production" // Production modu ile çalışsın dedik ISS ile çalışırsa app.
         
      }
    }
  }
}


...............Program.cs
var builder = WebApplication.CreateBuilder(args);
builder.Services.AddControllers(); // controller ekledik.
builder.Services.AddEndpointsApiExplorer(); // Controllerları keşfetmesini ssağlayacağız.
builder.Services.AddSwaggerGen(); // boş asp'de swagger gelmez.
                               // manage nuget packageden Swagger'ı yükleyeceğiz. Swashbuckle.AspNetCore.SwaggerGen ve Swashbuckle.AspNetCore.SwaggerUI yükledik.


var app = builder.Build(); // build olunca bir web app gelecek app içerisine.

if (app.Environment.IsDevelopment()) // eğer Development modda isek swagger çalışacak yoksa çalışmayacak.
{ 

    app.UseSwagger(); // swagger ve onun arayüzünü kullanmaya müsade ederiz.
    app.UseSwaggerUI();

}

app.MapControllers(); // Controllerslar için map mekanizmasını kullanmamızı sağlar. analink/home url'sinde bir sonuç alabilemek için şarttır.


app.Run();

.........launchsettings.json dosyasına launchsettings.Development.json  ve launchsettings.Production.json   ekleyerek biz farklı farklı komutlar verebiliriz hem Development hemde Production modu için. 


..Logging

yeni bir web api oluşturduk. .net6.0 ile.
....Models klasörü oluşturduk içerisine özelliklerini ekledik. sonra ise controller ekledik add controller dedik api alanından empty olanı seçtik.


        using aspwebapi3.Models;
        using Microsoft.AspNetCore.Http;
        using Microsoft.AspNetCore.Mvc;
        using aspwebapi3.Models;

        namespace aspwebapi3.Controllers
        {

            [Route("api/products")]
            [ApiController]
            public class ProductController : ControllerBase
            {

                // bir ifade readonly olursa eğer değeri ya constructor'da ya da direkt olduğu yerde atama olabilir başka yerde olamaz. 
                private readonly ILogger<ProductController> _logger;

                public ProductController(ILogger<ProductController> logger)
                {
                    _logger = logger; // newleme işlemi yapmadan atama yaparız aslında dışarıdan getiririz gelecek olanı..

                } // Bu yapı Dependency injection'dır. bağımlılık dışarıdan gelecektir.

                [HttpGet]
                public IActionResult GetAllProducts() {
                    var products = new List<Product>()
                    {
                        new Product(){Id = 1 ,ProductName = "A"},
                        new Product(){Id = 2 ,ProductName = "B"},
                        new Product(){Id = 3 ,ProductName = "C"},
                    };

                    
            _logger.LogInformation("GetAllProducts çağrıldı"); // bir loglama ifadesi yazıldı. _logger içine.
            // debug'da consolda veritabanında vs bu log'u düşürebiliriz.  yani bilgilendirme yapabiliriz bu sistemle. 

                    return Ok(products);
                
                }

            }

        }

.................... Loglama için appsettings ayarı.
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning" // Microsoft paketleri warning seviyesinde loglarız böylece. 
    
    }
  },
  "AllowedHosts": "*"
}

.....................Loglama için Program.cs ayarları.
    var builder = WebApplication.CreateBuilder(args);


    builder.Services.AddControllers();
    builder.Services.AddEndpointsApiExplorer();
    builder.Services.AddSwaggerGen();


    builder.Logging.ClearProviders(); // Default olarak çerçeve bize loglama mekanizması verir böylece.
    builder.Logging.AddConsole(); // Consola log düşer.
    builder.Logging.AddDebug(); // Debug ortamına log düşmek istediğimizi belirttik.


    var app = builder.Build();



    if (app.Environment.IsDevelopment())
    {
        app.UseSwagger();
        app.UseSwaggerUI();
    }

    app.UseHttpsRedirection();

    app.UseAuthorization();

    app.MapControllers();

    app.Run();
................................


        [HttpPost]
        public IActionResult GetAllProducts([FromBody] Product product) // Request'in bodyS2inden gelicek veri.
        {
            
            _logger.LogWarning("Nesne oluştu.");
            return Ok(product);

        }

............
appsettings.json
  -appsettings.Development.json
  -appsettings.Production.json  
// böylece Development ve Production için ayrı ayrı konfigüre edebiliriz sistemi.

...Modeller ve http ile çalışma


// veritabanı yerine kullanacağımız verileri tutan static class.
using bookDemo.Models;
namespace bookDemo.Data
{
    public static class ApplicationContext
    { // nesne direkt olarak bellekte oluşur.

        public static List<Book> Books { get; set; }

        static ApplicationContext()
        {

            Books = new List<Book>()
            {
                new Book(){Id = 1,Title = "Emre",Price = 100},
                new Book(){Id = 2,Title = "Ford",Price = 110},
                new Book(){Id = 3,Title = "Focus",Price = 120}

            };

        } // static class'ımızın herhangi bir özelliğine erişmek istediğimizde bu constructor çalışacak ve bir kez daha çalışmayacak. verileri static propety'e kaydedecek.
        // Özetle, ifadeniz şu şekilde biraz daha netleştirilebilir: "Static constructor, sınıfın static üyeleriyle ilgili başlatma işlemlerini yapmak için kullanılır ve sınıf ilk kez kullanıldığında otomatik olarak çağrılır."

    }

}
..................................

..........Get isteği oluşturma. birisi kitapların tamamını döndürecek diğeri ise seçilmiş olanı getirecek. BooksController üzerinde yapacağız.

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using bookDemo.Data;

namespace bookDemo.Controllers
{
    [Route("api/books")] // Routing mekanizmasını belirleriz.
    [ApiController] // class'a davranış kazandırır. bir NotFound vs yollayınca çok önemli bilgileride yollar mesela. detaylı bir controller yapmamızı sağlar.
    public class BooksController : ControllerBase
    {

        [HttpGet] // analink/books çalışınca gelecek default metot budur. serverden istemciye gönderim yapar get metotudur.

        public IActionResult GetAllBooks()
        { // Tüm kitapları döndürecek bu metot bize json içerikli olarak.
            var books = ApplicationContext.Books.ToList();
            return Ok(books); // 200 kodu ile dönecek Ok ile gönderirsek.

        }


        [HttpGet("{id:int}")] // böylece analink/books çalışınca ne olacak bunu belirledik. yoksa hangi metotun çalışacağı karmaşası olur.

        public IActionResult GetOneBook([FromRoute(Name ="id")]int id) // id'nin nereden geldiğini belirtirsek daha iyi olur. eşleşme yani binding tam olarka gerçekleşir.
        {
            var book = ApplicationContext.Books.Where(x => x.Id.Equals(id)).SingleOrDefault();

            if (book == null) { 
            return NotFound(); // 404 ile dönme. hatalı veya olmayan bir id ifadesi anlamına gelecek.
            }

            return Ok(book);

        }

    }
}

...................................... Post isteği ile çalışacağız.


        [HttpPost] // istemciden sunucuya bir gönderim olacak deriz HttpPost ile. 201 ile gönderebiliriz created yani ya da bad request 400 ile dönüş yapabiliriz.
        public IActionResult CreateOneBook([FromBody]Book book) // veri request'in bodysi ile gidecek demektir. Book değerini attığımız requestin body'sin yakalarız böylece.
        {
            try
            {
                if(book is null)
                {
                    return BadRequest(); // 400 kodu üretecek.
                }
                ApplicationContext.Books.Add(book);
                return StatusCode(201, book); // created kodu ile döneriz.
            }
            catch (Exception ex)
            {

                return BadRequest(ex.Message); // ex.Message ile hata detaylarını gösterebiliriz.
            }

        }

............................ put ile çalışma. HttpPut güncelleme için kullanılır. güncelleme için güncellenecek varlığın olması lazım. ./books/{id} . işlem başarılı olduysa 200 ile döneriz. 204 ile güncelleme başarılı ama sana gövde vermiyroum denebilir.   409 kodu ile başarısız denebilir.

        [HttpPut("{id:int}")] 
        public IActionResult UpdateOneBook([FromRoute(Name ="id")]int id,[FromBody]Book book)
        {
            //check var mı yok mu.
            var entity = ApplicationContext.Books.Find(x => x.Id.Equals(id));

            if(entity is null)
            {
                return NotFound(); // 404

            }
            // check id 
            if(id != book.Id)
            {
                return BadRequest(); // 400
            }

            ApplicationContext.Books.Remove(entity);
            book.Id = entity.Id;
            ApplicationContext.Books.Add(book);
            return Ok(book); // güncellenmiş kitap bilgisini döndük burada.
            // update edilen nesneyi body'de gönderdik istesek göndermezdik.

        }

        // 200 success 204 no context ama succeses gövdeyi vermedi bize. 409 ile conflict(çatışma karmaşa.)

............................. Delete ile çalışma.  delete ile direkt olarak ./books'a gidersek her şeyi silebiliriz. ./books/{id} istenen id'yi sileriz.  204 başarılı bir silme ama responsenin body'sini boş yolluyorum demektir.  404 olursa hata vardır istemci taraflı.

        [HttpDelete]
        public IActionResult DeleteAllBooks()
        {
            ApplicationContext.Books.Clear();
            return NoContent(); // 204 işlem başarılı ama responsenin gövdesi boş.
        
        }

        [HttpDelete("{id:int}")] // buraya bir id gelecek demektir.
        public IActionResult DeleteOneBook([FromRoute(Name ="id")]int id)
        {

            var entity = ApplicationContext.Books.Find(x => x.Id.Equals(id));


            if (entity is null)
            {
                return NotFound(
                   new
                   {
                       statusCode = 404,
                       message = $"{id}'li kitap yok."
                   }
                    ); // 404 status kod.

            }
            ApplicationContext.Books.Remove(entity);
            return NoContent(); // Bodysiz başarılı response anlamı vardır.

        }

..........................Patch ile çalışma. kısmi güncelleme yapılır bununla. nesnenin bir kısmının güncellenmesi putta ise komple nesne yeenileme vardı. patch isteği JsonPatchDocument<T> gerektirir. nesnenin geldiği body'i bu JsonPatchDocument<T> class ile sarmalamak lazım.   application/json-patch+json yapısı ile çalışırız.
Microsoft.AspNetCore.JsonPatch
Microsoft.AspNetCore.Mvc.NewtonsoftJson;
// bu iki paket lazım olacak 
AddNewtonsoftJson(); bunuda controllerla ilişkilendiricez.
Patch istekleri normalde arrayde tanımlanır. Add 0, Copy 4, Invalid 6, Move  3, Remove 1, Replace 2,Test 5  bunlar Operation type enum'dur.

Replace =  {
"op":"replace",
"path":"/name",
"value":"newValue"
} // mesela bu yapı ile güncelleme yapabiliriz. kısmı güncelleme.

Patch ./books/{id}  200 başarılı ise 204 gövdesiz başarılı.  415 desteklenmeyen bir media type'ı varsa kullanırız.   400 bad request kötü biçimli hatalar.   409 conflict güncelleme o an mümkün değilse çatışma vs varsa.
.....Manage nuget packagede 

..........Program cs içerisinde builder.Services.AddControllers() yapısını,  builder.Services.AddControllers().AddNewtonsoftJson();    yaptık. 
 
..........


        [HttpPatch("{id:int}")]
        public IActionResult PartialUpdateOneBook([FromRoute(Name = "id")]int id, [FromBody] JsonPatchDocument<Book> bookPatch) // verilerin nereden geleceğini belirterek daha güvenli kod yazabiliriz. 
                                                                                                                                // Book nesnesini JsonPatchDocument<Book> ile sarmaladık.
        {
            var entity = ApplicationContext.Books.Find(x => x.Id.Equals(id));

            if (entity is null)
            {
                return NotFound(
                   new
                   {
                       statusCode = 404,
                       message = $"{id}'li kitap yok."
                   }
                    ); // 404 status kod.

            }

            bookPatch.ApplyTo(entity);
            /*  [{
 "path": "title" ,    
 "op": "replace" , // "replace" yerine 2 yazabilirdik.  Add 0, Copy 4, Invalid 6, Move  3, Remove 1, Replace 2,Test 5  bunlar Operation type enum'dur.
 "value": "Mesneviden Hikayeler2"
            }]
             bu yapı ile kısmi güncelleme yapacağız. */
            return NoContent(); // 204 gövdesiz başarılı.


        }


..POSTMAN ile api testi yapacağız
postman.comdan indireceğiz. ayrıca apilerimiz kaydolarak canlıya alabiliriz.
workspace oluşturunca onun üzerinde çalışabiliriz. canlıdaki bir api'nin testini yapabiliriz localdede canlıda olabilir.
collectionlar ile her türlü metotlarımızı çalıştırabiliriz. bir bölge kurup mesela Books deriz onun içinede BookControllerdaki metotları ekleyip kullanabiliriz.

https://localhost:7176  bunu set as a new variable olarak atarsak eğer baseurl'i global değişken olarak belirlersek eğer {{baseurl}}/api/books olarak kullanabiliriz yarın öbürgün baseurl'in değeri değişirse her yerde değişim yapmamıza gerek kalmaz böylece tek bir yerden anaurl'imizi belirleyebiliriz. 

Tests bölümünde (Collection altında belirlediğimiz metotların özelliklerinden birisi.) : pm postman kısaltması. test için kullanılacak parametredir.
pm.test("Status is 200",function(){
    pm.response.to.have.status(200) // 200le mi döndü bunu kontrol edebiliriz.
}) // testname ve spec function vereceğiz.

pm.test("Status is 200 or 404",() => {
  pm.expect(pm.response.code).to.be.OneOf([200,404,400])
})

Run collection diyerek yöntemlerimizi görebiliriz. seçili olanları kaç kere çalıştırabileceğimizi belirleyebiliriz. herbiri hangi kodlarla dönecek belirleyebiliriz.

{{$}} ile metotları kullanabiliriz {{$randomInt}} diyerek random sayılar alabiliriz. {{$randomWords}} ile mesela random kelimeler alabiliriz   {{$}} ile hangi metotları kullanabiliriz görürüz.





...EF core
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core.....................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
...EF core
...EF core
...EF core
...EF core
...EF core
...EF core....orm aracıdır nesneleri maplememizi sağlar ayrıca automapper var oda maplemek için

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace WebApi.Controllers
{
    [Route("api/books")] // analink/tensonra gelecek olan neyse bu controller gelecek demektir. analink/api/books yazılırsa bu controller çalışacak demektir bu
    [ApiController]
    public class BookController : ControllerBase
    {

    }
}

................ appsetting.json'a bağlantı dizesi ekledik

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {

    "sqlConnection": "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=model;Integrated Security=True;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False"

  }
}
.............................. veya bu appsetting.json kullanılabilir.

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "ConnectionStrings": {

    "AkillikartSystemDb": "Server=localhost;Database=AkillikartSystemDb;Trusted_Connection=True;TrustServerCertificate=True"

  },
  "AllowedHosts": "*",
  "AdminSettings": {
    "DefaultAdminUserName": "admin",
    "DefaultAdminEmail": "admin@example.com",
    "DefaultAdminPassword": "Admin123!"
  },
  "JwtSettings": {
    "validIssuer": "akillikartsistemi",
    "validAudience": "http://localhost:3000",
    "secretKey": "s`9&Paw&i6?G~t+XB&e<QUPv}7j4LKsUYcAPXiV$-f,^c(4`tmueS/ziCcTxFf_y",
    "expires": 60
  }
}



................. RepositoryContext class'ı  .. Repositories klasörü altında oluşturduk. 

using Microsoft.EntityFrameworkCore;
using WebApi.Models;

namespace WebApi.Repositories
{
    public class RepositoryContext :DbContext // DbContext'ten kalıtım almamız lazım burası önemlidir.
    { // DbContext veritabanı olarak görülebilir. DbSet ise tablo.

        // veritabanının bir bağlantı dizesine sahip olması için 

        public RepositoryContext(DbContextOptions options):base(options) // bu options ile bağlantı dizesi kuracağız.
        {
            
        }

        public DbSet<Book> Books { get; set; } // DbSet tablo yerine geçecek onu taklit edecek.
          
    }
}
..................Program.cs'te yapılandırma olacak bağlantı için.

using Microsoft.EntityFrameworkCore;
using WebApi.Repositories;

var builder = WebApplication.CreateBuilder(args);

// Add services to the container.

builder.Services.AddControllers();
// Learn more about configuring Swagger/OpenAPI at https://aka.ms/aspnetcore/swashbuckle
builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen();


// RepositoryContext bizim DbContext'ten kalıtım alan class'ımızdır.
builder.Services.AddDbContext<RepositoryContext>(
    options => // bu options RepositoryContext içerisindeki base'ye giden opitons bu parametre oradan DbContext'in içerisine gidiyor ve bağlantı ayarları sağlanmış oluyor.
    options.UseSqlServer(
        builder.Configuration.GetConnectionString("sqlConnection") // appsettings içerisindeki bağlantıyı buraya getirmiş olacak direkt olarak'ta yazabilirdik ama güvenli olmaz.
        )
    );

var app = builder.Build();
..........................................

Models içerisinde Book.cs oluşturduk mesela o zaman Controllerda BooksController oluşturalım. ve RepositoryContext'te DbSet olarak ekleyelim Book tablosu oluşsun diye.
        public DbSet<Book> Books { get; set; } // DbSet tablo yerine geçecek onu taklit edecek.
................................................

    [Route("api/[controller]/[action]")] // bu yapı ile çalıştırırsak eğer o zaman analink/Controller/metot olarak direkt çalışır. yoksa her metotun üstüne [Route("metotadı")] olarak tanımlama yapmak zorunda kalırdık.
    [ApiController]

......................... Ioc register Resolve ve dispose kacrarlarını üstlenir.

.........................Migrations. ve RepositoryContext'i Controllerlar üzerinde DI ile entegre etme sırası.
Migrationsları kullanmak için. Microsoft.EntityFrameworkCore.Tools kurulumu yapmak lazım.
Microsoft.EntityFrameworkCore.Design 'da kullanmak lazım.
Add-Migration name .. ile name adında migration scripti olur up ve down metotları olur.
Update-Database ile migrationsları veritabanına yansıtırız.
Remove-migration ile son migrationu silip bir öncekini getirebiliriz.

...............register yani RepositoryContext'i Program.cs'te kaydettik.
builder.Services.AddDbContext<RepositoryContext>(options =>
{
    options.UseSqlServer(
        builder.Configuration.GetConnectionString("sqlConnection"),
        b => b.MigrationsAssembly("WebApi") // Burada migration'ların bulunduğu projenin adı 'WebApi' olarak belirtilmiştir
    );
});

........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
Repositories klasörünün altına biz bir klasör ekledik Config adında içine ise BookConfig adında bir class ekledik.

using WebApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;


namespace WebApi.Repositories.Config
{

    public class BookConfig : IEntityTypeConfiguration<Book>  // kalıtım aldık.
    {
        public void Configure(EntityTypeBuilder<Book> builder) // Bize bir tip inşa edecek bu yapı.
        {
            builder.HasData(
                new Book {Id = 1,Title= "A",Price = 100 },
                                new Book { Id = 2, Title = "B", Price = 110 },
                                                new Book { Id = 3, Title = "C", Price = 120 }

                ); // eğer veri yoksa migrations aldığımızda. çekirdek veri ekleyecek.
               

        }

    }

}

...................................... tip konfigurasyonunu belirtmek için... RepositoryContext klasörüne gelicez.

using Microsoft.EntityFrameworkCore;
using WebApi.Models;
using WebApi.Repositories.Config;

namespace WebApi.Repositories
{
    public class RepositoryContext :DbContext // DbContext'ten kalıtım almamız lazım burası önemlidir.
    { // DbContext veritabanı olarak görülebilir. DbSet ise tablo.

        // veritabanının bir bağlantı dizesine sahip olması için 

        public RepositoryContext(DbContextOptions options):base(options) // bu options ile bağlantı dizesi kuracağız.
        { // base(options) demek aslında en alttaki kalıtım veren sınıfın içerisine optionsları göndererek onun üstüne kurulan sınıflarıda options'tan yaralanmasını sağlamaktır.
          // DbContextOptions EntityFrameworkCore ile alakalıdır. options'ta öyledir.  
        }

        public DbSet<Book> Books { get; set; } // DbSet tablo yerine geçecek onu taklit edecek.

        protected override void OnModelCreating(ModelBuilder modelBuilder) // default olan bir metotu biz override ederiz burada.
        {
            modelBuilder.ApplyConfiguration(new BookConfig()); // bu konfigürasyonu RepositoryContext'e eklemiş olduk burada. 
            // model oluşturulurken bu Config ifadesi umursanacak  
        } // modelBuilder ile biz veritabanını kontrol edeceğiz ve eğer veri yoksa içeride veri ekleyeceğiz. konfigurasyon yapacak aslında.
       
    }
}

.................................... Program.cs içerisindeki bu yapı ile swagger gibi test araçları aslında sadece eğer development modda çalışacak bu sayede.

// Configure the HTTP request pipeline.
if (app.Environment.IsDevelopment()) // eğer development modda değilse swagger çalışmayacak direkt ayağa kalkacak.
{
    app.UseSwagger();
    app.UseSwaggerUI();
}

..IOC Inversion of control

bunun bir controller ile yapmamız gerekecek. Controller klasörüne api controller ekleyeceğiz.

using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using WebApi.Repositories;

namespace WebApi.Controllers
{

    [Route("api/books")]
    [ApiController]
    public class BooksController : ControllerBase
    {
        private readonly RepositoryContext _context;

        public BooksController(RepositoryContext context)
        {
            _context = context;

        }

        [HttpGet]

        public IActionResult GetAllBooks() { 
        
            var books = _context.Books.ToList();
            return Ok(books); // 200'le dön demektir.
            
        } // bu metotile BookConfig'ten gelen verileri alabileceğiz.

    }

}

.............DI çerçevesi çok önemlidir.

    public class BooksController : ControllerBase
    {
        private readonly RepositoryContext _context; // readonly demek sadece direkt ve constructor içerisinde atama alabilir demektir. bunu ayarlar.

        public BooksController(RepositoryContext context)
        {
            _context = context;

        }




using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using WebApi.Models;
using WebApi.Repositories;

namespace WebApi.Controllers
{
    [Route("api/books")]
    [ApiController]
    public class BooksController : ControllerBase
    {
        private readonly RepositoryContext _context;

        public BooksController(RepositoryContext context)
        {
            _context = context;

        }

        [HttpGet]

        public IActionResult GetAllBooks()
        {

            var books = _context.Books.ToList();
            return Ok(books); // 200'le dön demektir.

        }

        [HttpGet("{id:int}")] // GEt metotu ve gelecek olan parametrenin hangi türden olduğu daha güvenilir olur böylece.
        public IActionResult GetOneBook([FromRoute(Name = "id")] int id)
        {

            try
            {

                var book = _context.Books.SingleOrDefault(
                x => x.Id == id);

                if (book is null)
                {
                    return NotFound();
                }
                return Ok(book);
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }

        }

        [HttpPost]

        public IActionResult createOneBook([FromBody] Book book)
        {
            try
            {
                if (book is null)
                {
                    return BadRequest();
                }

                _context.Books.Add(book);
                _context.SaveChanges(); // kaydetme işlemi.
                return StatusCode(201, book);



            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);
            }

        }


        [HttpPut("{id:int}")]
        public IActionResult UpdateOneBook([FromRoute(Name = "id")] int id, [FromBody] Book book)

        {

            try
            {
                var entity = _context.Books.SingleOrDefault(x => x.Id == id);  // güncellenmek istenen kitabı olacağız.

                if (entity is null)
                {
                    return NotFound();
                } // kitap var mı yok mu bakacağız eğer yoksa bulunamadı response'si döneceğiz.

                if (id != book.Id)
                {
                    return BadRequest();
                } // eğer id elde olan kitabın id'sine eşit değilse kötü sonuç dön işlem karmaşası olmuştur.

                entity.Title = book.Title; // veritabanındaki title'yi elde olan titleye eşitle ve altta ücretide güncelle.
                entity.Price = book.Price;
                _context.SaveChanges(); // veritabanına yansıt demektir buda.

                return Ok(book);

            }

            catch (Exception ex)
            {
            
                return BadRequest(ex.Message);
            
            }

        }

        [HttpDelete("{id:int}")]
        public IActionResult DeleteOneBook([FromRoute] int id)
        {

            try
            {
                var entity = _context.Books.SingleOrDefault(x => x.Id == id);  // güncellenmek istenen kitabı olacağız.

                if (entity is null)
                {
                    return NotFound(
                        new
                        {
statusCode = 404,
message = $"{id}'li kitap yok..."
                        }// anonim nesne tanımıdır default class'tan türer new ile.
                        );
                }

                _context.Books.Remove(entity);
                _context.SaveChanges();
                return NoContent();


            }
            catch(Exception ex)
            { 
            return BadRequest(ex.Message);
            }

        }

        [HttpDelete]
        public IActionResult DeleteAllBooks()
        {
            try
            {
                var allBooks = _context.Books.ToList();  // Tüm kitapları alıyoruz.

                if (allBooks.Count == 0)
                {
                    return NotFound(new
                    {
                        statusCode = 404,
                        message = "Veritabanında silinecek kitap yok."
                    });
                }

                _context.Books.RemoveRange(allBooks);  // Tüm kitapları siliyoruz.
                _context.SaveChanges();  // Değişiklikleri kaydediyoruz.

                return NoContent();  // Başarılı silme işlemi için 204 No Content döndürüyoruz.
            }
            catch (Exception ex)
            {
                return BadRequest(ex.Message);  // Hata durumunda 400 Bad Request döndürüyoruz.
            }
        
        }

        [HttpPatch("{id:int}")]
        public IActionResult PartialUpdateOneBook([FromRoute(Name = "id")]int id, [FromBody] JsonPatchDocument<Book> bookPatch) // verilerin nereden geleceğini belirterek daha güvenli kod yazabiliriz. 
                                                                                                                                // Book nesnesini JsonPatchDocument<Book> ile sarmaladık.
        {

            var entity = _context.Books.Find(x => x.Id.Equals(id));

            if (entity is null)
            {
                return NotFound(
                   new
                   {
                       statusCode = 404,
                       message = $"{id}'li kitap yok."
                   }
                    ); // 404 status kod.

            }

            bookPatch.ApplyTo(entity);
            _context.SaveChanges();
            /*  [{
 "path": "title" ,    
 "op": "replace" , // "replace" yerine 2 yazabilirdik.  Add 0, Copy 4, Invalid 6, Move  3, Remove 1, Replace 2,Test 5  bunlar Operation type enum'dur.
 "value": "Mesneviden Hikayeler2"
            }]

             bu yapı ile kısmi güncelleme yapacağız. */
            return NoContent(); // 204 gövdesiz başarılı.

        }

    }
}





..KATMANLI MİMARİ
N-tier kullanacağız buradaki sistemde. 
Presentation yapısı sunum için olacak içerisinde Controllerlar vs olacak böyle kullanacağız. 
Entities classlib'i oluştururuz.Bir sınıf kütüphanesi olarak kullanacağız bu sistemi. class library proje ile aynı sürümde olması önemli. içerisine Models klasörü ekleyeceğiz. Modelleri bu klasöre ekleyeceğiz.

// aşağıdaki biçimde Modelleri bu klasör içerisinde tanımlayacağız. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Entities.Models
{
    public class Book
    {
        public int Id { get; set; }
        public String Title { get; set; }
        public decimal Price { get; set; }
        
        // Ref: navigation property
        public int CategoryId { get; set; }
        public Category Category { get; set; }

    }
}

...............................................
classlib ve proje arasında bir reference alışverişi oluşturmak lazım. WebApi projesine referance verdik Entities ile böylece haberleşebilir oldular.
bunlara ait namespace yapılarını düzgün ayarlamak lazım. yoksa hata alabiliriz kodlar birbirini görmeyebilir. 


Repositories adında bir classlib ekleriz. aynı sürümde olmasına dikkat edersek iyi olur. Repolarımız olacak. soyutlama yapacağız aslında yani uygulama detayları ile ilgilenmeyiz hangi metotların vs olacağını belirleriz bu sistemde.
Repositories projesi içerisinde Contracts adında bir klasör ekleriz. içerisine interfaceler ekleriz.

// mesela Repositories'teki Contracts klasörüne eklediğimiz bir interface

using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.Contracts
{
    public interface IRepositoryBase<T>
    {
        // CRUD
        IQueryable<T> FindAll(bool trackChanges);
        IQueryable<T> FindByCondition(Expression<Func<T,bool>> expression, bool trackChanges);
        void Create(T entity);
        void Update(T entity);
        void Delete(T entity);

    }
}

................................... Sonra EfCore adında bir klasör oluşturduk Repositories class'libi altında. ve interfaceyi implement eden yapıyı buraya ekleriz. bu klasör altında kullanırız.

using Microsoft.EntityFrameworkCore;
using Repositories.Contracts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Linq.Expressions;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.EFCore
{

    public abstract class RepositoryBase<T> : IRepositoryBase<T>        // burada implemet edilen metotları yazarız ve onları doldururz çalışır hale getiririz.
        where T : class // where T : class generic türler için bir kısıtlamadır ve sadece referans türlerinin (class veya interface) kullanılabilmesini sağlar. Bu kısıtlama ile değer türleri (int, struct vb.) kullanılamaz.                          Generic bir yapının (örneğin, sınıfın veya metodun) yalnızca class türlerinde kullanılabilmesini sağlar. Başka bir deyişle, where T : class kısıtlamasıyla, T'nin yalnızca referans tipleri (örneğin, sınıflar, diziler, delegeler, vs.) olabileceği belirtilir.
    { 

        protected readonly RepositoryContext _context;
        public RepositoryBase(RepositoryContext context)
        {
            _context = context;
        }

        public void Create(T entity) => _context.Set<T>().Add(entity); // bu bir lambda yapıdır. => ile metot çalıştığında ne olacak bunu belirleyebiliriz.
        
        public void Delete(T entity) => _context.Set<T>().Remove(entity);

        public IQueryable<T> FindAll(bool trackChanges) =>
            !trackChanges ?
            _context.Set<T>().AsNoTracking() :
            _context.Set<T>();

        public IQueryable<T> FindByCondition(Expression<Func<T, bool>> expression,
            bool trackChanges) =>
            !trackChanges ?
            _context.Set<T>().Where(expression).AsNoTracking() :
            _context.Set<T>().Where(expression);

        public void Update(T entity) => _context.Set<T>().Update(entity);   
       
    }
}

.......................................................
EntityFrameworkCore'u Repositories içerisine kurduk.
Repositories altında iki klasor var birisi EFCore birisi Contracts.
EFCore altında ise Config ve Extensions adında iki klasör var. ve direkt olarak altında eklediğimiz classlar var.
mesela Contractslara IRepositoryBase ekledik. EFCore altına ise RepositoryBase.cs ekleriz onu implemente eden metot olacaktır.
...................................................... Repositories altındaki EFCore klasörünün içine bir RepositoryContext ekleyeceğiz.

using Entities.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Repositories.EFCore.Config;
using System.Reflection;

namespace Repositories.EFCore
{
    public class RepositoryContext : IdentityDbContext<User>
    {

        public RepositoryContext(DbContextOptions options) :
            base(options)
        {

        }

        public DbSet<Book> Books { get; set; }
        public DbSet<Category> Categories { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            //modelBuilder.ApplyConfiguration(new BookConfig());
            //modelBuilder.ApplyConfiguration(new RoleConfiguration());
            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());
        }
    }
}

..........................................................................Config klasörü var EFCore klasörü altında. bunun içine bir BookConfig ekleyeceğiz. çalışmada veritabanı o konfigurasyona uyacak böylece. mesela bu yapıda modelBuilder ile eğer veri yoksa ekle dedik.
using Entities.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.EFCore.Config
{
    public class BookConfig : IEntityTypeConfiguration<Book> // Configuration yapmamıza olanak sağlayan interface. 
    {
        public void Configure(EntityTypeBuilder<Book> builder)  
        {
            builder.HasData(
                new Book { Id = 1, CategoryId = 1, Title = "Karagöz ve Hacivat", Price = 75 },
                new Book { Id = 2, CategoryId = 2, Title = "Mesnevi", Price = 175 },
                new Book { Id = 3, CategoryId = 1, Title = "Devlet", Price = 375 }
            );
        }
    }
} 
// bu yapı ile Configuration yapabiliriz. 
.............................................................................. RepositoryContext'i Başka bir class'libe taşıdığımız için bunu Program.cs içerisinde beliritieiz.

.............................................................................. IBookRepository oluşturduk ve RepositoryBase'i implemente ettik böylece onun tüm imzalarını alacak ve istersek daha fazlasını ekleyebileceğiz.
using Entities.Models;
using Entities.RequestFeatures;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.Contracts
{

    public interface IBookRepository : IRepositoryBase<Book> // IRepositoryBase'in tüm özelliklerini aktarmak zorunda kalırız ve istersek o zaman daha fazla zorunluluk ekleyebiliriz.
    {
        Task<PagedList<Book>> GetAllBooksAsync(BookParameters bookParameters,
            bool trackChanges);
        Task<List<Book>> GetAllBooksAsync(bool trackChanges);
        Task<Book> GetOneBookByIdAsync(int id, bool trackChanges);
        void CreateOneBook(Book book);
        void UpdateOneBook(Book book);
        void DeleteOneBook(Book book);

        Task<IEnumerable<Book>> GetAllBooksWithDetailsAsync(bool trackChanges);
        
    }


}
.............................................................................. EFCore altında BookReposiyory.cs oluştururuz. 
using Entities.Models;
using Entities.RequestFeatures;
using Microsoft.EntityFrameworkCore;
using Repositories.Contracts;
using Repositories.EFCore.Extensions;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.EFCore
{
    public sealed class BookRepository : RepositoryBase<Book>, IBookRepository // birden fazla interfaceyi implemente edebiliriz.
    {
        public BookRepository(RepositoryContext context) : base(context)
        { // RepositoryContext'te ana yapıya context göndeririz.
            
        }

        public void CreateOneBook(Book book) => Create(book);
        public void DeleteOneBook(Book book) => Delete(book);
        public async Task<PagedList<Book>> GetAllBooksAsync(BookParameters bookParameters,
            bool trackChanges)
        {
            var books = await FindAll(trackChanges)
                .FilterBooks(bookParameters.MinPrice, bookParameters.MaxPrice)
                .Search(bookParameters.SearchTerm)
                .Sort(bookParameters.OrderBy)
                .ToListAsync();

            return PagedList<Book>
                .ToPagedList(books, 
                bookParameters.PageNumber, 
                bookParameters.PageSize);
        }

        public async Task<List<Book>> GetAllBooksAsync(bool trackChanges)
        {
            return await FindAll(trackChanges)
                .OrderBy(b => b.Id)
                .ToListAsync();
        }

        public async Task<IEnumerable<Book>> GetAllBooksWithDetailsAsync(bool trackChanges)
        {
            return await _context
                .Books
                .Include(b => b.Category)
                .OrderBy(b => b.Id)
                .ToListAsync();
        }

        public async Task<Book> GetOneBookByIdAsync(int id, bool trackChanges) =>
            await FindByCondition(b => b.Id.Equals(id), trackChanges)
            .SingleOrDefaultAsync();
        public void UpdateOneBook(Book book) => Update(book);
    }
}

.....................................................Contracts içerisine IRepositoryManager.cs ekleriz. bir interface olacak. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.Contracts
{
    public interface IRepositoryManager
    {
        ICategoryRepository Category { get; } // sadece get olarak çalışacak bize category'i getirecek aslında.
        IBookRepository Book { get; }
        Task SaveAsync(); // kayıt işlemini yapabileceğiz böylece.
    }
}

............................................................ şimdi ise EFCore altında RepositoryManager ekleyeceğiz.

using Repositories.Contracts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.EFCore
{
    public class RepositoryManager : IRepositoryManager // IRepositoryManager'i implement'e ettik böylece istenen repoları getirmek zorunda kalacağız.
    {
       //DI'ları burada tanımladık aslında.    
        private readonly RepositoryContext _context;
        private readonly IBookRepository _bookRepository;
        private readonly ICategoryRepository _categoryRepository;

        public RepositoryManager(RepositoryContext context, 
            IBookRepository bookRepository, 
            ICategoryRepository categoryRepository)
        { // DI çerçevesini burada tamamlamış oluruz.  
            _context = context;
            _bookRepository = bookRepository;
            _categoryRepository = categoryRepository;
        }

        public IBookRepository Book => _bookRepository; // bağlantıyı bize getirecek bu sistem. RepositoryManager.Book diyince bağlanabileceğiz veritabanına. 

        public ICategoryRepository Category => _categoryRepository;

        public async Task SaveAsync()
        {
            await _context.SaveChangesAsync();  // komple veritabanı üzerinde bir değişiklikleri kaydet deriz.
        }
    }
}

..............................Lazy loading, uygulama için bir yer tutarız ama ne zaman ona ihtiyaç olur o zaman o nesneyi üretiriz böylece daha az kaynak kullanmış oluruz..bazen bir nesneye ve nesyeyle alakalı her şeyi yüklemek isteriz buna eager loading denir. 
yani doğrudan newleme kullanmayacağız.   public IBookRepository Book => _bookRepository; bu yapıda kullanacağız. referans açık olacak ama gerekli yerlerde kullanılacak böylece daha az yorulur sistem. nesne ancak çağrılırsa newlenecek.
  public IBookRepository Book => new BookRepository(_context);  bu ise eager loadingtir çok kaynak tüketebilir ve DI çerçevesine uygun değildir.
...........................................................
...........................................................api projemize yeni bir klasör ekleriz wepapi olan üzerinde mavi dünya olana wep api'ye. Extensions klasörü ekleriz. yeri gelirse Extensions metotlar yazmak için kullanırız. yapılandırma ifadelerini buraya eklersek iyi olacak. 
//ServicesExtensions.cs ekleyeceğiz bu klasör altına. ve bu class static olacak. 
using AspNetCoreRateLimit;
using AutoMapper;
using Entities.DataTransferObjects;
using Entities.Models;
using Marvin.Cache.Headers;
using Microsoft.AspNetCore.Authentication.JwtBearer;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Formatters;
using Microsoft.AspNetCore.Mvc.Versioning;
using Microsoft.EntityFrameworkCore;
using Microsoft.IdentityModel.Tokens;
using Microsoft.OpenApi.Models;
using Presentation.ActionFilters;
using Presentation.Controllers;
using Repositories.Contracts;
using Repositories.EFCore;
using Services;
using Services.Contracts;
using System.Text;

namespace WebApi.Extensions
{
    // static class içerisine static metotlar yapacağız ve bunlar çalışacak. 
    public static class ServicesExtensions // service yapısının özelliklerini burada tanımlarız doğruı düzgün.
    {
        // bu metot ile bağlantıyı sağlayabiliriz. çok güvenli bir sistemdir bu. 
        public static void ConfigureSqlContext(this IServiceCollection services,
            IConfiguration configuration) => services.AddDbContext<RepositoryContext>(options =>
                    options.UseSqlServer(configuration.GetConnectionString("sqlConnection")));
        
        // kaydı yapılacak olan ifade her kullanıcya özel olarak üretilecek nesneyi tanımladık burada. 
        public static void ConfigureRepositoryManager(this IServiceCollection services) => 
            services.AddScoped<IRepositoryManager, RepositoryManager>();
        // IOC kaydını burada yaparız aslında. interface seviyesinde bir bağımlılık söz konusu aslında. biraz daha zayıf bağlı bir sistem haline gelir yapı burada.
        public static void ConfigureServiceManager(this IServiceCollection services) =>
            services.AddScoped<IServiceManager, ServiceManager>();

        public static void ConfigureLoggerService(this IServiceCollection services) => 
            services.AddSingleton<ILoggerService, LoggerManager>();


        public static void ConfigureActionFilters(this IServiceCollection services)
        {
            services.AddScoped<ValidationFilterAttribute>();
            services.AddSingleton<LogFilterAttribute>();
            services.AddScoped<ValidateMediaTypeAttribute>();
        } 

        public static void ConfigureCors(this IServiceCollection services)
        {
            services.AddCors(options =>
            {
                options.AddPolicy("CorsPolicy", builder => 
                    builder.AllowAnyOrigin()
                    .AllowAnyMethod()
                    .AllowAnyHeader()
                    .WithExposedHeaders("X-Pagination")
                );
            });
        }

        public static void ConfigureDataShaper(this IServiceCollection services)
        {
            services.AddScoped<IDataShaper<BookDto>, DataShaper<BookDto>>();
        }

        public static void AddCustomMediaTypes(this IServiceCollection services)
        {
            services.Configure<MvcOptions>(config =>
            {
                var systemTextJsonOutputFormatter = config
                .OutputFormatters
                .OfType<SystemTextJsonOutputFormatter>()?.FirstOrDefault();

                if (systemTextJsonOutputFormatter != null)
                {
                    systemTextJsonOutputFormatter.SupportedMediaTypes
                    .Add("application/vnd.btkakademi.hateoas+json");

                    systemTextJsonOutputFormatter.SupportedMediaTypes
                    .Add("application/vnd.btkakademi.apiroot+json");
                }

                var xmlOutputFormatter = config
                .OutputFormatters
                .OfType<XmlDataContractSerializerOutputFormatter>()?.FirstOrDefault();

                if (xmlOutputFormatter is not null)
                {
                    xmlOutputFormatter.SupportedMediaTypes
                    .Add("application/vnd.btkakademi.hateoas+xml");

                    xmlOutputFormatter.SupportedMediaTypes
                    .Add("application/vnd.btkakademi.apiroot+xml");
                }
            });
        }
       
        public static void ConfigureVersioning(this IServiceCollection services)
        {
            services.AddApiVersioning(opt =>
            {
                opt.ReportApiVersions = true;
                opt.AssumeDefaultVersionWhenUnspecified = true;
                opt.DefaultApiVersion = new ApiVersion(1, 0);
                opt.ApiVersionReader = new HeaderApiVersionReader("api-version");
                
                opt.Conventions.Controller<BooksController>()
                    .HasApiVersion(new ApiVersion(1, 0));

                opt.Conventions.Controller<BooksV2Controller>()
                    .HasDeprecatedApiVersion(new ApiVersion(2, 0));
            }); 
        }

        public static void ConfigureResponseCaching(this IServiceCollection services) =>
            services.AddResponseCaching();

        public static void ConfigureHttpCacheHeaders(this IServiceCollection services) => 
            services.AddHttpCacheHeaders(expirationOpt =>
            {
                expirationOpt.MaxAge = 90;
                expirationOpt.CacheLocation = CacheLocation.Public;
            },
            validationOpt =>
            {
                validationOpt.MustRevalidate = false;
            });

        public static void ConfigureRateLimitingOptions(this IServiceCollection services)
        {
            var rateLimitRules = new List<RateLimitRule>() 
            {
                new RateLimitRule()
                {
                    Endpoint = "*",
                    Limit = 60,
                    Period = "1m"
                }
            };

            services.Configure<IpRateLimitOptions>(opt =>
            {
                opt.GeneralRules = rateLimitRules;
            });

            services.AddSingleton<IRateLimitCounterStore, MemoryCacheRateLimitCounterStore>();
            services.AddSingleton<IIpPolicyStore, MemoryCacheIpPolicyStore>();
            services.AddSingleton<IRateLimitConfiguration, RateLimitConfiguration>();
            services.AddSingleton<IProcessingStrategy, AsyncKeyLockProcessingStrategy>();
        }

        public static void ConfigureIdentity(this IServiceCollection services)
        {
            var builder = services.AddIdentity<User, IdentityRole>(opts =>
            {
                opts.Password.RequireDigit = true;
                opts.Password.RequireLowercase = false;
                opts.Password.RequireUppercase = false;
                opts.Password.RequireNonAlphanumeric = false;
                opts.Password.RequiredLength = 6;

                opts.User.RequireUniqueEmail = true;
            })
                .AddEntityFrameworkStores<RepositoryContext>()
                .AddDefaultTokenProviders();
        }

        public static void ConfigureJWT(this IServiceCollection services, 
            IConfiguration configuration)
        {
            var jwtSettings = configuration.GetSection("JwtSettings");
            var secretKey = jwtSettings["secretKey"];

            services.AddAuthentication(opt =>
            {
                opt.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
                opt.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(options => 
                options.TokenValidationParameters = new TokenValidationParameters
                {
                    ValidateIssuer = true,
                    ValidateAudience = true, 
                    ValidateLifetime = true,
                    ValidateIssuerSigningKey = true,
                    ValidIssuer = jwtSettings["validIssuer"],
                    ValidAudience = jwtSettings["validAudience"],
                    IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))
                }
            );
        }

        public static void ConfigureSwagger(this IServiceCollection services)
        {
            services.AddSwaggerGen(s =>
            {
                s.SwaggerDoc("v1", 
                    new OpenApiInfo 
                    { 
                        Title = "BTK Akademi", 
                        Version = "v1",
                        Description = "BTK Akademi ASP.NET Core Web API",
                        TermsOfService = new Uri("https://www.btkakademi.gov.tr/"),
                        Contact = new OpenApiContact
                        {
                            Name = "Zafer CÖMERT",
                            Email = "comertzafer@gmail.com",
                            Url = new Uri("https://www.zafercomert.com")
                        }
                    });
                
                s.SwaggerDoc("v2", new OpenApiInfo { Title = "BTK Akademi", Version = "v2" });

                s.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme()
                {
                    In = ParameterLocation.Header,
                    Description = "Place to add JWT with Bearer",
                    Name = "Authorization",
                    Type = SecuritySchemeType.ApiKey,
                    Scheme="Bearer"
                });

                s.AddSecurityRequirement(new OpenApiSecurityRequirement()
                {
                    {
                        new OpenApiSecurityScheme
                        {
                            Reference = new OpenApiReference
                            {
                                Type = ReferenceType.SecurityScheme,
                                Id="Bearer"
                            },
                            Name = "Bearer"
                        },
                        new List<string>()
                    }
                });
            });
        }

        public static void RegisterRepositories(this IServiceCollection services)
        {
            services.AddScoped<IBookRepository, BookRepository>();
            services.AddScoped<ICategoryRepository, CategoryRepository>();
        }

        public static void RegisterServices(this IServiceCollection services)
        {
            services.AddScoped<IBookService, BookManager>();
            services.AddScoped<ICategoryService, CategoryManager>();
            services.AddScoped<IAuthenticationService, AuthenticationManager>();
        }

    }
}

............................................ En son halde controller'a veritabanı bağlaması böyle olacak. IServiceManager _manager olarak veri tabanına bağlanacağz. bunun kullanımının bir örneği mesela  return Ok(await _manager.BookService.GetAllBooksWithDetailsAsync(false)); 
    
    //[ApiVersion("1.0")]
    [ApiExplorerSettings(GroupName = "v1")]
    [ServiceFilter(typeof(LogFilterAttribute))]
    [ApiController]
    [Route("api/books")]
    //[ResponseCache(CacheProfileName ="5mins")]
    //[HttpCacheExpiration(CacheLocation = CacheLocation.Public, MaxAge = 80)]
    public class BooksController : ControllerBase
    {
        private readonly IServiceManager _manager;
        public BooksController(IServiceManager manager)
        {
            _manager = manager;
        }

...............................................
...........................................................Service katmanı. şimdi ise Services classlibi ekleriz sistemimize. içerisinde Contracts klasörü olacak ve interfaceleri buraya ekleyeceğiz. ve direkt Services altına ise interfaceleri implemente eden metotları ekleriz. dilersek farklı da yapabiliriz ama böylesi uygundur.
// mesela IBookService ekleriz Contacts içerisine. kullanacağımız metotları burada tanımlarız 
using Entities.DataTransferObjects;
using Entities.LinkModels;
using Entities.Models;
using Entities.RequestFeatures;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Contracts
{
    public interface IBookService
    {
        Task<(LinkResponse linkResponse, MetaData metaData)> GetAllBooksAsync(LinkParameters linkParameters,
            bool trackChanges);
        Task<BookDto> GetOneBookByIdAsync(int id, bool trackChanges);
        Task<BookDto> CreateOneBookAsync(BookDtoForInsertion book);
        Task UpdateOneBookAsync(int id, BookDtoForUpdate bookDto, bool trackChanges);
        Task DeleteOneBookAsync(int id, bool trackChanges);

        Task<(BookDtoForUpdate bookDtoForUpdate, Book book)> GetOneBookForPatchAsync(int id, bool trackChanges);

        Task SaveChangesForPatchAsync(BookDtoForUpdate bookDtoForUpdate, Book book);
        Task<List<Book>> GetAllBooksAsync(bool trackChanges);

        Task<IEnumerable<Book>> GetAllBooksWithDetailsAsync(bool trackChanges);
    }
}
..................................................IBookService'i kullanacak class'ı yani BookManager'i ekleriz.
using AutoMapper;
using Entities.DataTransferObjects;
using Entities.Exceptions;
using Entities.LinkModels;
using Entities.Models;
using Entities.RequestFeatures;
using Repositories.Contracts;
using Services.Contracts;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services
{
    public class BookManager : IBookService // implemente ettik ve metotların içerisini doldurduk burada.
    {
        private readonly ICategoryService _categoryService;
        private readonly IRepositoryManager _manager; // her şey manager üzerinde dönecek. 
        private readonly ILoggerService _logger;
        private readonly IMapper _mapper;
        private readonly IBookLinks _bookLinks;

        public BookManager(IRepositoryManager manager,
            ILoggerService logger,
            IMapper mapper,
            IBookLinks bookLinks,
            ICategoryService categoryService)
        {
            _manager = manager;
            _logger = logger;
            _mapper = mapper;
            _bookLinks = bookLinks;
            _categoryService = categoryService;
        }

        public async Task<BookDto> CreateOneBookAsync(BookDtoForInsertion bookDto)
        {
            var category = await _categoryService
                .GetOneCategoryByIdAsync(bookDto.CategoryId, false);

            var entity = _mapper.Map<Book>(bookDto);
            _manager.Book.CreateOneBook(entity);
            await _manager.SaveAsync();
            return _mapper.Map<BookDto>(entity);
        }

        public async Task DeleteOneBookAsync(int id, bool trackChanges)
        {
            var entity = await GetOneBookByIdAndCheckExists(id, trackChanges);
            _manager.Book.DeleteOneBook(entity);
            await _manager.SaveAsync();
        }

        public async Task<(LinkResponse linkResponse, MetaData metaData)> 
            GetAllBooksAsync(LinkParameters linkParameters,
            bool trackChanges)
        {
            if(!linkParameters.BookParameters.ValidPriceRange)
                throw new PriceOutofRangeBadRequestException();

            var booksWithMetaData = await _manager
                .Book
                .GetAllBooksAsync(linkParameters.BookParameters, trackChanges);
             
            var booksDto = _mapper.Map<IEnumerable<BookDto>>(booksWithMetaData);
            var links = _bookLinks.TryGenerateLinks(booksDto,
                linkParameters.BookParameters.Fields,
                linkParameters.HttpContext);
            
            return (linkResponse: links, metaData : booksWithMetaData.MetaData);
        }

        public async Task<List<Book>> GetAllBooksAsync(bool trackChanges)
        {
            var books = await _manager.Book.GetAllBooksAsync(trackChanges);
            return books;
        }

        public async Task<IEnumerable<Book>> GetAllBooksWithDetailsAsync(bool trackChanges)
        {
            return await _manager
                .Book
                .GetAllBooksWithDetailsAsync(trackChanges);
        }

        public async Task<BookDto> GetOneBookByIdAsync(int id, bool trackChanges)
        {
            var book =  await GetOneBookByIdAndCheckExists(id,trackChanges);
            return _mapper.Map<BookDto>(book);
        }

        public async Task<(BookDtoForUpdate bookDtoForUpdate, Book book)> 
            GetOneBookForPatchAsync(int id, bool trackChanges)
        {
            var book = await GetOneBookByIdAndCheckExists(id, trackChanges);
            var bookDtoForUpdate = _mapper.Map<BookDtoForUpdate>(book);
            return (bookDtoForUpdate, book);
        }

        public async Task SaveChangesForPatchAsync(BookDtoForUpdate bookDtoForUpdate, Book book)
        {
            _mapper.Map(bookDtoForUpdate, book);
            await _manager.SaveAsync();
        }

        public async Task UpdateOneBookAsync(int id, 
            BookDtoForUpdate bookDto, 
            bool trackChanges)
        {
            var entity = await GetOneBookByIdAndCheckExists(id, trackChanges);
            entity = _mapper.Map<Book>(bookDto);
            _manager.Book.Update(entity);
            await _manager.SaveAsync();
        }

        private async Task<Book> GetOneBookByIdAndCheckExists(int id, bool trackChanges)
        {
            // check entity 
            var entity = await _manager.Book.GetOneBookByIdAsync(id, trackChanges);

            if (entity is null)
                throw new BookNotFoundException(id);

            return entity;
        }
    }
}
..................................................IServiceManager.cs ekleriz bu bir interface olacak. Sonra bunu implemete eden ServiceManager.cs'i de ekleyevceğiz. IServiceManager'i Services classlibinin Contracts klasöründe yazdık.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Contracts
{
    public interface IServiceManager
    {
        IBookService BookService { get; } // gerekli yapıları get eden sistem. 
        ICategoryService CategoryService { get; }
        IAuthenticationService AuthenticationService { get; }

    }
}
...........................................ServiceManager.cs ise bu projede Services classlib'i altında.
using AutoMapper;
using Entities.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Repositories.Contracts;
using Services.Contracts;


namespace Services
{
    public class ServiceManager : IServiceManager
    {
        private readonly IBookService _bookService;
        private readonly ICategoryService _categoryService;
        private readonly IAuthenticationService _authencationService;

        public ServiceManager(IBookService bookService, 
            ICategoryService categoryService, 
            IAuthenticationService authencationService)
        {
            _bookService = bookService;
            _categoryService = categoryService;
            _authencationService = authencationService;
        }

        public IBookService BookService => _bookService;

        public IAuthenticationService AuthenticationService => _authencationService;

        public ICategoryService CategoryService => _categoryService;
    }
}
.........................................................ServiceMaganager IOC kaydı. çözümleyiciye eklememiz lazım bu sistemi. Web api projesinin altındaki Extensions altındaki ServicesExtensions.cs içerisine bunu ekleriz. 

        public static void ConfigureServiceManager(this IServiceCollection services) =>
            services.AddScoped<IServiceManager, ServiceManager>();
// Program.cs'e eklemeside yapılmalıdır. 
........................................................... Service katmanını bağlama işi. ServiceManager kullanımı.         
        private readonly IServiceManager _manager;
        public BooksController(IServiceManager manager) // bu yapı ile Controllera ekleriz burada önemli nokta interfaceler onları implement eden class'lara referans olabilir illaki interfacelerin içi dolu olacak diye bir durum yok bu yüzden. buna dikkat etmek lazım.
        {
            _manager = manager;
        }
        // kullanım olayı ise aşağıdaki metot gibi olacaktır. _manager.ServiceName.metot olarak çalışacak bu sistem.
                [Authorize]
        [HttpGet("details")]
        public async Task<IActionResult> GetAllBooksWithDetailsAsync()
        {
            return Ok(await _manager
                .BookService
                .GetAllBooksWithDetailsAsync(false));
        }
        [Authorize(Roles = "Editor, Admin")] // Yetkilendirme özelliği. 
        [ServiceFilter(typeof(ValidationFilterAttribute))]
        [HttpPut("{id:int}")] // hangi özellik adı ile gidecek ve tipi ne olacak.
        public async Task<IActionResult> UpdateOneBookAsync([FromRoute(Name = "id")] int id, // [FromRoute(Name = "id")] int id u yapı daha güvenli bir kullanım yapmamızı sağlar burada.
            [FromBody] BookDtoForUpdate bookDto)
        {
            await _manager.BookService.UpdateOneBookAsync(id, bookDto, false);
            return NoContent(); // 204
        }

.........................................................
.........................................................Presentation katmanı. solutiona yeni bir classlib ekledik Presentation adında. altında iki klasör(ActionFilters ve Controllers) ve bir class var(AssemblyReference.cs) . artık Controllersları web api içerisinde tutmayacağız....   Mvc.Core bir sınıda bir class'a controller olma özelliği kazandırabiliriz.  Reflection demek çalışma zamanında çözülmek demektir. 
// içerisine Microsoft.AspNetCore.Mvc.Core ekleriz. Apileri vs bu yapıda kullanabilmek için indiririz. 
// Jsonpatch, NewtonsoftJson, MArvin.Cache.Headers, Mvc.Versioning    . bunlarıda yükleriz.
// örnek bir Controller mesela 
using Microsoft.AspNetCore.Mvc;
using Services.Contracts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Presentation.Controllers
{
    
    //[ApiVersion("2.0", Deprecated = true)]
    [ApiController]
    [Route("api/books")]
    [ApiExplorerSettings(GroupName ="v2")]
    public class BooksV2Controller : ControllerBase
    {
        private readonly IServiceManager _manager;

        public BooksV2Controller(IServiceManager manager)
        {
            _manager = manager;
        }

        [HttpGet]
        public async Task<IActionResult> GetAllBooksAsync()
        {
            var books = await _manager.BookService.GetAllBooksAsync(false);
            var booksV2 = books.Select(b => new
            {
                Title = b.Title,
                Id = b.Id
            });
            return Ok(booksV2);
        }
    }
}
.........................................................Controller yapısınıda ayrı bir katmana çıkarmış olduk. Program.cs içerisine aşağıdaki kodu ekledik. 
builder.Services.AddControllers(config =>
{
    config.RespectBrowserAcceptHeader = true;
    config.ReturnHttpNotAcceptable = true;
    config.CacheProfiles.Add("5mins", new CacheProfile() { Duration = 300 });
})
.AddXmlDataContractSerializerFormatters()
.AddCustomCsvFormatter()
.AddApplicationPart(typeof(Presentation.AssemblyReference).Assembly)
.AddNewtonsoftJson(opt => 
    opt.SerializerSettings.ReferenceLoopHandling = 
    Newtonsoft.Json.ReferenceLoopHandling.Ignore
);

// gerekli usingleri vermek gerekir. 
.................................. Presentation içindeki AssemblyReference.cs dosyası
namespace Presentation
{
    public class AssemblyReference
    {
         // içi boş ama çok gerekli değil.
    }
}
............................................... web api projemize bir klasör ekledik ContextFactory adında. içerisine ise RepositoryContextFactory.cs ekledik. 
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Design;
using Repositories.EFCore;

namespace WebApi.ContextFactory
{
    public class RepositoryContextFactory
        : IDesignTimeDbContextFactory<RepositoryContext> // using Microsoft.EntityFrameworkCore.Design; bu yapı ile gelecek bu interface.
    {
        public RepositoryContext CreateDbContext(string[] args) // 
        {
            // configurationBuilder
            var configuration = new ConfigurationBuilder() // appsettings.json'daki verilerle configuration yapacak.
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json") // json dosyasını ekle. appsettings.json. 
                .Build(); // build et.
            
            // DbContextOptionsBuilder
            // yukarıda oluşan configuration'ı aşağıda configuration.GetConnectionString'de kullandık. önce o parametreyi tamamlayıp sonra burada işlem yaptık.
            var builder = new DbContextOptionsBuilder<RepositoryContext>()
                .UseSqlServer(configuration.GetConnectionString("sqlConnection"), // sqlConnection appsettings içerisindeki isimle aynı olmalıdır. o parametrenin string url değerini alacak çünkü.
                prj => prj.MigrationsAssembly("WebApi")); // Projeadını vereceğiz burada. MigrationsAssembly içeriisne wep api projemizin adını koyarız. 
                // yani Migrationların nerede oluşacağını belirleriz. burada web api içerisinde olsun diye WebApi diyerek anaprojemizin adını verdik migrations klasörü burada oıluşacak otomatik olarak.
                
            return new RepositoryContext(builder.Options); RepositoryContext içerisine optionsları göndeririz oradan da base class'a gider bu optionslar.
        }
    }
}












NLOG........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
3.parti bir kütüphane olan nlogu mimarimize ekleyeceğiz. Nlog.Extensions.Logging ekleyeceğiz. Bir Logger service yazacağız.  Logger manager ekleyeceğiz. Servis kaydı yapacağız IOC'ye. 
üst sınıflar alt sınıflara bağımlı olmamalı. bağlantı olacaksa interfaceler ile halledilmelidir bu sistem.
Services üzerinde sağ tık open in terminal dedik.bir paket yüklemesi gerekir .. dotnet add package Nlog.Extensions.Logging .. bu yüklemeyi yaptık.  manage nuget packageden de yapabiliriz. 
Services class'libinde Contacts klasöründe ILoggerService ekledik. 

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Contracts
{
    public interface ILoggerService
    {
        void LogInfo(string message);
        void LogWarning(string message);
        void LogError(string message);
        void LogDebug(string message);
    }
}
.............................. LoggerManager.cs ekleyeceğiz şimdi de Services classlib'i altında.

using NLog; // Nlog eklemesi yaptık. 
using Services.Contracts;


namespace Services
{
    public class LoggerManager : ILoggerService
    {
        private static ILogger logger = LogManager.GetCurrentClassLogger(); // static bir tanım yapabiliriz veya DI ile yapabiliriz. Looger bir kere üretilince her yerde aynı logger kullanılabilsin diye static yaptık. 
        public void LogDebug(string message) => logger.Debug(message); // Debug ile işlem yapıyorsan log üzerine yaz.

        public void LogError(string message) => logger.Error(message); // logger burda ise error ifasesini mesajı ile yaz.

        public void LogInfo(string message) => logger.Info(message); // ınfo varsa loglamaya ekle mantığı var.

        public void LogWarning(string message) => logger.Warn(message);
       
    }
}
.......................................... mlog.config adında bir dosya oluşturduk wep api altında. web configuration file olacak. Loglama çalıştığında hangi şablon ile çalışacak bunu belirleriz aslında. 
<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
      autoReload="true" 
      internalLogLevel="Info"
      internalLogFile=".\internal_logs\internallog.txt">

	<targets>
		<target name="logfile" xsi:type="File"
				fileName=".\logs\${shortdate}_logfile.txt"
				layout="${longdate} ${level:uppercase=true} ${message}"/>
	</targets>

	<rules>
		<logger name="*" minlevel="Debug" writeTo="logfile" />
	</rules>
</nlog>
.....................................Wep api'ye bir klasör ekledik internal_logs adında bir klasör oluşturduk. içine ise internallog.txt olacak. içeriisnde alttaki gibi veriler olacak. 
2022-11-06 16:00:19.9252 Info Message Template Auto Format enabled
2022-11-06 16:00:20.1354 Info Adding target FileTarget(Name=logfile)
2022-11-06 16:00:20.1686 Info Validating config: TargetNames=logfile, ConfigItems=12, FilePath=F:\Courses\AspDotnetCoreWebApi\Applications\bsStoreApp\WebApi\nlog.config 
........................................................... Program.cs içerisinde bunu eklememiz lazım. 

LogManager.LoadConfiguration(String.Concat(Directory.GetCurrentDirectory(),"/nlog.config")); // birleştir demek Concat. Nerde çalışıyorsa al ve o pathi getirmiş ol bu path'e nlog.config'i ekle dedik wep api'ye eklediğimiz nlog.config'i buraya ekledik.

............................................... Extensions klasöründeki ServicesExtensions'a ekleme yapacağız. 
        public static void ConfigureLoggerService(this IServiceCollection services) => 
            services.AddSingleton<ILoggerService, LoggerManager>(); // AddScoped AddSingleton AddTransient kullanabiliriz. IOc'ye nasıl kaydolacak belirlyebiliriz. tek bir defa oluşacak Singleton yapısı ile.
............................................................. şimdi tekrar Program.cs'e ekleme. 
builder.Services.ConfigureLoggerService(); 
.............................................................Nlog mimaride kullanımı. Logger ifadesini kullanacağız. mesela BookManager.cs'e loglama yapacaksak bunu ekleriz. 
       private readonly ICategoryService _categoryService;
       private readonly IRepositoryManager _manager;
       private readonly ILoggerService _logger; // ILoggerService'yi ekleriz.
       private readonly IMapper _mapper;
       private readonly IBookLinks _bookLinks;

       public BookManager(IRepositoryManager manager,
           ILoggerService logger,
           IMapper mapper,
           IBookLinks bookLinks,
           ICategoryService categoryService)
       {
           _manager = manager;
           _logger = logger;
           _mapper = mapper;
           _bookLinks = bookLinks;
           _categoryService = categoryService;
       }

 
        public async Task UpdateOneBookAsync(int id, 
            BookDtoForUpdate bookDto, 
            bool trackChanges)
        {
            var entity = await GetOneBookByIdAndCheckExists(id, trackChanges);
            if(entity is null){
                string msg = $""{id} not found;
                _logger.LogInfo(msg);
                throw new Exception(msg);
            }
            entity = _mapper.Map<Book>(bookDto);
            _manager.Book.Update(entity);
            await _manager.SaveAsync();
        }









GLOBAL HATA YÖNETİMİ
GLOBAL HATA YÖNETİMİ
GLOBAL HATA YÖNETİMİ........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
GLOBAL HATA YÖNETİMİ
GLOBAL HATA YÖNETİMİ........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
GLOBAL HATA YÖNETİMİ








































........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................

........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
.GÜVENLİ
.GÜVENLİ
.GÜVENLİ
.GÜVENLİ
.GÜVENLİ
Identity çerçevesi kullanılabilir asp.net sunar bu çerçeveyi. IdentityUser ve IdentityRole.  IdentityDbContext kullanacağız.
Json Web Token(JWT) kullanırız. JWT Configuration ederiz ve api endpointlerini korumaya çalışırız. böylece yetkisiz kişiler giriş yapamaz. 
  
bir tarafta client bir tarafta sunucu olsun. client giriş için istek atsın kullanıcı doğrulaması yapılsın o zaman server bir response dönecek.   
sunucu kullanıcıyı doğrularsa o zaman bir token dönecek(JWT). kullanıcı ismi, subject , user roles, geçerlilik süresi vs gibi bilgiler olacak(claimsler). şifre vs burada olmayacak.
JWT bir şifreli yapı değildir.  bu yüzden hassas bilgiler token içerisine yerleştirilmez şifre gibi. şifrelenmesi lazım önemli yerlerin tam olarak.

jwt encode edilebilir şifrelenmiş yapı değildir. hassas bilgiler token içerisine yerleştirilmez.

stateless kavramı vardır. bu durumu yerine getirebilmek için token'e ihtiyacımız var jwt yani.

kullanıcının bir tokeni olsun. header içerisinde authentication kısmı olur.
tokenli istek başarılı olursa bir response dönecek sunucu. eğer giriş başarılı olmazsa 403 veya 401 döneceğiz.

token verdiğimizde o tokeni header'in authentication bölümünde gönderir ve böylece korumalı kaynakları dönebiliriz. 

................................. Identity çerçevesi ekleme.
Microsoft.AspNetCore.Identity.EntityFrameworkCore; ekleriz. bunu Entities'e ekleriz. Entities classlib'ine eklenir.

.................................Entities içerisindeki Models içerisine User.cs class'ı ekleriz.

using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Entities.Models
{
    public class User : IdentityUser // IdentityUser'ı biz Identity paketinden aldık. pek çok özellik hali hazırda burada vardır. 
    { // User aslında IdentityUser'dir. 
        public String? FirstName { get; set; }  // Propları gerekli şekilde düzenleyebiliriz. 
        public String? LastName { get; set; }
        public String? RefreshToken { get; set; } 
        public DateTime RefreshTokenExpiryTime { get; set; } // tokenin geçerlilik süresi olsun. 
    
    }

}
......................................................RepositoryContext'te değişim yapacağız. 

namespace Repositories.EFCore
{
    public class RepositoryContext : IdentityDbContext<User> // artık IdentityDbContext'i kullanacağız. 
    {                                                 // user aslında IdentityUser'dir.  
        public RepositoryContext(DbContextOptions options) :
            base(options)
        {

        }
                public DbSet<Book> Books { get; set; }
        public DbSet<Category> Categories { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
        
            base.OnModelCreating(modelBuilder); // bu önemlidir bunu kullanmamız lazım ilgili tablolar oluşacak böylece. Migrationslar gerekitiği gibi olur bu sistem ile. 
            //modelBuilder.ApplyConfiguration(new BookConfig());
            //modelBuilder.ApplyConfiguration(new RoleConfiguration());
            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly());
        
        }

...............................................ServicesExtensions.cs içerisine gideceğiz 

        public static void ConfigureIdentity(this IServiceCollection services)
        {
            var builder = services.AddIdentity<User, IdentityRole>(opts =>
            {
                opts.Password.RequireDigit = true; // rakam istiyor muyuz mesela şifrede 
                opts.Password.RequireLowercase = false; // küçük harf istiyor muyuz veya
                opts.Password.RequireUppercase = false; // büyük harf olsun mu 
                opts.Password.RequireNonAlphanumeric = false; // 
                opts.User.RequireUniqueEmail = true; // unique bir email olsun diyor.
            })
                .AddEntityFrameworkStores<RepositoryContext>() // IdentityDbContext'i implemente edeni buraya getiririz. 
                .AddDefaultTokenProviders(); 
        }
// opts.User.RequireUniqueEmail = true; bu tür yapıları değiştirebiliriz burada bir sorun olmaz.       
// bu eklemeyi uygun bir biçimde yapacağız. 
............................................... Program.cs içerisi. ekleme yapacağız. 
builder.Services.ConfigureIdentity();
builder.Services.ConfigureJWT(builder.Configuration);

ve 

app.UseAuthentication();
app.UseAuthorization();
// sırası önemli şekilde eklenmelidir. 
...................................................... Add-migration CreatingIdentityTables ekleriz. böylece veritabanında istenen tablolar oluşur.  update-database diyerek bunu yansıtabiliriz. drop-database dersek o veritabanı düşer.

......................................................RoleConfiguration. bunu neden kullanırız. çok sayıda kulanıcı olabilir bunların organizasyonun yapıldığı sistem kim admin olacak kim kullanıcı olacak bunu belirleyebiliriz.
Repositories altındaki Config klasörü altına RoleConfiguration class'ı ekleriz.
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Repositories.EFCore.Config
{
    public class RoleConfiguration : IEntityTypeConfiguration<IdentityRole> // ilgili interface'i implemete ederiz.
    {
        public void Configure(EntityTypeBuilder<IdentityRole> builder)
        {
            builder.HasData(
                new IdentityRole
                {
                    Name = "User",  // User dediklerimiz USER olacak demektir bu.
                    NormalizedName = "USER"
                },
                new IdentityRole
                {
                    Name="Editor",
                    NormalizedName="EDITOR"
                },
                new IdentityRole
                {
                    Name = "Admin",
                    NormalizedName = "ADMIN"
                }
                 // birden fazla rol tanımlaması yapabiliriz bu sistem ile.

            );
        }
    }
}
....................................................... şimdi RepositoryContext'e geleceğiz IdentityDbContext'i implemente eden clas'a geleceğiz. 

namespace Repositories.EFCore
{
    public class RepositoryContext : IdentityDbContext<User> // artık IdentityDbContext'i kullanacağız. 
    {                                                 // user aslında IdentityUser'dir.  
        public RepositoryContext(DbContextOptions options) :
            base(options)
        {

        }
                public DbSet<Book> Books { get; set; }
        public DbSet<Category> Categories { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
        
            base.OnModelCreating(modelBuilder); // bu önemlidir bunu kullanmamız lazım ilgili tablolar oluşacak böylece. Migrationslar gerekitiği gibi olur bu sistem ile. 
            //modelBuilder.ApplyConfiguration(new BookConfig());
            //modelBuilder.ApplyConfiguration(new RoleConfiguration());
            modelBuilder.ApplyConfigurationsFromAssembly(Assembly.GetExecutingAssembly()); // Bu metot ile RoleConfiguration'i tam olarak eklemiş oluruz. IEntityTypeConfiguration kullanan yapıları burada toplamış olacağız bu sistem ile.

        }

// Bu değişiklikleri eklemek için bizim migrations vermemiz lazım ve update-database dememiz lazım.

..// bu sistem ile rol tanımlarını yapmış olduk.....................................................................................................................................................................................................................................................................................................................................................................................
...........................................................
...........................................................Entities altındaki DataTransferObjects klasöründ bir class oluştururuz record bir class olacak.

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Entities.DataTransferObjects
{
    public record UserForRegistrationDto // record tipli bir class olacak. 
    {
        public string? FirstName { get; init; }
        public string? LastName { get; init; }

        [Required(ErrorMessage ="Username is required.")]
        public string? UserName { get; init; }

        [Required(ErrorMessage = "Password is required.")]
        public string? Password { get; init; }
        
        public string? Email { get; init; }
        public string? PhoneNumber { get; init; }

        public ICollection<string>? Roles { get; init; }

    }
}
...............................................................web api altındaki utilities klasöründek AutoMapper klasörünün içindeki MappingProfile.cs'i düzenleriz. 

using AutoMapper;
using Entities.DataTransferObjects;
using Entities.Models;

namespace WebApi.Utilities.AutoMapper
{
    public class MappingProfile : Profile
    {
        public MappingProfile()
        {
            CreateMap<BookDtoForUpdate, Book>().ReverseMap();
            CreateMap<Book, BookDto>();
            CreateMap<BookDtoForInsertion, Book>();
            CreateMap<UserForRegistrationDto, User>();
        
        }

    }
}

........................................................ Services katmanına geleceğiz oradaki Contracts klasöründe IAuthenticationService.cs ekleyeceğiz.
using Entities.DataTransferObjects;
using Microsoft.AspNetCore.Identity;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Contracts
{
    public interface IAuthenticationService
    {
        Task<IdentityResult> RegisterUser(UserForRegistrationDto userForRegistrationDto);
        Task<bool> ValidateUser(UserForAuthenticationDto userForAuthDto);
        Task<TokenDto> CreateToken(bool populateExp);
        Task<TokenDto> RefreshToken(TokenDto tokenDto);
       
    }
}

............................................... şimdi ise AuthenticationManager.cs'i ekleyeceğiz Services altına direkt olarak.
using AutoMapper;
using Entities.DataTransferObjects;
using Entities.Exceptions;
using Entities.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using Services.Contracts;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;

namespace Services
{
    public class AuthenticationManager : IAuthenticationService
    {
        private readonly ILoggerService _logger;
        private readonly IMapper _mapper;
        private readonly UserManager<User> _userManager;
        private readonly IConfiguration _configuration;

        private User? _user;

        public AuthenticationManager(ILoggerService logger, 
            IMapper mapper, 
            UserManager<User> userManager, 
            IConfiguration configuration)
        {
            _logger = logger;
            _mapper = mapper;
            _userManager = userManager;
            _configuration = configuration;
        }

        public async Task<IdentityResult> RegisterUser(UserForRegistrationDto userForRegistrationDto)
        {
            var user = _mapper.Map<User>(userForRegistrationDto); // mapleme yaptık. 

            var result = await _userManager
                .CreateAsync(user, userForRegistrationDto.Password); 
              
            if (result.Succeeded)
                await _userManager.AddToRolesAsync(user, userForRegistrationDto.Roles);
            return result;

        } // bir logic işlettik. 

        
        public async Task<TokenDto> CreateToken(bool populateExp)
        {
            var signinCredentials = GetSignInCredentials();
            var claims = await GetClaims();
            var tokenOptions = GenerateTokenOptions(signinCredentials, claims);

            var refreshToken = GenerateRefreshToken();
            _user.RefreshToken = refreshToken;

            if (populateExp)
                _user.RefreshTokenExpiryTime = DateTime.Now.AddDays(7);

            await _userManager.UpdateAsync(_user);
            
            var accessToken =  new JwtSecurityTokenHandler().WriteToken(tokenOptions);
            return new TokenDto()
            {
                AccessToken = accessToken,
                RefreshToken = refreshToken
            };
        }



        public async Task<bool> ValidateUser(UserForAuthenticationDto userForAuthDto)
        {
            _user = await _userManager.FindByNameAsync(userForAuthDto.UserName);
            var result = (_user != null && await _userManager.CheckPasswordAsync(_user, userForAuthDto.Password));
            if(!result)
            {
                _logger.LogWarning($"{nameof(ValidateUser)} : Authentication failed. Wrong username or password.");
            }
            return result;
        }

        private SigningCredentials GetSignInCredentials()
        {
            var jwtSettings = _configuration.GetSection("JwtSettings");
            var key = Encoding.UTF8.GetBytes(jwtSettings["secretKey"]);
            var secret = new SymmetricSecurityKey(key);
            return new SigningCredentials(secret, SecurityAlgorithms.HmacSha256);
        }

        private async Task<List<Claim>> GetClaims()
        {
            var claims = new List<Claim>()
            {
                new Claim(ClaimTypes.Name, _user.UserName)
            };

            var roles = await _userManager
                .GetRolesAsync(_user);

            foreach (var role in roles)
            {
                claims.Add(new Claim(ClaimTypes.Role, role));
            }
            return claims;
        }

        private JwtSecurityToken GenerateTokenOptions(SigningCredentials signinCredentials, 
            List<Claim> claims)
        {
            var jwtSettings = _configuration.GetSection("JwtSettings");

            var tokenOptions = new JwtSecurityToken(
                    issuer: jwtSettings["validIssuer"],
                    audience: jwtSettings["validAudience"],
                    claims: claims,
                    expires: DateTime.Now.AddMinutes(Convert.ToDouble(jwtSettings["expires"])),
                    signingCredentials: signinCredentials);
            
            return tokenOptions;
        }

        private string GenerateRefreshToken()
        {
            var randomNumber = new byte[32];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(randomNumber);
                return Convert.ToBase64String(randomNumber);
            }
        }

        private ClaimsPrincipal GetPrincipalFromExpiredToken(string token)
        {
            var jwtSettings = _configuration.GetSection("JwtSettings");
            var secretKey = jwtSettings["secretKey"];

            var tokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,
                ValidIssuer = jwtSettings["validIssuer"],
                ValidAudience = jwtSettings["validAudience"],
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))
            };

            var tokenHandler = new JwtSecurityTokenHandler();
            SecurityToken securityToken;

            var principal = tokenHandler.ValidateToken(token, tokenValidationParameters,
                out securityToken);

            var jwtSecurityToken = securityToken as JwtSecurityToken;
            if(jwtSecurityToken is null ||
                !jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256,
                StringComparison.InvariantCultureIgnoreCase))
            {
                throw new SecurityTokenException("Invalid token.");
            }
            return principal;
        }

        public async Task<TokenDto> RefreshToken(TokenDto tokenDto)
        {
            var principal = GetPrincipalFromExpiredToken(tokenDto.AccessToken);
            var user = await _userManager.FindByNameAsync(principal.Identity.Name);

            if (user is null ||
                user.RefreshToken != tokenDto.RefreshToken ||
                user.RefreshTokenExpiryTime <= DateTime.Now)
                throw new RefreshTokenBadRequestException();

            _user = user;
            return await CreateToken(populateExp: false);
        }
    }
}
.................................................................IServiceMaganager üzerindeki değişiklikler.
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Services.Contracts
{
    public interface IServiceManager
    {
        IBookService BookService { get; }
        ICategoryService CategoryService { get; }
        IAuthenticationService AuthenticationService { get; } // bunu eklemiş olduk burada.

    }
}
...................................... Şimdi ise ServiceMaganager.cs'e ekleme yapacağız.

using AutoMapper;
using Entities.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Repositories.Contracts;
using Services.Contracts;


namespace Services
{
    public class ServiceManager : IServiceManager
    {
        private readonly IBookService _bookService;
        private readonly ICategoryService _categoryService;
        private readonly IAuthenticationService _authencationService; // bunu ekledik.

        public ServiceManager(IBookService bookService, 
            ICategoryService categoryService, 
            IAuthenticationService authencationService) // burada DI ile ataması yapılıyor.
        {
            _bookService = bookService;
            _categoryService = categoryService;
            _authencationService = authencationService;
        }

        public IBookService BookService => _bookService;

        public IAuthenticationService AuthenticationService => _authencationService; // bu servisi ServiceManager ile kullanbilir hale geldik.
        
        public ICategoryService CategoryService => _categoryService;
    }
}

..............................................................Presentation içerisinde Controller klasöründe bir AuthenticationController.cs ekleriz.
using Entities.DataTransferObjects;
using Microsoft.AspNetCore.Mvc;
using Presentation.ActionFilters;
using Services.Contracts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Presentation.Controllers
{
    [ApiController]
    [Route("api/authentication")] // Route bilgisi belirleriz.
    [ApiExplorerSettings(GroupName = "v1")]
    public class AuthenticationController : ControllerBase // bunu kalıtır. 
    {
        private readonly IServiceManager _service; // servisi Controllera çekeriz burada DI ile.
        public AuthenticationController(IServiceManager service)
        {
            _service = service;
        }

        
        [HttpPost]
        [ServiceFilter(typeof(ValidationFilterAttribute))]
        public async Task<IActionResult> RegisterUser([FromBody] UserForRegistrationDto userForRegistrationDto)
        {
            var result = await _service
                .AuthenticationService
                .RegisterUser(userForRegistrationDto);

            if(!result.Succeeded)
            {
                foreach (var error in result.Errors)
                {
                    ModelState.TryAddModelError(error.Code, error.Description);
                }
                return BadRequest(ModelState);
            }

            return StatusCode(201);
        }


        [HttpPost("login")]
        [ServiceFilter(typeof(ValidationFilterAttribute))]
        public async Task<IActionResult> Authenticate([FromBody] UserForAuthenticationDto user)
        {
            if (!await _service.AuthenticationService.ValidateUser(user))
                return Unauthorized(); // 401

            var tokenDto = await _service
                .AuthenticationService
                .CreateToken(populateExp: true);

            return Ok(tokenDto);
        }
        

        [HttpPost("refresh")]
        [ServiceFilter(typeof(ValidationFilterAttribute))]
        public async Task<IActionResult> Refresh([FromBody] TokenDto tokenDto)
        {
            var tokenDtoToReturn = await _service
                .AuthenticationService
                .RefreshToken(tokenDto);
            return Ok(tokenDtoToReturn);
        }


    }
}

.JWT.........................................................................JWT.........................................................................JWT........................................................................
.JWT.........................................................................JWT.........................................................................JWT.........................................................................JWT.........................................................................JWT........................................................................
.JWT.........................................................................JWT.........................................................................JWT........................................................................
.JWT.........................................................................JWT.........................................................................JWT.........................................................................JWT.........................................................................JWT........................................................................
istemci kullanıcı adı ve şifre gönderir endpoint noktasından. request'in body'sine kullanıcı adı ve şifre koyar. sunucu stateless'tir. bunu yorumlar ve bir yanıt döner. ilgili yetkiye bağlı olarak bir token döner. 
rest gereği sunucu stateless olmalıdır durumsuz yani. sunucu istemcilerin taleplerini tutmaz.   
token içerisinde UserName subject user roles useful information vs bulunur. kullanıcı bu tokeni alır ve yeni isteklerinde kullanır header tag'ına authentication:Bearer token ekler. netice olarak authentication olacak. sunucu ilgili tokeni alıp yorumlayacak ve geçerl mi doğru mu bakacak ve ona göre bir response dönecek  ok veya BadRequest(401,403).     

token 3 parçadan oluşur. header,payload,signature. header açık olan bilgiler algoritmanın hangi algoritma olduğu sha256 vs burada bir şifreleme yoktur encode'dir çözülebilir ve typ:JWT gibi bir alan vardır. payload ise kullanıcı için hassas olmayan bilgiler şifrelenmiş bir yapı değildir encode'dir decode edilebilir tokenin geçerlilik tarihi vs hassas bilgiler buradadır. signature kısmı = bir tokenin bu sunucu tarafından oluşturulup oluşturulmadığını burada kontrol ederiz.    

......................................................appsettings.json. değişken tanımlarını içeren yer wep api içerisindeki yer.  

{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },

  "AllowedHosts": "*",
  "ConnectionStrings": {

    "sqlConnection": "Data Source=(localdb)\\MSSQLLocalDB;Initial Catalog=modelDB;Integrated Security=True;Connect Timeout=30;Encrypt=False;Trust Server Certificate=False;Application Intent=ReadWrite;Multi Subnet Failover=False"

  },

  "JwtSettings": { // Proje üzerinde değil appsettingste tutmak en güvenlisidir.
    "validIssuer": "bsstoreapi", // bu anahatarı üreten taraftır. onu ifade eder.  
    "validAudience": "http://localhost:3000", // bu anahtarı kimler kullanıyor bunu belirleriz. hangi porttan kontrol edilecek.  
    "secretKey": "s`9&Paw&i6?G~t+XB&e<QUPv}7j4LKsUYcAPXiV$-f,^c(4`tmueS/ziCcTxFf_y", // kriptoloji için secretkey üretiriz.
    "expires": 60 // dakika mı saniye mi bunu belirleyebiriz. tokenin geçerlikij süresi için kullanılan sistem. 
    //Issuer tokeni üreten audience ise tüketen taraftır.   
  }
   
}

..................................................................ConfigureJWT. ServicesExtensions.cs'e ekleme yapacağız.
 public static void ConfigureJWT(this IServiceCollection services, 
     IConfiguration configuration)
 {
     var jwtSettings = configuration.GetSection("JwtSettings"); // jwtSettings alanını alırız appsettings.json'dan. 
     var secretKey = jwtSettings["secretKey"]; // jwtSettings'ten secretkey'i alırız.

     services.AddAuthentication(opt =>  
     {
         opt.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme; // Authentication şeması burada Bearer'i kullandık. Microsoft.AspNetCore.Authentication.JwtBearer indiririz.
         opt.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme; // 
     }).AddJwtBearer(options => 
         options.TokenValidationParameters = new TokenValidationParameters
         {
             ValidateIssuer = true, // keyi kim üretti doğrulamak istiyorum.
             ValidateAudience = true, // geçerli bir tüketici,alıcı mı kontrol et.
             ValidateLifetime = true, // geçerlilik süresi kontrol et.
             ValidateIssuerSigningKey = true, // anahtar için doğrulama
             ValidIssuer = jwtSettings["validIssuer"], // geçerli üretici belirtiriz.
             ValidAudience = jwtSettings["validAudience"], // geçerli çözücü belirleriz.
             IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey)) // secretkeyi belirtiriz.
         }
     );
 }

// şimdi ise Program.cs'e ekleme yapacağız   builder.Services.ConfigureJWT(builder.Configuration);   bunu ekleriz.
 
..........................................Endpointlerin korunması. metotların üzerine [Authorize] yazarsak koruma altına almış oluruz. ama Controller'ın üzerine eklersek bütün metotları koruma altına almış oluruz. eğer geçerli token yoksa o zaman bize 401 döner yani giriş izni bakma izni vermez sistem.

        [Authorize] // metotu koruma altına aldığımızı belli eder. Controllar'ın üstüne ekleseydik o zaman tüm metotları koruma altına alırdı.
        [HttpHead]
        [HttpGet(Name = "GetAllBooksAsync")]
        [ServiceFilter(typeof(ValidateMediaTypeAttribute))]
        //[ResponseCache(Duration = 60)]
        public async Task<IActionResult> GetAllBooksAsync([FromQuery] BookParameters bookParameters)
        {
            var linkParameters = new LinkParameters()
            {
                BookParameters = bookParameters,
                HttpContext = HttpContext
            };

            var result = await _manager
                .BookService
                .GetAllBooksAsync(linkParameters, false);

            Response.Headers.Add("X-Pagination", 
                JsonSerializer.Serialize(result.metaData));

            return result.linkResponse.HasLinks ?
                Ok(result.linkResponse.LinkedEntities) :
                Ok(result.linkResponse.ShapedEntities);
        }

............................................. User For Authentication. DataTransferObjects klasöründe UserForAuthenticationDto.cs oluştururuz. 
// Login olurken kullanacağız aslında. kullanıcı adı ve şifreyi kullanıcıdan almak içinn kullanırız.  
using System.ComponentModel.DataAnnotations;

namespace Entities.DataTransferObjects
{
    public record UserForAuthenticationDto // record olacak class olmayacak. 
    {
        [Required(ErrorMessage = "Username is required.")]
        public string? UserName { get; init; } // record olduğu için init olmalı veri taşıyacak bir değişim yapamayacak bu sistem ile çünkü bir DTO.
        
        [Required(ErrorMessage = "Password is required.")]
        public string? Password { get; init; }
    }
}

.............................................. Validate User. kontrol etmek için kullanılacak sistem. 
// Services katmanındaki IAuthenticationService.cs'e imza eklemesi yapacağız.

using Entities.DataTransferObjects;
using Microsoft.AspNetCore.Identity;


namespace Services.Contracts
{
    public interface IAuthenticationService
    {
        Task<IdentityResult> RegisterUser(UserForRegistrationDto userForRegistrationDto); // Task ile async olmasını sağlarız.
        Task<bool> ValidateUser(UserForAuthenticationDto userForAuthDto); ValidateUser metotu. 
        Task<TokenDto> CreateToken(bool populateExp); // Token oluşturan metot imzası.
        Task<TokenDto> RefreshToken(TokenDto tokenDto);
       
    }
}
................................................ AuthenticationManager.cs içerisi.

using AutoMapper;
using Entities.DataTransferObjects;
using Entities.Exceptions;
using Entities.Models;
using Microsoft.AspNetCore.Identity;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using Services.Contracts;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Security.Cryptography;
using System.Text;

namespace Services
{
    public class AuthenticationManager : IAuthenticationService
    {
        private readonly ILoggerService _logger;
        private readonly IMapper _mapper;
        private readonly UserManager<User> _userManager;
        private readonly IConfiguration _configuration;

        private User? _user; // User'e ait bilgileri içerecek ve sadece sınıf içerisinde kullanabileceğiz bunu.

        public AuthenticationManager(ILoggerService logger, 
            IMapper mapper, 
            UserManager<User> userManager, 
            IConfiguration configuration)
        {
            _logger = logger;
            _mapper = mapper;
            _userManager = userManager;
            _configuration = configuration;
        }

        public async Task<TokenDto> CreateToken(bool populateExp)
        {
            var signinCredentials = GetSignInCredentials();
            var claims = await GetClaims();
            var tokenOptions = GenerateTokenOptions(signinCredentials, claims);

            var refreshToken = GenerateRefreshToken();
            _user.RefreshToken = refreshToken;

            if (populateExp)
                _user.RefreshTokenExpiryTime = DateTime.Now.AddDays(7);

            await _userManager.UpdateAsync(_user);
            
            var accessToken =  new JwtSecurityTokenHandler().WriteToken(tokenOptions);
            return new TokenDto()
            {
                AccessToken = accessToken,
                RefreshToken = refreshToken
            };
        }

        public async Task<IdentityResult> RegisterUser(UserForRegistrationDto userForRegistrationDto)
        {
            var user = _mapper.Map<User>(userForRegistrationDto);

            var result = await _userManager
                .CreateAsync(user, userForRegistrationDto.Password);

            if (result.Succeeded)
                await _userManager.AddToRolesAsync(user, userForRegistrationDto.Roles);
            return result;
        }

        public async Task<bool> ValidateUser(UserForAuthenticationDto userForAuthDto) // bir Dto alacak metot içerisindeki 
        {
            _user = await _userManager.FindByNameAsync(userForAuthDto.UserName); // UserManager'den kullanıcıadını al.
            var result = (_user != null && await _userManager.CheckPasswordAsync(_user, userForAuthDto.Password)); // kullanıcı null değilse o zaman parola kontrol et.
            if(!result) // geçerli değilse o zaman logger'a düşecek hata olduğu.
            {
                _logger.LogWarning($"{nameof(ValidateUser)} : Authentication failed. Wrong username or password.");
            }
            return result; // bir sıkıntı yoksa o zaman bize doğrulama dönecek. 
            
        }

        private SigningCredentials GetSignInCredentials() // giriş için. giriş detayları vs. sign bilgilerini doğrulayacak şekilde ilerleyeceğiz. 
        {

            var jwtSettings = _configuration.GetSection("JwtSettings"); // "" içerisindeki kelimeler appsettings.json'daki ile aynı olmalıdır.
            var key = Encoding.UTF8.GetBytes(jwtSettings["secretKey"]);
            var secret = new SymmetricSecurityKey(key);
            return new SigningCredentials(secret, SecurityAlgorithms.HmacSha256); // key ve kullanılan algoritma belirtilir.

       }

        private async Task<List<Claim>> GetClaims() // liste içerisinde Claim döneceğiz.
        {
            var claims = new List<Claim>()
            {
                new Claim(ClaimTypes.Name, _user.UserName) 
            };

            var roles = await _userManager
                .GetRolesAsync(_user);

            foreach (var role in roles)
            {
                claims.Add(new Claim(ClaimTypes.Role, role));
            }
            return claims; // kullanıcı adı ve rolleri Claim içerisine ekleyip koyduk. 
        }

        private JwtSecurityToken GenerateTokenOptions(SigningCredentials signinCredentials, 
            List<Claim> claims)
        { // iki parametre alacak. Claimler ve SigningCredentials metotundan gelen bilgiler. 
            var jwtSettings = _configuration.GetSection("JwtSettings");

            var tokenOptions = new JwtSecurityToken(
                    issuer: jwtSettings["validIssuer"],
                    audience: jwtSettings["validAudience"],
                    claims: claims, 
                    expires: DateTime.Now.AddMinutes(Convert.ToDouble(jwtSettings["expires"])), // AddMinutes dedik böylece kaç dakika olacka bunu belirleyebiliriz bu sistemde. expires 60 olduğu için 60dk geçerli olacak bizim tokenimiz. bunu belirleriz aslında.
                    signingCredentials: signinCredentials); // giriş bilgilerinin detayları buradadır. 
            
            return tokenOptions;
        }

        private string GenerateRefreshToken()
        {
            var randomNumber = new byte[32];
            using (var rng = RandomNumberGenerator.Create())
            {
                rng.GetBytes(randomNumber);
                return Convert.ToBase64String(randomNumber);
            }
        }

        private ClaimsPrincipal GetPrincipalFromExpiredToken(string token)
        {
            var jwtSettings = _configuration.GetSection("JwtSettings");
            var secretKey = jwtSettings["secretKey"];

            var tokenValidationParameters = new TokenValidationParameters
            {
                ValidateIssuer = true,
                ValidateAudience = true,
                ValidateLifetime = true,
                ValidateIssuerSigningKey = true,
                ValidIssuer = jwtSettings["validIssuer"],
                ValidAudience = jwtSettings["validAudience"],
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(secretKey))
            };

            var tokenHandler = new JwtSecurityTokenHandler();
            SecurityToken securityToken;

            var principal = tokenHandler.ValidateToken(token, tokenValidationParameters,
                out securityToken);

            var jwtSecurityToken = securityToken as JwtSecurityToken;
            if(jwtSecurityToken is null ||
                !jwtSecurityToken.Header.Alg.Equals(SecurityAlgorithms.HmacSha256,
                StringComparison.InvariantCultureIgnoreCase))
            {
                throw new SecurityTokenException("Invalid token.");
            }
            return principal;
        }

        public async Task<TokenDto> RefreshToken(TokenDto tokenDto)
        {
            var principal = GetPrincipalFromExpiredToken(tokenDto.AccessToken);
            var user = await _userManager.FindByNameAsync(principal.Identity.Name);

            if (user is null ||
                user.RefreshToken != tokenDto.RefreshToken ||
                user.RefreshTokenExpiryTime <= DateTime.Now)
                throw new RefreshTokenBadRequestException();

            _user = user;
            return await CreateToken(populateExp: false);
        }
    }
}
.............................................................. CreateToken. Token oluşturmak için implementasyon. IAuthenticationService.cs'e ekleme yapacağız.
           Task<TokenDto> CreateToken(bool populateExp); // bunu ekledik.
// şimdi ise AuthenticationManager'e ekleme yapacağız.
// System.Identity.Tokens.Jwt indiririz. 

        public async Task<TokenDto> CreateToken(bool populateExp) // async metot olduğu için Task içerisinde. 
        {

            var signinCredentials = GetSignInCredentials();         // GetSignInCredentials() metotu ekleriz yukarıda var. 
            var claims = await GetClaims(); // GetClaims metotu yazacağız oda yukarıda var 
            var tokenOptions = GenerateTokenOptions(signinCredentials, claims); // Token seçenekleri yazacak metot. buda yukarıda.

            var refreshToken = GenerateRefreshToken(); // taze token oluştur dedik.
            _user.RefreshToken = refreshToken;

            if (populateExp)
                _user.RefreshTokenExpiryTime = DateTime.Now.AddDays(7);

            await _userManager.UpdateAsync(_user);
            
            var accessToken =  new JwtSecurityTokenHandler().WriteToken(tokenOptions);
            return new TokenDto()
            {
                AccessToken = accessToken,
                RefreshToken = refreshToken
            };
        }

.....................................................
....................................................Authenticate. Controller üzerinde bir yapı tanımlayacağız. önce Services katmanına gideceğiz. AuthenticationController var bunun üzerinde bir metot tanımlaması yapacağız. 

using Entities.DataTransferObjects;
using Microsoft.AspNetCore.Mvc;
using Presentation.ActionFilters;
using Services.Contracts;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Presentation.Controllers
{
    [ApiController]
    [Route("api/authentication")]
    [ApiExplorerSettings(GroupName = "v1")]
    public class AuthenticationController : ControllerBase
    {
        private readonly IServiceManager _service;
        public AuthenticationController(IServiceManager service)
        {
            _service = service;
        }

        [HttpPost]
        [ServiceFilter(typeof(ValidationFilterAttribute))]
        public async Task<IActionResult> RegisterUser([FromBody] UserForRegistrationDto userForRegistrationDto)
        {
            var result = await _service
                .AuthenticationService
                .RegisterUser(userForRegistrationDto);

            if(!result.Succeeded)
            {
                foreach (var error in result.Errors)
                {
                    ModelState.TryAddModelError(error.Code, error.Description);
                }
                return BadRequest(ModelState);
            }

            return StatusCode(201);
        }


        [HttpPost("login")] // login endpointi 
        [ServiceFilter(typeof(ValidationFilterAttribute))] // Servis filtreleme için kullanırız. 
        public async Task<IActionResult> Authenticate([FromBody]  UserForAuthenticationDto user) // çalışacak metot.
        {
            if (!await _service.AuthenticationService.ValidateUser(user))
                return Unauthorized(); // 401 

            var tokenDto = await _service // servisteki token üretici ile token üretiriz. 
                .AuthenticationService
                .CreateToken(populateExp: true); // Token oluşmasını sağlarız böylece. 

            return Ok(tokenDto);
        }


        [HttpPost("refresh")]
        [ServiceFilter(typeof(ValidationFilterAttribute))]
        public async Task<IActionResult> Refresh([FromBody] TokenDto tokenDto)
        {
            var tokenDtoToReturn = await _service
                .AuthenticationService
                .RefreshToken(tokenDto);
            return Ok(tokenDtoToReturn);
        }


    }
}

..................................................................Token kullanımı.Login metotu bize bir Token dönecek bunu kullanacağız.
// proje ayakta olmalı. eldeki tokeni kullanarak sunucuya gitmek için. 
.................................................. Role tabanlı bir yetkilendirme. birden fazla rolü kullanan kullanıcı tanımları. roles kısmına "Admin ekledik mesela"  api/Authentication metotunun istediği verileri verir ve rolleri belirleyebiliriz.
[Authorize(Roles = "User")] // User olan burayı kullanabilsin. 
[Authorize(Roles = "Admin","Editor")] // admin veya editör olan burayı kullanabilsin. 

        [Authorize(Roles = "Editor, Admin")]
        [ServiceFilter(typeof(ValidationFilterAttribute))]
        [HttpPut("{id:int}")]
        public async Task<IActionResult> UpdateOneBookAsync([FromRoute(Name = "id")] int id,
            [FromBody] BookDtoForUpdate bookDto)
        {
            await _manager.BookService.UpdateOneBookAsync(id, bookDto, false);
            return NoContent(); // 204
        }

.......................................................RefreshToken. 





........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................


........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................


........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
........................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
