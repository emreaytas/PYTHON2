..........................................................................................
tarayıcıda react.new yazınca codesandbox.io açılacak. burada react kodlama işlemleri yapabiliriz.
tarayıcılar sadece html css ve js kodlarını derlerler...

import {useState} from "react"; // useState() kullanabilmek için. 


export default function App(){
    const[advice, setAdvice] = useState("");
    const[count,setCount] = useState(0);

    async function getAdvice(){

    const res = await fetch('https://api.adviceslip.com/advice');
    const data = await res.json();
    setAdvice(data.slip.advice);
    setCount(c => c + 1); 
    }


useEffect(function(){
getAdvice();
},[]);


    return {
    <div>
    <h1>{advice}</h1>
    <button onClick = {getAdvice}>Get Advice</button>
    <Message count = {count}/>
    </div>
    }
} // burada biz bir metotun html gibi tarayıcının okuyabildiği şeyleri döndüğünü görebiliriz.


function Message(props){

    return (
           <p>
    
    You have read <strong>{props.count}</strong> pieces of advice
    
    </p>
    );
}


useState ile başlangıç değer belirler ve değişim yapabiliriz ne gibi değişim olacak bunu belirleyebiliriz.

..............................................................................................................................................................................................................................................................................
jsx html css ve js kodları taşıyabilen dosyadır.
react componentler üzerinden çalışan bir sistemdir.
..............................................................................................................................................................................................................................................................................
önce bir klasör oluşturur sonra dizin olarak içine gideriz. sonra react projemizi oluştururuz. 

npx create-react-app pizza-menu  bu şekilde terminalde olduğumuz klasörde bir react oluşturduk.
npx create-react-app@5 pizza-menu   @5 ile 5. sürümde bir react oluşturduk.

npm install web-vitals
npm start

react bir js kütüphanesidir. next.js ise react üzerine kuruludur.

map filter reduce ve filter sort .................................................................................................................................................................................................................................................................................
map filter reduce ve filter sort ...


        map, filter, reduce, forEach ve sort Nedir, Ne Değildir?
        Bu beş JavaScript array metodu, React'ta özellikle liste yönetimi ve veri manipülasyonu sırasında sıkça kullanılır. İşte her birinin detaylı açıklaması:

        1. map()
        map metodu, bir dizideki her bir elemanı dönüştürerek yeni bir dizi oluşturur. Mevcut diziyi değiştirmez, yeni bir dizi döner.

        Kullanım Alanı:
        React'ta bir listeyi dinamik olarak oluşturmak için kullanılır (örneğin, bir ul içindeki li öğeleri).
        Özellikleri:
        Değiştirmez: Orijinal diziyi değiştirmez.
        Her eleman üzerinde çalışır: Her eleman için bir dönüş değeri döner.
        Yeni bir dizi döner.
        Örnek Kullanım:
        React'ta bir liste oluşturma:

        javascript
        Kodu kopyala
        const items = ["Pizza", "Burger", "Pasta"];
        const list = items.map((item, index) => <li key={index}>{item}</li>);

        return <ul>{list}</ul>;
        2. filter()
        filter metodu, bir dizideki elemanları belirli bir koşula göre filtreler ve yalnızca bu koşulu sağlayan elemanlarla yeni bir dizi döner.

        Kullanım Alanı:
        React'ta belirli bir şarta göre öğeleri göstermek.
        Özellikleri:
        Filtreleme yapar: Şarta uygun elemanları seçer.
        Yeni bir dizi döner: Orijinal dizi değişmez.
        Örnek Kullanım:
        React'ta belirli bir kategorideki ürünleri göstermek:

        javascript
        Kodu kopyala
        const products = [
        { name: "Pizza", category: "Food" },
        { name: "Shampoo", category: "Cosmetic" },
        { name: "Burger", category: "Food" }
        ];

        const foodItems = products.filter(product => product.category === "Food");

        return (
        <ul>
            {foodItems.map((item, index) => (
            <li key={index}>{item.name}</li>
            ))}
        </ul>
        );
        3. reduce()
        reduce metodu, bir dizideki elemanları belirli bir işleme tabi tutarak tek bir değer döndürür. Bu, toplama, çarpma veya birleştirme gibi işlemler olabilir.

        Kullanım Alanı:
        React'ta bir listenin toplamını veya özeti hesaplamak.
        Özellikleri:
        Bir değer döner: Bu değer bir sayı, string veya başka bir dizi olabilir.
        İşlemi tekrarlayarak çalışır: İlk değerden başlayarak tüm elemanlar üzerinde çalışır.
        Örnek Kullanım:
        React'ta toplam fiyat hesaplama:

        javascript
        Kodu kopyala
        const cart = [
        { name: "Pizza", price: 10 },
        { name: "Burger", price: 5 },
        { name: "Pasta", price: 8 }
        ];

        const totalPrice = cart.reduce((total, item) => total + item.price, 0);

        return <p>Total Price: ${totalPrice}</p>;
        4. forEach()
        forEach metodu, bir dizideki her bir eleman üzerinde işlem yapar. Ancak forEach, dönüş değeri döndürmez.

        Kullanım Alanı:
        Sadece yan etkiler için (ör. konsola yazdırmak, bir API'ye istek yapmak).
        Özellikleri:
        Dönüş değeri yoktur: Yeni bir dizi oluşturmaz.
        Orijinal diziyle çalışır: Yalnızca işlem yapar.
        Örnek Kullanım:
        React'ta debug için konsola yazdırma:

        javascript
        Kodu kopyala
        const items = ["Pizza", "Burger", "Pasta"];

        items.forEach(item => console.log(item));

        // Liste oluşturma işlemi için kullanılmaz!
        5. sort()
        sort metodu, bir dizideki elemanları sıralar. Varsayılan olarak elemanları string olarak sıralar, ancak sayısal veya özel sıralamalar için bir karşılaştırma fonksiyonu ile kullanılabilir.

        Kullanım Alanı:
        React'ta bir listeyi alfabetik, sayısal veya başka bir düzene göre sıralamak.
        Özellikleri:
        Orijinal diziyi değiştirir: sort, orijinal diziyi doğrudan değiştirir.
        Karşılaştırma Fonksiyonu: Sayısal veya özel sıralamalar için compareFunction kullanılır.
        Örnek Kullanım:
        React'ta bir listeyi alfabetik olarak sıralama:

        javascript
        Kodu kopyala
        const items = ["Burger", "Pizza", "Pasta"];

        const sortedItems = items.sort(); // Alfabetik sıralama

        return (
        <ul>
            {sortedItems.map((item, index) => (
            <li key={index}>{item}</li>
            ))}
        </ul>
        );
        Sayısal sıralama:

        javascript
        Kodu kopyala
        const numbers = [10, 5, 8];

        const sortedNumbers = numbers.sort((a, b) => a - b); // Küçükten büyüğe

        return (
        <ul>
            {sortedNumbers.map((num, index) => (
            <li key={index}>{num}</li>
            ))}
        </ul>
        );
        React'ta Kullanım Örnekleri
        Listeleme (map):
        javascript
        Kodu kopyala
        const todos = ["Learn React", "Practice JavaScript", "Build Projects"];

        return (
        <ul>
            {todos.map((todo, index) => (
            <li key={index}>{todo}</li>
            ))}
        </ul>
        );
        Filtreleme (filter):
        javascript
        Kodu kopyala
        const tasks = [
        { name: "Clean room", done: true },
        { name: "Learn React", done: false }
        ];

        const pendingTasks = tasks.filter(task => !task.done);

        return (
        <ul>
            {pendingTasks.map((task, index) => (
            <li key={index}>{task.name}</li>
            ))}
        </ul>
        );
        Toplama (reduce):
        javascript
        Kodu kopyala
        const expenses = [
        { name: "Groceries", amount: 30 },
        { name: "Transport", amount: 15 }
        ];

        const totalExpenses = expenses.reduce((total, expense) => total + expense.amount, 0);

        return <p>Total Expenses: ${totalExpenses}</p>;
        Sıralama (sort):
        javascript
        Kodu kopyala
        const items = ["Pizza", "Burger", "Pasta"];

        const sortedItems = items.sort(); // Alfabetik sıralama

        return (
        <ul>
            {sortedItems.map((item, index) => (
            <li key={index}>{item}</li>
            ))}
        </ul>
        );
        Yan Etki (forEach):
        javascript
        Kodu kopyala
        const logItems = ["Item 1", "Item 2", "Item 3"];

        logItems.forEach(item => console.log(item));
        Genel Karşılaştırma
        Metod	Ne Yapar?	Döner mi?	Tipik Kullanım
        map	Her elemanı dönüştürüp yeni bir dizi oluşturur.	Evet	Listeleme, UI öğeleri oluşturma.
        filter	Koşula uyan elemanları döndürür.	Evet	Şarta göre listeleme.
        reduce	Tek bir değer hesaplar (ör. toplam, çarpım).	Evet	Toplama, özet değer hesaplama.
        forEach	Her eleman üzerinde işlem yapar (yan etkiler).	Hayır	Konsola yazdırma, API çağrısı yapma.
        sort	Elemanları sıralar (alfabetik/sayısal).	Evet (Ama orijinali değiştirir)	Sıralama işlemleri.



..............................................................................................................................................................................................................................................................................
const book = getBook(1);

const { title, author, pages, publicationDate, genres, hasMovieAdaptation } =
  book;
console.log(title, author, pages, publicationDate, genres);
const primaryGenre = genres[0]; // [0] , [1] inndexleme böyle böyle gidiyor.
const [primaryGenre,secondaryGenre] = genres; // burada primaryGenre arrayin ilk değerini diğeri ise 2. değerini alacak 3. olsa üçüncü değerini alacaktı sırasıyla atama yapar.

..............................................................................................................................................................................................................................................................................

const [primaryGenre, secondaryGenre, ...otherGenres] = genres; // sırasıyla 0. 1. index atamaları sonra ... ile geri kalan hepsinin atamasını yapar bu sistem.
console.log(primaryGenre,secondaryGenre, otherGenres);

..............................................................................................................................................................................................................................................................................

const newGenres = [genres, "epic fantasy"]; // [['a','b','c','d'],'epic fantasy']   olur.
const newGenres = [...genres, "epic fantasy"]; // ['a','b','c','d','epic fantasy'];

const updatedBook = { ...book, moviePublicationDate: "2001-12-19" }; // bu yapı ile de güncelleme yapabiliriz.
updatedBook;

..............................................................................................................................................................................................................................................................................
1. İlk Yöntem:
javascript

const book = { title: "Some Book", author: "Some Author" };
const updatedBook = { ...book, moviePublicationDate: "2001-12-19" };

console.log(updatedBook);
// { title: 'Some Book', author: 'Some Author', moviePublicationDate: '2001-12-19' }

2. İkinci Yöntem:
javascript

const book = { title: "Some Book", author: "Some Author" };
const updatedBook = { book, moviePublicationDate: "2001-12-19" };

console.log(updatedBook);
// { book: { title: 'Some Book', author: 'Some Author' }, moviePublicationDate: '2001-12-19' }
..............................................................................................................................................................................................................................................................................

        1. JSX ve Tırnak İşaretleri
        JSX, HTML benzeri bir sözdizimine sahiptir, ancak JavaScript'i içeriğinde yazmanıza olanak tanır. Tırnak işaretleri, JSX'te hem metin değerlerini hem de ifadeleri belirtmek için kullanılır.


        Çift Tırnak (") ve Tek Tırnak (')
        HTML özelliklerinde string değerler belirtmek için çift veya tek tırnak kullanılır.
        React'ta genelde çift tırnak (") tercih edilir.
        Örnek:

        javascript
        Kodu kopyala
        // Çift tırnak
        const element = <img src="logo.png" alt="React Logo" />;

        // Tek tırnak
        const element = <img src='logo.png' alt='React Logo' />;
        Backtick (`) ve String Interpolation (${})
        ` (backtick), template literal oluşturmak için kullanılır. Bu, JavaScript ifadelerini ${} içinde yerleştirmenizi sağlar.
        React'ta dinamik veriler eklerken sıkça kullanılır.
        Örnek:

        javascript
        Kodu kopyala
        const imagePath = "logo.png";
        const altText = "React Logo";

        const element = <img src={`${imagePath}`} alt={`${altText}`} />;
        2. {}: JavaScript İfadelerini Kullanmak
        JSX'te, JavaScript ifadelerini yerleştirmek için {} kullanılır. Bu, değişken, fonksiyon çağrısı veya diğer ifadeleri yerleştirmek için yaygın bir yöntemdir.

        Dinamik Değişken Kullanımı
        javascript
        Kodu kopyala
        const name = "React";

        const element = <h1>Welcome to {name}!</h1>;
        // Çıktı: <h1>Welcome to React!</h1>
        Fonksiyon veya Hesaplama Kullanımı
        javascript
        Kodu kopyala
        const element = <p>{2 + 2}</p>;
        // Çıktı: <p>4</p>

        const getGreeting = () => "Hello, React!";
        const element2 = <h2>{getGreeting()}</h2>;
        // Çıktı: <h2>Hello, React!</h2>
        Koşullu Değerler (ternary operator)
        javascript
        Kodu kopyala
        const isLoggedIn = true;

        const element = <p>{isLoggedIn ? "Welcome back!" : "Please log in."}</p>;
        // Çıktı: <p>Welcome back!</p>
        3. Dinamik Sınıf Adları (className)
        CSS sınıf adlarını dinamik olarak belirlemek için ` veya {} kullanabilirsiniz.

        Static Class
        javascript
        Kodu kopyala
        const element = <div className="container"></div>;
        Dinamik Class (` ve ${})
        javascript
        Kodu kopyala
        const isActive = true;
        const element = <div className={`container ${isActive ? "active" : ""}`}></div>;
        // Çıktı: <div class="container active"></div>
        4. Inline Style
        React'ta style özelliği bir nesne alır, bu nedenle {} içinde bir JavaScript nesnesi belirtirsiniz.

        Static Style
        javascript
        Kodu kopyala
        const element = <div style={{ color: "red", fontSize: "20px" }}>Hello!</div>;
        Dinamik Style
        javascript
        Kodu kopyala
        const fontSize = 20;
        const element = <div style={{ color: "blue", fontSize: `${fontSize}px` }}>Hello!</div>;
        5. Event Handling
        Event'lerde dinamik ifadeler için {} kullanılır.

        Basit Kullanım
        javascript
        Kodu kopyala
        const handleClick = () => alert("Button clicked!");

        const button = <button onClick={handleClick}>Click Me!</button>;
        Dinamik Parametre
        javascript
        Kodu kopyala
        const handleClick = (name) => alert(`Hello, ${name}!`);

        const button = <button onClick={() => handleClick("React")}>Click Me!</button>;
        6. Dinamik İçerik ve Çocuklar
        Bir elementin içeriği dinamik olduğunda {} kullanabilirsiniz.

        Dinamik İçerik
        javascript
        Kodu kopyala
        const name = "React";

        const element = <h1>Hello, {name}!</h1>;
        Listeleme (map)
        javascript
        Kodu kopyala
        const items = ["Pizza", "Burger", "Pasta"];

        const list = (
        <ul>
            {items.map((item, index) => (
            <li key={index}>{item}</li>
            ))}
        </ul>
        );
        Tümünün Özet Örneği
        javascript
        Kodu kopyala
        const App = () => {
        const user = { name: "React Developer", isLoggedIn: true };
        const styles = { color: "green", fontSize: "18px" };
        const tasks = ["Learn React", "Build Projects", "Master JavaScript"];

        return (
            <div>
            <h1>Hello, {user.name}!</h1>
            <p style={styles}>{user.isLoggedIn ? "Welcome Back!" : "Please Log In"}</p>
            <ul>
                {tasks.map((task, index) => (
                <li key={index}>{task}</li>
                ))}
            </ul>
            </div>
        );
        };

        export default App;
        Önemli Notlar
        JSX'te HTML gibi görünse de aslında JavaScript'tir. Bu nedenle dinamik değerler {} ile ifade edilir.
        CSS sınıfı için className kullanılır. Normal HTML'deki class yerine className kullanmayı unutmayın.
        Her bileşenin bir key değeri olmalıdır. Özellikle listelerde benzersiz bir key verilmesi önemlidir.

..............................................................................................................................................................................................................................................................................

        1. if-else Kullanımı (JSX Dışında)
        Eğer bir if-else kontrolü kullanmak istiyorsanız, JSX'in dışında koşulları kontrol edebilir ve JSX'te döndürülecek değeri belirleyebilirsiniz.

        javascript
        Kodu kopyala
        const App = () => {
        const isLoggedIn = true;

        let message;
        if (isLoggedIn) {
            message = <h1>Welcome Back!</h1>;
        } else {
            message = <h1>Please Log In</h1>;
        }

        return <div>{message}</div>;
        };

        export default App;
        2. Ternary (Üçlü Operatör) ile if-else
        JSX içinde koşullu render yapmak için ternary operatörü kullanılabilir.

        javascript
        Kodu kopyala
        const App = () => {
        const isLoggedIn = true;

        return (
            <div>
            {isLoggedIn ? <h1>Welcome Back!</h1> : <h1>Please Log In</h1>}
            </div>
        );
        };

        export default App;
        3. Mantıksal && Operatörü
        Eğer yalnızca bir durumda içerik göstermeniz gerekiyorsa, && operatörünü kullanabilirsiniz. Bu, şart doğruysa (truthy) JSX'in render edilmesini sağlar.

        javascript
        Kodu kopyala
        const App = () => {
        const hasNotifications = true;

        return (
            <div>
            <h1>Dashboard</h1>
            {hasNotifications && <p>You have new notifications!</p>}
            </div>
        );
        };

        export default App;
        Not: Eğer hasNotifications değeri false veya null gibi bir falsy değer ise, React hiçbir şey render etmez.

        4. if-else ile Fonksiyon Kullanımı
        JSX'in dışında bir fonksiyon tanımlayarak if-else yapısını yönetebilirsiniz.

        javascript
        Kodu kopyala
        const App = () => {
        const isLoggedIn = false;

        const renderMessage = () => {
            if (isLoggedIn) {
            return <h1>Welcome Back!</h1>;
            } else {
            return <h1>Please Log In</h1>;
            }
        };

        return <div>{renderMessage()}</div>;
        };

        export default App;
        5. switch-case Kullanımı
        Birden fazla durumu kontrol etmeniz gerektiğinde switch-case kullanabilirsiniz.

        javascript
        Kodu kopyala
        const App = () => {
        const status = "loading"; // "logged-in", "guest"

        const renderContent = () => {
            switch (status) {
            case "logged-in":
                return <h1>Welcome Back!</h1>;
            case "guest":
                return <h1>Please Log In</h1>;
            case "loading":
                return <h1>Loading...</h1>;
            default:
                return <h1>Unknown Status</h1>;
            }
        };

        return <div>{renderContent()}</div>;
        };

        export default App;
        6. Koşullu Sınıf Adı (className) Kullanımı
        React'ta koşullara göre CSS sınıf adları belirlemek için de if-else veya ternary yapısı kullanabilirsiniz.

        javascript
        Kodu kopyala
        const App = () => {
        const isActive = true;

        return (
            <div className={isActive ? "active" : "inactive"}>
            This is a dynamic class example.
            </div>
        );
        };

        export default App;
        7. İçe İçe Koşullar
        Birden fazla koşulu iç içe kontrol etmek için if-else veya ternary kullanılabilir, ancak okunabilirliği zorlaştırabileceği için dikkatli olunmalıdır.

        javascript
        Kodu kopyala
        const App = () => {
        const user = { isLoggedIn: true, isAdmin: false };

        return (
            <div>
            {user.isLoggedIn ? (
                user.isAdmin ? (
                <h1>Welcome, Admin!</h1>
                ) : (
                <h1>Welcome, User!</h1>
                )
            ) : (
                <h1>Please Log In</h1>
            )}
            </div>
        );
        };

        export default App;
        Özet: Hangi Durumda Hangi Yöntem Kullanılmalı?
        Durum	Önerilen Yöntem
        Basit bir koşul	&& veya ternary
        if-else gereken durumlar	JSX dışında if-else veya fonksiyon
        Birden fazla durum kontrolü	switch-case
        Koşullu sınıf adı veya stiller	ternary
        Daha karmaşık ve iç içe kontroller	Fonksiyon veya switch-case


..............................................................................................................................................................................................................................................................................

            React'ta Arrow Fonksiyonları
            Arrow fonksiyonları (=>), JavaScript ES6 ile gelen kısa ve bağlam (context) dostu bir fonksiyon tanımlama yöntemidir. React'ta, özellikle bileşenlerin içindeki olay yönetimi, veri manipülasyonu ve liste işlemleri gibi durumlarda sıklıkla kullanılır.

            1. Temel Yapısı
            Arrow fonksiyonlarının temel sözdizimi şu şekildedir:

            javascript
            Kodu kopyala
            const functionName = (param1, param2) => {
            return param1 + param2;
            };
            Eğer yalnızca bir ifade döndürüyorsanız, return anahtar kelimesini ve {} süslü parantezleri atlayabilirsiniz:

            javascript
            Kodu kopyala
            const functionName = (param1, param2) => param1 + param2;
            2. React'ta Kullanımı
            2.1. React'ta Bir Fonksiyon Oluşturma
            Bir bileşende olay yönetimi için bir fonksiyon tanımlayabilirsiniz:

            javascript
            Kodu kopyala
            const App = () => {
            const handleClick = () => {
                alert("Button clicked!");
            };

            return <button onClick={handleClick}>Click Me!</button>;
            };

            export default App;
            2.2. Parametre Alan Arrow Fonksiyonları
            Birden fazla parametre alan bir fonksiyon yazabilirsiniz:

            javascript
            Kodu kopyala
            const App = () => {
            const greet = (name) => `Hello, ${name}!`;

            return <h1>{greet("React Developer")}</h1>;
            };

            export default App;
            2.3. Inline Arrow Fonksiyonlar
            Bazı durumlarda, fonksiyonları doğrudan onClick veya diğer olay işleyicilerine inline olarak tanımlayabilirsiniz:

            javascript
            Kodu kopyala
            const App = () => {
            return (
                <button onClick={() => alert("Button clicked!")}>
                Click Me!
                </button>
            );
            };

            export default App;
            Not: Ancak, performans optimizasyonu açısından inline fonksiyonlar gereksiz yere tekrar oluşturulmamalıdır. Daha büyük projelerde fonksiyonları bileşen dışında tanımlamak daha iyidir.

            3. Arrow Fonksiyonlarının Avantajları
            3.1. this Bağlamının Korunması
            Normal fonksiyonlarda this anahtar kelimesi, çağrıldığı bağlama göre değişir. Ancak arrow fonksiyonları, çevresel bağlamdaki (lexical scope) this anahtar kelimesini miras alır.

            javascript
            Kodu kopyala
            class App extends React.Component {
            handleClick = () => {
                console.log(this); // `this` App bileşenine işaret eder
            };

            render() {
                return <button onClick={this.handleClick}>Click Me!</button>;
            }
            }
            Eğer handleClick normal bir fonksiyon olsaydı, this bağlamını kaybederdi ve undefined olurdu.

            3.2. Daha Az Kod Yazımı
            Arrow fonksiyonları, geleneksel fonksiyon tanımlamalarına göre daha kısa ve okunabilirdir:

            javascript
            Kodu kopyala
            // Geleneksel Fonksiyon
            function add(a, b) {
            return a + b;
            }

            // Arrow Fonksiyon
            const add = (a, b) => a + b;
            4. React'ta Arrow Fonksiyonlarının Kullanım Alanları
            4.1. Listeleme ve map ile Kullanımı
            Arrow fonksiyonları, liste işlemleri sırasında map, filter, gibi metodlarla sıkça kullanılır.

            javascript
            Kodu kopyala
            const App = () => {
            const items = ["Pizza", "Burger", "Pasta"];

            return (
                <ul>
                {items.map((item, index) => (
                    <li key={index}>{item}</li>
                ))}
                </ul>
            );
            };

            export default App;
            4.2. Olay Yönetimi
            Olay işleyicilerinde bağlam (context) sorunlarını önlemek için kullanılır.

            javascript
            Kodu kopyala
            const App = () => {
            const handleClick = (message) => {
                alert(message);
            };

            return (
                <button onClick={() => handleClick("Button clicked!")}>
                Click Me!
                </button>
            );
            };

            export default App;
            4.3. Koşullu Render ile Kullanımı
            Fonksiyonlar, React'ta koşullu içerik oluşturmak için de kullanılabilir.

            javascript
            Kodu kopyala
            const App = () => {
            const isLoggedIn = true;

            const renderContent = () => {
                return isLoggedIn ? <h1>Welcome Back!</h1> : <h1>Please Log In</h1>;
            };

            return <div>{renderContent()}</div>;
            };

            export default App;
            5. React Class Bileşenlerinde Kullanımı
            Arrow fonksiyonları, class bileşenlerinde olay işleyicileri ve bağlam sorunlarını çözmek için çok faydalıdır.

            javascript
            Kodu kopyala
            class App extends React.Component {
            state = {
                count: 0
            };

            increment = () => {
                this.setState({ count: this.state.count + 1 });
            };

            render() {
                return (
                <div>
                    <p>Count: {this.state.count}</p>
                    <button onClick={this.increment}>Increment</button>
                </div>
                );
            }
            }

            export default App;
            6. Performans Dikkat Noktaları
            Inline Arrow Fonksiyonlar:
            Her render işleminde yeni bir fonksiyon oluşturulur. Performans açısından büyük listelerde useCallback veya dışarıda tanımlanmış fonksiyonlar tercih edilmelidir.
            javascript
            Kodu kopyala
            const App = () => {
            const handleClick = () => alert("Clicked!");

            return (
                <button onClick={handleClick}>Click Me!</button>
            );
            };
            Memoization ve useCallback:
            Bir arrow fonksiyonu, aynı referansı koruması için useCallback ile sarılabilir:
            javascript
            Kodu kopyala
            const App = () => {
            const handleClick = useCallback(() => {
                alert("Clicked!");
            }, []);

            return <button onClick={handleClick}>Click Me!</button>;
            };

..............................................................................................................................................................................................................................................................................


..............................................................................................................................................................................................................................................................................


..............................................................................................................................................................................................................................................................................

..............................................................................................................................................................................................................................................................................

..............................................................................................................................................................................................................................................................................

..............................................................................................................................................................................................................................................................................

..............................................................................................................................................................................................................................................................................

..............................................................................................................................................................................................................................................................................

..............................................................................................................................................................................................................................................................................

..............................................................................................................................................................................................................................................................................

..............................................................................................................................................................................................................................................................................

..............................................................................................................................................................................................................................................................................

..........................................................................................................................................................................................................................................................................................................................................