ASP İLE İLGİLİ BİLGİLER...
SQL Server şifreniz çalıntı şifrelerden birini içeriyor mu?
10 milyon şifre içinde sizin SQL Server kullanıcı şifrenizin olup olmadığını gösteren sorgu.

#Hergüne1SQLBilgisi
Teşekkürler Eitan Blumin. 🙏 

Thank you Eitan Blumin.
I made a little changes to your article and I used it with 10 million passwords.

https://madeiradata.com/post/detect-weak-passwords-in-sql-server?utm_content=buffer290f4&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer

--Tablo Oluştur
CREATE TABLE PasswordList (
 Password_ VARCHAR(255)
);
--Tabloyu truncate et
truncate table passwordlist
/*Github adresinden indirdiğin 10 milyon çalıntı
şifre listesini tabloya insert et
https://lnkd.in/gRiPfvjf
Common-Credentials/10-million-password-list-top-1000000.txt*/
BULK INSERT PasswordList
FROM 'E:\DATA\10-million-password-list-top-1000000.TXT'
WITH (
 ROWTERMINATOR = '0x0a' 
);
--sys.sql_logins tablosunda hash li şekilde tutulan şifrelerin 
--olup olmadığını PWDCOMPARE ile kontrol et
select 
PWDCOMPARE(p.Password_,l.[password_hash]) Eslesme,
http://l.name Kullanici, p.Password_ CalintiSifre from PasswordList p
cross apply (select * from sys.sql_logins) l 
where 
PWDCOMPARE(p.Password_,l.[password_hash])=1
...............................................................
web uygulamaları tarayıcılar ile çalışır. tarayıcılar html üzerinden derleyerek bize bir sayfa çıkarır. static sayfalar sadece gösterim yaparlar resim video vs ama kullanıcı ile etkileşime girmezler. dinamik sayfalar ise kullanıcı ile aktif olarak etkileşime geçerler. bir üye geldi bilgilerini girdi ve veri kaynağına kaydettik mesela o zaman dinamik bir sayfadır.
sayfalarımız bir serverde veya servera çevrilmiş bir yapıda durur ve client(istemci) istek attığında sayfayı çalıştırdığında istemcinin tarayıcısı sayfayı derler ve bize bir sonuç getirir. bir sayfa döner html css ve js. tarayıcılarda buna göre sayfa getirir...
tarayıcılar html css ve javascript dışında bir dil bilmezler sadece bunlarla çalışırlar... diğer etkileşimleri ise sunuculardaki kodlar yapar.
  sayfalar css veya js içermek zorunda değil ama html zorunludur. html üzerine kurulur sistem. html iskelettir.
dinamik olması için bir sayfanın veri kaynağı olması ve bilgi alışverişi olması gerekir.
static sayfalar kullanıcıya göre değişmez verikaynağına bağlı değildir.
........................................................................................................................
application mesela asp ile yazılan ona veritabanı bağlı application ise html,css,js ile yazılmış sayfaya bağlıdır.
application isteğe göre veritabanı ile haberleşir ve html css ve js çıktısı üretir ve cevap olarak tarayıcıya gönderilir.
uygulama veritabanına bağlı. isteğe göre requeste göre veritabanı ile ilteşim kurarak veya direkt olarak html,css,js çıktısı(çıktı her zaman html,css,js olabilir başka bir dilden anlamaz tarayıcılar.) üretir. ve tarayıcıya yollar.
....................................................................................................................................................................................................................................................................................................................................................................................................................................
.net her türden uygulama yapabildiğimiz sistem.    .net5.0 ile core ifadesi kalktı. 
cross platform olmayanlar sadece windowsta çalışıyordu şimdi ise linux,windows,macos'ta çalışabilir hale geldi.
core hem cross platform hem esnek(bir güncellemeyi daha kolay yapıyoruz ve daha sürdürülebilir daha uzun ömürlü oluyor.) hem yüksek performanslı hem geniş uygulama desteği var.
....................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
sdk ve runtime nedir?.
.net sdk = bir .net uygulaması geliştirmek için gereken kütüphaneleri ve araçları veren software development kit'tir. yazılım geliştirme kiti. bu kitin olması gerekiyor geliştirmek için.
runtime = .net ile geliştirilmiş bir uygulamanın çalışmasına imkan veren bir ortamdır. uygulamanın çalışması için gerekli kütüphaneleri barındırır. uygulamayı canlıya alır.
sdk'nın içinde runtime vardır.

mesela bir web uygulaması geliştirmek için bir sdk gerekiyor. sdk ile geliştirdiğimiz bir uygulamayı canlıya almak için ise runtime yeterlidir.
sdk ile uygulama geliştirdiysem uygulama türüne uygun runtime gerekir canlıya almak gerekir.
runtime sdk'dan daha hafif bir kütüphaneler topluluğu. elde hazır uygulama var ve canlıya almak istersek o zaman runtime yeterli olacaktır.

mvc tasarım deseni nedir? bir çözüm kalıbıdır. bir tasarım desenidir design pattern'dir.
model - view - controller üçlüsü. 3 ana component vardır. ilgili kodun ilgili yerde bulunmasını sağlar bize.
model iş kurallarımızı tanımladığımız yerdir. tc kimlik aldık mesela doğru mu gibi iş kuralları tanımladığımız yerdir.
view kısmı ise kullanıcının gördüğü kısımdır. üretilen sonuç yani view tarayıcıya yollanır ve oda derleyerek bir görüntü oluşturur...
controller(istek ilk controllere gelir) ise isteğe göre iş yapar. veritabanı gerektiricek bir işlem mi vs bunu kontrol eder eğer gerekirse modelden bir cevap ister. controller cevapını view olarak gönderir tarayıcıya tekrar olarak.

Requestler controllere gelir sonuç ise controllerden tarayıcılara gönderilir.
mvc bir tasarım kalıbıdır. bir framework değildir.

controller -> view  
controller -> model 
view -> model


asp.net core web app(model view controller) olanı seçeriz. croos platform olanı alalım linux,macos'da dahil olanı seçtik. hazır bir proje şablonu oluşturacak.
solution bir kap gibidir bir solution içinde birden fazla proje olabilir.
.....................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................................
asp.net core web app(model view controller) ile bir proje oluşturursak oluşan dosyaların ne olduğunu ne işe yaradığını göreceğiz.

conntected services klasörü var biz ora sayesinde 3. part servislere bağlanabiliriz.
dependies ksımında ise frameworkleri ekleyebildiğimiz bir kısım var.

properties içinde ise uyglamanın ayağa kalkması için nasıl bir yol izlenecek bunu ayarlayabiliriz.

wwwrot kısmı ise bir klasördür tüm static dosyalarımızı barındırırız. videolar resimler ,css js kütüphaneleride default olarak gelir. css için bootstrap js için jquery hazır olarak geliyor.

controllers kısmı ise controller kısmıdır. request'in ilk geldiği yerdir. tüm controllerleri controllers klasörü altında toplayacağız.

models kısmı hem bussiness kodunun olduğu yer hemde veritabanı işlemlerinin olduğu yerdir.

views kısmı ise kullanıcının göreceği arayüzü biz views kısmı içerisinde ayarlıyoruz. linkin ekranını bu klasörde yaparız.

appsettings.json ise uygulamadaki static yolları barındıracağımız yerdir. mesela veritabanına bağlanmak için yolu buraya koyabiliriz. veya facebooka bağlanmak için gereken key'i buraya koyabiliriz.

Program.cs dosyası ise uygulamanın ayağa kalktığı yerdir. main'dir aslında. mesela veritabanına bağlanmak istersek bir session kullanmak istersek buradan ayaralarız. uygulamanın genel ayarları burada yapılır.


asp.net core web app(model view controller) ile oluşturdğumuz bir projeyi nasıl ayağa kaldıracağız.
cross platform olduğu için iss ile ya da kestrel ile ayağa kaldırabiliriz. klasik .net olsaydı sadece iss olurdu. ama cross platform olduğu için kestrel'de kullanabiliriz...

properties içindeki launchsetttings.json içinde ayarları vardır iss ve kestrel kısımlarının

        {
        "iisSettings": {
            "windowsAuthentication": false,
            "anonymousAuthentication": true,
            "iisExpress": {
            "applicationUrl": "http://localhost:39372",
            "sslPort": 44374
            }
        },
        "profiles": {
            "turkcell1.Web": {
            "commandName": "Project",
            "dotnetRunMessages": true,
            "launchBrowser": true,
            "applicationUrl": "https://localhost:7289;http://localhost:5258",
            "environmentVariables": {
                "ASPNETCORE_ENVIRONMENT": "Development"
            }
            },
            "IIS Express": {
            "commandName": "IISExpress",
            "launchBrowser": true,
            "environmentVariables": {
                "ASPNETCORE_ENVIRONMENT": "Development"
            }
            }
        }
        }

üstte iss express seçersek iss ile ayağa kaldırırız. hem http hemde https ile ayağa kalkar. https ile ayağa almalıyız ki client ile server arasındaki iletişim şifrelensin.

kestrel ile ayağa kaldırmak için ise uygulamanın ismini seçeriz.              "turkcell1.Web EMRE": {  ama buradan bir isim değişimi yapabiliriz.
kestrel ile ayağa kaldırınca bir console ekranı geliyor bunun sebebi aslında cross olduğu için konsol arayüzü geliyor. web uygulamamız özünde bir konsol uygulaması. open source olarak ayağa kaldırırsak bir konsol arayüzü geliyor bize.

program.cs'de bir main metotu yok ama ara dillerde ekleniyor ama biz main metotu ile uğraşmıyoruz. app.run direkt olarak uygulamayı çalıştırıyor.

linux ve macos için kestrel kullanabiliriz windows içinde kestrel kullanabiliriz. ama iss sadece microsoft.  




Visual Studio'da oluşturduğunuz web sitesini Internet Information Services (IIS) ile ayağa kaldırırken varsayılan tarayıcı yerine kendi istediğiniz tarayıcıyı çalıştırmak için aşağıdaki adımları takip edebilirsiniz:

Visual Studio Ayarları:

Visual Studio'yu açın ve projenizi yükleyin.
Üst menüden "Tools" (Araçlar) menüsüne gidin ve "Options" (Seçenekler) öğesine tıklayın.
Sol taraftaki menüden "Projects and Solutions" (Projeler ve Çözümler) altında "Web Projects" (Web Projeleri) öğesini seçin.
"Use the 64 bit version of IIS Express for web sites and projects" seçeneğini işaretleyin (Eğer 64-bit kullanıyorsanız).
Özel Tarayıcı Ayarı:

Projenizde "Solution Explorer"(ctrl + alt + l) (Çözüm Gezgini) penceresini açın.
Projenizin adının yanındaki küçük oka tıklayarak alt öğelerini genişletin.
"Properties" (Özellikler) klasörüne sağ tıklayın ve "Open" (Aç) öğesini seçin.
"Web" sekmesine geçin.
"Start Action" (Başlangıç Eylemi) bölümünde "Start External Program" (Harici Program Başlat) seçeneğini seçin.
"Program" alanına, kullanmak istediğiniz tarayıcının çalıştırılabilir dosyasının yolunu girin. Örneğin, Google Chrome için bu yol genellikle C:\Program Files\Google\Chrome\Application\chrome.exe şeklindedir.
"Command line arguments" (Komut satırı argümanları) bölümüne ise projenizin URL'sini girin. Örneğin, http://localhost:8080 gibi.
Kayıt ve Çalıştırma:

Bu ayarları kaydedin ve projenizi başlatın.
Artık projeniz, belirlediğiniz tarayıcıda açılacaktır.
Bu adımları izleyerek varsayılan tarayıcı yerine kendi seçtiğiniz tarayıcıyı kullanabilirsiniz.



temel routing yapısı.



