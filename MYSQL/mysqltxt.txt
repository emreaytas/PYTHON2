####################################################################################################################################################################################################################################################################################################################################

python -m pip install mysql-connector-python

drop table if exists table1
alter table, drop database if exists name, vs vs 

import pymysql as sql

connection = sql.connect(
         host = "localhost",
         password = "12345",
         user= "root",
      ) # önceden oluşmuş bir  database varsa o zaman database = "ismi"  şeklinde bağlantı sağlayabilirdik.

////database oluşturma ve sonra tablo ekleme.//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import pymysql as sql
# if exists   demek eğer varsa demek.
connection = sql.connect(
         host = "localhost",
         password = "12345",
         user= "root",
      ) # önceden oluşmuş bir  database varsa o zaman database = "ismi"  şeklinde bağlantı sağlayabilirdik.

print(connection) # <pymysql.connections.Connection    burada olduğu gibi bağlantı sağlanmış...

# tablo oluşturma...

cursor = connection.cursor() # bir cursor oluştururuz. komutları yollamak için.
cursor.execute("""CREATE DATABASE if not exists EMRE""") # if not exists demek eğer yoksa oluştur demek.
cursor.execute("USE EMRE") # şu an o database'yi kullanıyoruz. sistemde.

def showDatabases():
    cursor.execute("show databases") # bilgiler cursora yüklenir bizde yazdırırsak eğer bu bilgileri çekmiş oluruz.
    for i in cursor:
        print(i)

# showDatabases()

def createTable():
    sorgu = """create table if not exists table1 (name varchar(100),age integer(10))"""
    cursor.execute(sorgu)
    
createTable()


def showTables():
    cursor.execute("show tables")
    for i in cursor:
        print(i) 

# showTables()           

connection.close()  #bağlantıyı kesmek için kullanılır gerekli yerlerde.

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/////veri ekleme/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

import pymysql as sql
# if exists   demek eğer varsa demek.
connection = sql.connect(
         host = "localhost",
         password = "12345",
         user= "root",
      ) # önceden oluşmuş bir  database varsa o zaman database = "ismi"  şeklinde bağlantı sağlayabilirdik.

print(connection) # <pymysql.connections.Connection    burada olduğu gibi bağlantı sağlanmış...

# tablo oluşturma...

cursor = connection.cursor() # bir cursor oluştururuz. komutları yollamak için.
cursor.execute("""CREATE DATABASE if not exists EMRE""") # if not exists demek eğer yoksa oluştur demek.
cursor.execute("USE EMRE") # şu an o database'yi kullanıyoruz. sistemde.

def showDatabases():
    cursor.execute("show databases") # bilgiler cursora yüklenir bizde yazdırırsak eğer bu bilgileri çekmiş oluruz.
    for i in cursor:
        print(i)

# showDatabases()

def createTable():
    sorgu = """create table if not exists table1 (name varchar(100),age integer(10))"""
    cursor.execute(sorgu)
    
createTable()


def showTables():
    cursor.execute("show tables")
    for i in cursor:
        print(i) 

# showTables()           

def addData(name,age):
    # verileri bir tuple içerisinde vermeliyiz.
    veriler = (name,age)
    # insert into tabloname(istenirse eklenecek elemanların sıralaması) values(%s,%s...) yapısı ile ekleme yaparız. 
    sorgu = """insert into table1(name,age) values(%s,%s)""" # istersek name age yazmazdık hepsi sırası ile veri alırdı içine. ama eğer boş yer bırakmak istersek falan o zaman sırası ile hangi veriler girilecek belli ederiz.    
    # %s demek gelecek verinin yeri demektir.
    cursor.execute(sorgu,veriler) # veriler bir tuple içerisinde olmalıdır.   (name,age) gibi bir şekilde verilmeli.
    connection.commit() # commit'leme yaparız böylece veriler databaseye gönderilir. göndermezsek cursorda kalır.


def addDataS(names,ages):
    veriler = []
    
    for i in zip(names,ages): # zip ile yerleştirdik aynı indexteki karşılıklı verileri bir liste içerisine.
        veriler.append(i)
    
    # bir liste içerisinde tuple oluşturduk liste içerisinde names ve ages geldi sırası ile alıp bir listeye her aynı indexte olan bir tupleye yerleşecek biçimde yerleştirdik.
        
    # insert into tabloname(istenirse eklenecek elemanların sıralaması) values(%s,%s...) yapısı ile ekleme yaparız. 
    sorgu = """insert into table1(name,age) values(%s,%s)""" # istersek name age yazmazdık hepsi sırası ile veri alırdı içine. ama eğer boş yer bırakmak istersek falan o zaman sırası ile hangi veriler girilecek belli ederiz.    
    # %s demek gelecek verinin yeri demektir.
    cursor.executemany(sorgu,veriler) # veriler bir tuple içerisinde olmalıdır.   (name,age) gibi bir şekilde verilmeli.  eğer bir liste içerisinde verilen olduğu tuple veriler varsa o zaman executemany() kullanılır.  sorgu,veriler şeklinde de verileri alır.
    connection.commit() # commit'leme yaparız böylece veriler databaseye gönderilir. göndermezsek cursorda kalır.

# addDataS(["emre","arif","ford"],[10,10,12])

def showData():
    sorgu = """select * from table1"""
    cursor.execute(sorgu)
    veriler = cursor.fetchall()
    for i in veriler:
        print(i)

# showData()

    

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///select data///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

def whereName(aa):
    sorgu = f"""select * from table1 where name = '{aa}' """  # where ile koşul belirtebiliriz. mesela select name from table1 where age = 10   gibi. 
    cursor.execute(sorgu)
    veriler = cursor.fetchall() # fetchall() dersek cursora gelen tüm verileri getirir.  eğer fetchone() dersek tek  bir veri gelir.  .fetchmany(sayi) dersek istenen kadar gelir. 
    # select kolon1,kolon2... from tabloismi where = koşullar... and ve or kullanabiliriz.
    for i in veriler:
        print(i)    # eğer birden fazla kolon bilgisi gelirse bunlar bir tuple içerisinde gelirler.

def showData():
    sorgu = """select * from table1"""  # where ile koşul belirtebiliriz. mesela select name from table1 where age = 10   gibi. 
    cursor.execute(sorgu)
    veriler = cursor.fetchall() # fetchall() dersek cursora gelen tüm verileri getirir.  eğer fetchone() dersek tek  bir veri gelir.  .fetchmany(sayi) dersek istenen kadar gelir. 
    # select kolon1,kolon2... from tabloismi where = koşullar... and ve or kullanabiliriz.
    for i in veriler:
        print(i)


def whereName2(aa):
    
    sorgu = """select * from table1 where name = %s """  # where ile koşul belirtebiliriz. mesela select name from table1 where age = 10   gibi. 
    # select * from where name like "Mi&" # bunu dersek başlangıcı Mi olanlar gelir.    "%Mi%" yaparsak herhangi bir yerde Mi olanı alırız.  "%Mi" yaparsak Mi ile biteni alırız. 
    cursor.execute(sorgu,(aa,)) # execute içerisine verileri tuple içerisinde göndermemiz lazım.  genel olara %s ile işlem yapılınca execute'ler içerisinde tuple içerisinde olmalı veriler tek bir veri olacaksada tuple içerisinde ve yanına bir virgül ile koyulmalı.
    veriler = cursor.fetchall() # fetchall() dersek cursora gelen tüm verileri getirir.  eğer fetchone() dersek tek  bir veri gelir.  .fetchmany(sayi) dersek istenen kadar gelir. 
    # select kolon1,kolon2... from tabloismi where = koşullar... and ve or kullanabiliriz.
    for i in veriler:
        print(i)    
 

# showData()
whereName("emre")

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//update////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

def updateData(name):
    sorgu = """update table1 set name = '%s' where name = '%s'""" # önce update edilecek tablo sonra set ile değişim olunca neler değişecek belirt. sonra 
    cursor.execute(sorgu,("emre",name))
    connection.commit()

def showData():
    sorgu = """select * from table1 limit 5"""  # where ile koşul belirtebiliriz. mesela select name from table1 where age = 10   gibi.    limit eklersek eğer o zaman ilk gelen 5 tane değeri alır gerisini almaz.
    cursor.execute(sorgu)
    veriler = cursor.fetchall() # fetchall() dersek cursora gelen tüm verileri getirir.  eğer fetchone() dersek tek  bir veri gelir.  .fetchmany(sayi) dersek istenen kadar gelir. 
    # select kolon1,kolon2... from tabloismi where = koşullar... and ve or kullanabiliriz.
    for i in veriler:
        print(i)

def showData2():
    sorgu = """select * from table1 limit 5 offset 2"""  # where ile koşul belirtebiliriz. mesela select name from table1 where age = 10   gibi.    limit eklersek eğer o zaman ilk gelen 5 tane değeri alır gerisini almaz. offset eklersek eğer şunu deriz ilk 2 veriyi atla sonra almaya başla. offset 3 olsa ilk 3 satırı atlar sonra işlem yapardı. offset atlama için kullanılır.
    cursor.execute(sorgu)
    veriler = cursor.fetchall() # fetchall() dersek cursora gelen tüm verileri getirir.  eğer fetchone() dersek tek  bir veri gelir.  .fetchmany(sayi) dersek istenen kadar gelir. 
    # select kolon1,kolon2... from tabloismi where = koşullar... and ve or kullanabiliriz.
    for i in veriler:
        print(i)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

def showData3():
    sorgu = """select * from table1 order by name"""  # order by ile isme göre sırala deriz. # burada yıldız tüm sutunlar demektir.
    sorgu1 = """select * from table1 order by name desc""" # desc eklersek eğer büyükten küçüğe sıralama yapar.
    cursor.execute(sorgu)
    veriler = cursor.fetchall() # fetchall() dersek cursora gelen tüm verileri getirir.  eğer fetchone() dersek tek  bir veri gelir.  .fetchmany(sayi) dersek istenen kadar gelir. 
    # select kolon1,kolon2... from tabloismi where = koşullar... and ve or kullanabiliriz.
    for i in veriler:
        print(i)

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///deleting and dropping///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

def deleteDAta(name1):
    sorgu = """delete from table1 where name = name1""" # eğer where koşulunu girmezsek True kabul eder ve tüm verileri siler.  komple satırı siler.
    cursor.execute(sorgu)
    connection.commit()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

####################################################################################################################################################################################################################################################################################################################################